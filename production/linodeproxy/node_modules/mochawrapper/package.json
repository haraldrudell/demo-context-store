{
  "name": "mochawrapper",
  "description": "Easy testing using mocha and assert by Harald Rudell",
  "author": {
    "name": "Harald Rudell",
    "email": "harald@allgoodapps.com",
    "url": "http://www.haraldrudell.com"
  },
  "keywords": [
    "test",
    "bdd",
    "tdd",
    "mocha",
    "assert",
    "nodeunit"
  ],
  "homepage": "https://github.com/haraldrudell/mochawrapper",
  "version": "0.0.34",
  "contributors": [
    {
      "name": "Harald Rudell",
      "email": "harald@allgoodapps.com",
      "url": "http://www.haraldrudell.com"
    }
  ],
  "dependencies": {
    "jade": "*",
    "haraldutil": ">= 0.1.5",
    "greatjson": ">= 0.0.8",
    "uglify-js": "<= 1.3.4",
    "mocha2": "*"
  },
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "https://haraldrudell@github.com/haraldrudell/mochawrapper.git"
  },
  "bin": {
    "mocha": "./bin/mocha",
    "_mocha": "./bin/_mocha",
    "mochacoverage": "./bin/mochacoverage",
    "addmocha": "./bin/addmocha"
  },
  "main": "lib/mochawrapper",
  "scripts": {
    "test": "mocha --ui exports --reporter spec",
    "monitor": "mocha --ui exports --reporter min --watch",
    "debugtest": "mocha --debug-brk --ui exports --reporter spec",
    "coverage": "mochacoverage"
  },
  "readme": "# Mocha Wrapper\n\nThe [Mocha Wrapper](https://github.com/haraldrudell/mochawrapper) module makes testing with mocha and assert very easy.\n\n## Benefits\n\n1. Find untested code via the **code coverage** report\n2. Get **Immediate feedback** by rerunning tests as you save\n3. Run **smoke test** before code push `npm test` to avoid bad pushes\n4. Get testing immediately using **One liner**\n\n## Features\n\n1. Ability to run **coverage tests** anytime without code changes\n2. **Package consistency** test looks for frequently forgotten items\n3. Automated **adding of mocha** to your project\n4. Enhanced **assertion printouts** with message, actual and expected values\n5. **Abbreviated stack traces** compared to the underlying framework\n6. **Resilience** against syntax issues in test files\n\n## Add to my project NOW\n\n**Simply add mocha :)**\n\n```js\nnpm install mochawrapper; node_modules/.bin/addmocha; npm test\n```\n\n```\n> mochawrapper@0.0.18 test /home/foxyboy/Desktop/c505/node/mochawrapper\n> mocha --ui exports --reporter spec\n...\n```\n\nThe `addmocha` command updates .gitignore, package.json and the test folder in a  safe manner so testing can start immediately from a single dependency.\n\n\nImagine yourself, at blood, toil, tears and sweat, supported by the sweet mocha every time you save your work:\n\n```js\nnpm run-script monitor\n```\n\n```\n  debugger:1 found in 'lib/passportwrapper.js'\nFiles checked for syntax: javascript:27, json:1 in 0.1 s\n\n  ✔ 8 tests complete (150ms)\n\n  ◡ watching\n```\n\n## SHOW ME RIGHT, RIGHT NOW\n\nA project using mochawrapper is [tagfinder](https://github.com/haraldrudell/tagfinder):\n\n```\ngit clone https://github.com/haraldrudell/tagfinder\ncd tagfinder\nnpm install\n\nnpm test\nnpm run-script coverage\n```\n\nThe system’s browser displays the test coverage report for tagfinder.\n\n## Automatic Coverage Report\n\n`npm run-script coverage` displays a test coverage report by opening a tab or window in the system’s browser. There is no need to modify any code to run coverage, and you can continuously use it as a guide for further areas to test.\n\n# Reference\n\n## Continuous Testing\n\n`npm run-script monitor` continuously displays current test results and rerun the tests as you save your sourcefiles.\n\n## Test Everything\n\n`npm test` runs all the tests in the test folder.\n\n## Debug Tests\n\n`npm run-script debugtest` runs all tests using the debugger. By inserting JavaScript’s debugger statement at strategic locations you can run to the exact location where there is something funky going on.\n\n## Coverage Report\n\n```\nnpm run-script coverage\n\nmochacoverage Preparing an automated test coverage report\nmochacoverage Invoking jsCoverage\nmochacoverage Running tests\nFiles checked for syntax: javascript:9, json:1 in 0.1 s\nmochacoverage Preparing report\nmochacoverage Launching browser\nmochacoverage Complete\n```\n\nThis does coverage analysis of JavaScript files in the project's lib folder. When complete, Mocha Wrapper launches a new tab in the system default browser containing JavaScript source code. Lines marked red were not executed.\n\nThe report can also be invoke using `node_modules/.bin/mochacoverage` or simply `mochacoverage` if you have updated your PATH. For both of these methods, you can add a top-level folder other than `lib`.\n\n## Getting jscoverage\n\nThe [jsCoverage](http://siliconforks.com/jscoverage/) command is required.\n\n```\njscoverage --version\njscoverage 0.5.1\n```\n\n* Linux has a jscoverage package: `sudo apt-get install jscoverage`\n* Windows: [jsCoverage](http://siliconforks.com/jscoverage/) site has zip to download\n* Mac: `sudo macports install jscoverage`\n* There is a [github node-jscoverage](https://github.com/visionmedia/node-jscoverage) if you have a C compiler installed.\n\n## Regular Test Output\n\n```\nnpm test\n\n> tagfinder@0.1.0 test /home/foxyboy/Desktop/c505/node/tf\n> mocha --ui exports --reporter spec\n\n  Empty Markup\n    ✓ Can compile undefined \n    ✓ Can compile empty string \n\n  Parsing\n    ✓ Can remove html comments \n    ✓ Can find opening tags \n    ✓ Empty attributes \n    ✓ Unquoted attributes \n    ✓ Quoted attributes \n    ✓ Unescaped content: script and textarea \n    ✓ Closing tag in unescaped content \n    ✓ MathML \n    ✓ cdata section \n    ✓ svg \n\n  Package Consistency:\n    ◦ Proper JavaScript and json syntax: Files checked for syntax: javascript:3, json:1 in 0.1 s\n    ✓ Proper JavaScript and json syntax (87ms)\n    ✓ Package descriptor file \n    ✓ git ignore declaration \n    ✓ Readme \n\n\n  ✔ 16 tests complete (102ms)\n```\n\n## Tip\n\nAdd `node_modules/.bin` to your PATH environment variable to run executable scripts from your modules.\n\n# Test Examples\n\nHere are two tests from a test suite. The first test is regular code, and the second test features a callback.\n\n```js\nvar assert = require('mochawrapper')\n\nexports['Array Length:'] = {\n\t'array.length returns a number': function () {\n\t\tvar expected = 'number'\n\t\tvar actual = typeof [].length\n\t\tassert.equal(actual, expected)\n\t},\n\t'Testing with callback (asynchronous)': function (done) {\n\t\tsetTimeout(completeWhenThisExecutes, 100)\n\t\tconsole.log('background complete')\n\t\tfunction completeWhenThisExecutes() {\n\t\t\tconsole.log('finishing test')\n\t\t\tdone()\n\t\t}\n\t}\n}\n```\nSave the tests as a .js file in the project's test folder.\n\n\n```\nnpm test\n\n> cloudclearing@0.0.2 test /home/foxyboy/Desktop/c505/node/cloudclearing\n> mocha --ui exports --reporter spec\n\n\n  Array Length:\n    ✓ array.length returns a number \n    ◦ Testing with callback (asynchronous): background complete\nfinishing test\n    ✓ Testing with callback (asynchronous) (111ms)\n\n  Package Consistency:\n    ◦ Proper JavaScript and json syntax: Files checked for syntax: javascript:16, json:1 in 0.1 s\n    ✓ Proper JavaScript and json syntax (79ms)\n    ✓ Package descriptor file \n    ✓ git ignore declaration \n    ✓ Readme \n\n\n  ✔ 7 tests complete (198ms)\n```\n\n# Notes\n\n© [Harald Rudell](http://www.haraldrudell.com) wrote mochawrapper for node in August, 2012\n\n* Mochawrapper wraps and extends **mocha**, a testing framework by [TJ Holowaychuk ](http://tjholowaychuk.com/)\n\nNo warranty expressed or implied. Use at your own risk.\n\nPlease suggest better ways, new features, and possible difficulties on [github](https://github.com/haraldrudell/mochawrapper)",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/haraldrudell/mochawrapper/issues"
  },
  "_id": "mochawrapper@0.0.34",
  "_from": "mochawrapper@>= 0.0.34"
}

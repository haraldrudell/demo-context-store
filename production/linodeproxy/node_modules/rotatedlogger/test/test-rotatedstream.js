// test-rotatedlogger.js
// Â© 2013 Harald Rudell <harald.rudell@therudells.com> (http://haraldrudell.com) MIT License

var rotatedstream = require('../lib/rotatedstream')

var perioder = require('../lib/perioder')
var gettmpfolder = require('../lib/gettmpfolder')
// http://nodejs.org/docs/latest/api/fs.html
var fs = require('fs')
// http://nodejs.org/api/path.html
var path = require('path')

// https://github.com/haraldrudell/mochawrapper
var assert = require('mochawrapper')

var cws = fs.createWriteStream
var te = perioder.TimeEmitter
var st = fs.stat
var ren = fs.rename
var gh = gettmpfolder.getHomeFolder
var fst = fs.fstat
var stsy = fs.statSync

exports['RotatedStream:'] = {
	'Exports': function () {
		assert.exportsTest(rotatedstream, 1)
	},
	'Constructor': function (done) {
		var opts = {logSubfolder: ''}

		fs.createWriteStream = function mockCreateWriteStream(f, o) {return {
			on: function () {return this},
			once: function () {return this},
		}}

		perioder.TimeEmitter = function mockTimeEmitter(o) {return {on: function () {return this}}}

		var actual = new rotatedstream.RotatedStream(opts)
			.once('error', errorListener)
		process.nextTick(checkActual) // allow for an error to be emitted

		function checkActual() {
			assert.ok(actual.writable)

			done()
		}

		function errorListener(err) {
			assert.equal(err, null)
		}
	},
	'Constructor opts': function (done) {
		var opts = {
			flags: {},
			logFile: 'LOGFILE',
			logSubfolder : 'SUBFOLDER',
			logFileExt: '.EXT',
			logSize: 5,
			rotating: {},
		}
		var home = '/HOME'

		fs.statSync = function mockStatSync(f) {return {isFile: function () {}, isDirectory: function () {return true}}}

		fs.createWriteStream = function mockCreateWriteStream(f, o) {
			assert.equal(f, home + '/' + opts.logSubfolder + '/' + opts.logFile + opts.logFileExt)
			assert.equal(o, opts.flags)
			return {
			on: function () {return this},
			once: function () {return this},
		}}

		perioder.TimeEmitter = function mockTimeEmitter(o) {
			assert.equal(o, opts.rotating)
			return {on: function () {return this}}}

		gettmpfolder.getHomeFolder = function mockHome() {return home}

		var actual = new rotatedstream.RotatedStream(opts)
		process.nextTick(checkActual) // allow for an error to be emitted

		function checkActual() {
			assert.ok(actual.writable)

			done()
		}

		function errorListener(err) {
			assert.equal(err, null)
		}
	},
	'Write': function (done) {
		var str = 'STR'
		var opts = {logSubfolder: ''}

		var aWrite = 0
		var mockStream = {
			writable: true,
			on: function () {return this},
			once: function () {return this},
			removeListener: function () {return this},
			write: function mockWrite(s, cb) {
				aWrite++
				assert.equal(s, str)
				assert.equal(typeof cb, 'function')
				cb()
			},
		}
		fs.createWriteStream = function mockCreateWriteStream(f, o) {return mockStream}

		perioder.TimeEmitter = function mockTimeEmitter(o) {return {on: function () {return this}}}

		var aErr = 0
		function eCounter(e) {aErr++}

		var actual = new rotatedstream.RotatedStream(opts)
			.on('error', eCounter)
		assert.ok(actual.writable)

		actual.write(str, checkWrite)

		function checkWrite(err) {
			if (err) assert.equal(err, null)
			assert.ok(aWrite)

			mockStream.writable = false
			actual.write(str, checkFirstError)
		}

		function checkFirstError(err) {
			assert.ok(err && err.message && ~err.message.indexOf('not writable'))

			actual.write(str, checkSecondError)
		}

		function checkSecondError(err) {
			assert.ok(err && err.message && ~err.message.indexOf('unavailable'))

			done()
		}
	},
	'End': function (done) {
		var opts = {logSubfolder: ''}

		var aEnd = 0
		var mockStream = {
			writable: true,
			on: function () {return this},
			once: function () {return this},
			removeListener: function () {return this},
			end: function mockEnd(cb) {
				aEnd++
				assert.equal(typeof cb, 'function')
				cb()
			},
		}
		fs.createWriteStream = function mockCreateWriteStream(f, o) {return mockStream}

		perioder.TimeEmitter = function mockTimeEmitter(o) {return {
			on: function () {return this},
			cancel: function () {},
			removeListener: function () {return this},
		}}

		var aErr = 0
		function eCounter(e) {aErr++}

		var actual = new rotatedstream.RotatedStream(opts)
			.on('error', eCounter)
		assert.ok(actual.writable)

		actual.end(checkEnd)

		function checkEnd(err) {
			if (err) assert.equal(err, null)
			assert.ok(aEnd)

			done()
		}
	},
	'Destroy': function (done) {
		var opts = {logSubfolder: ''}

		var aDestroy = 0
		var mockStream = {
			writable: true,
			on: function () {return this},
			once: function () {return this},
			removeListener: function () {return this},
			destroy: function mockEnd(cb) {
				aDestroy++
				assert.equal(typeof cb, 'function')
				cb()
			},
		}
		fs.createWriteStream = function mockCreateWriteStream(f, o) {return mockStream}

		perioder.TimeEmitter = function mockTimeEmitter(o) {return {
			on: function () {return this},
			cancel: function () {},
			removeListener: function () {return this},
		}}

		var aErr = 0
		function eCounter(e) {aErr++}

		var actual = new rotatedstream.RotatedStream(opts)
			.on('error', eCounter)
		assert.ok(actual.writable)

		actual.destroy(checkDestroy)

		function checkDestroy(err) {
			if (err) assert.equal(err, null)
			assert.ok(aDestroy)

			done()
		}
	},
	'Rotate': function (done) {
		var opts = {logSubfolder: ''}

		var aEnd = 0
		var aWrite = 0
		var mockStream = {
			writable: true,
			on: function () {return this},
			once: function () {return this},
			removeListener: function () {return this},
			end: function mockEnd(s, cb) {
				aEnd++
				assert.ok(~s.indexOf('rotated'))
				assert.equal(typeof cb, 'function')
				cb()
			},
			write: function mockWrite(s, cb) {
				aWrite++
				if (cb) cb()
			},
		}
		fs.createWriteStream = function mockCreateWriteStream(f, o) {return mockStream}

		perioder.TimeEmitter = function mockTimeEmitter(o) {return {
			on: function () {return this},
			cancel: function () {},
			removeListener: function () {return this},
		}}

		function eCounter(e) {
			assert.equal(e, null)
		}

		var actual = new rotatedstream.RotatedStream(opts)
			.on('error', eCounter)
		assert.ok(actual.writable)

		var aStat = 0
		fs.stat = function mockStat(f, cb) {
			assert.ok(~f.indexOf('_'))
			var err = new Error(arguments.callee.name)
			err.code = 'ENOENT'
			aStat++
			cb(err)
		}

		var aRename = 0
		fs.rename = function mockRename(a, b, cb) {
			aRename++
			cb()
		}

		actual.rotate(checkRotate) // rotate without a write: bypass

		function checkRotate(err) {
			if (err) assert.equal(err, null)

			actual.write('')
			assert.ok(aWrite)

			actual.rotate(checkFullRotate)
		}

		function checkFullRotate(err) {
			if (err) assert.equal(err, null)
			assert.ok(aEnd)
			assert.ok(aStat)
			assert.ok(aRename)
			assert.equal(aWrite, 2)

			done()
		}
	},
	'Rotate LogSize': function (done) {
		var opts = {logSubfolder: '', logSize: 1000}

		var aEnd = 0
		var aWrite = 0
		var streamEvents = {}
		var mockStream = {
			bytesWritten: 0,
			writable: true,
			on: function (e, f) {streamEvents[e] = f; return this},
			once: function (e, f) {streamEvents[e] = f; return this},
			removeListener: function () {return this},
			end: function mockEnd(s, cb) {
				aEnd++
				assert.ok(~s.indexOf('rotated'))
				assert.equal(typeof cb, 'function')
				cb()
			},
			write: function mockWrite(s, cb) {
				this.bytesWritten += s.length
				aWrite++
				if (cb) cb()
			},
		}
		fs.createWriteStream = function mockCreateWriteStream(f, o) {return mockStream}

		perioder.TimeEmitter = function mockTimeEmitter(o) {return {
			on: function () {return this},
			cancel: function () {},
			removeListener: function () {return this},
		}}

		function eCounter(e) {
			assert.equal(e, null)
		}

		var actual = new rotatedstream.RotatedStream(opts)
			.on('error', eCounter)

		assert.ok(actual.writable)

		var checkSize = streamEvents.open
		assert.equal(typeof checkSize, 'function')

		fs.fstat = function mockFstat(fd, cb) {
			cb(null, {size: opts.logSize - 1})
		}
		checkSize() // should subtract 999 from logSize

		var aStat = 0
		fs.stat = function mockStat(f, cb) {
			assert.ok(~f.indexOf('_'))
			var err = new Error(arguments.callee.name)
			err.code = 'ENOENT'
			aStat++
			cb(err)
		}

		var aRename = 0
		fs.rename = function mockRename(a, b, cb) {
			aRename++
			cb()
		}

		actual.write('abc') // should lead to a rotate
		process.nextTick(checkRotate)

		function checkRotate(err) {
			if (err) assert.equal(err, null)

			assert.ok(aWrite, 2)
			assert.ok(aEnd)
			assert.ok(aStat)
			assert.ok(aRename)

			done()
		}

	},
	'after': function () {
		fs.createWriteStream = cws
		perioder.TimeEmitter = te
		fs.stat = st
		fs.rename = ren
		gettmpfolder.getHomeFolder = gh
		fs.fstat = fst
		fs.statSync = stsy
	},
}

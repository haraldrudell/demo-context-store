// anytimer.js
// Provide setTimeout and SetInterval allowing for long time periods
// Â© 2013 Harald Rudell <harald.rudell@therudells.com> (http://haraldrudell.com) MIT License

/*
timer or interval of up to 280k years
*/

exports.AnyTimer = AnyTimer

var TIMEOUT_MAX = 2147483647
var time1day = 24 * 60 * 60 * 1e3

/*
Provide timer and interval
fn(): function
timeval: number, default 1: unit ms
isInterval: boolean, default false

JavaScript setTimeout and setInterval can only handle periods of about 24 days
JavaScript integers are up to 2**53, ie. at least 280,000 years
*/
function AnyTimer(fn, timeval, isInterval) {
	this.clear = clear
	var isClear
	timeval = timeval >= 1 ? +timeval : 1 // number >= 1
	isInterval = !!isInterval
	var nextTargetTime = Date.now() + timeval
	var timer
	var interval

	if (typeof fn === 'function')
		if (isInterval && timeval <= TIMEOUT_MAX) interval = setInterval(fn, timeval) // this actually works with setInterval
		else useCascadingTimeouts()

	function useCascadingTimeouts() {
		timer = null
		if (!isClear) {
			var remaining = nextTargetTime - Date.now()
			if (remaining <= 0) {
				fn()
				if (isInterval && !isClear) {
					nextTargetTime += timeval
					useCascadingTimeouts()
				}
			} else timer = setTimeout(useCascadingTimeouts, remaining < time1day ? remaining : time1day)
		}
	}

	function clear() {
		isClear = true
		if (timer) {
			var t = timer
			timer = null
			clearTimeout(t)
		}
		if (interval) {
			var i = interval
			interval = null
			clearInterval(i)
		}
	}
}

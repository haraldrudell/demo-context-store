// test-appdata.js
// Copyright Â© 2013 Harald Rudell <harald.rudell@therudells.com> (http://haraldrudell.com) MIT License

var appdata = require('../lib/appdata')

var appshutdown = require('../lib/appshutdown')
var testconfig = require('../lib/testconfig')

// https://github.com/haraldrudell/haraldutil
var haraldutil = require('haraldutil')

// https://github.com/haraldrudell/mochawrapper
var assert = require('mochawrapper')

var ii = appshutdown.init
of = testconfig.getOverrideLaunchFolder

exports['AppData:'] = {
	'Exports': function () {
		assert.exportsTest(appdata, 3)
	},
	'InitAppData': function () {
		var jsonData = {
			haraldopsAppName: 'APPNAME',
			haraldopsidentifier: 'IDENTIFIER',
			haraldopsAppFolder: 'APPFOLDER',
			log: 'LOG',
			haraldopsViews: 'VIEWS',
			haraldopsDefaultsFile: 'DEFAULTSFILE'
		}
		var expected = {
			log: jsonData.log,
			appName: jsonData.haraldopsAppName,
			appId: jsonData.haraldopsidentifier,
			views: jsonData.haraldopsViews,
			defaultsFile: jsonData.haraldopsDefaultsFile,
			launchFolder: jsonData.haraldopsAppFolder,
		}
		var fns = ['anomaly', 'registerHandler', 'getLog', 'sendMail']

		var actual = appdata.initAppData(jsonData)

		fns.forEach(function (fName) {
			assert.equal(typeof actual[fName], 'function', 'Function: ' + fName)
		})
		for (var p in expected) assert.equal(actual[p], expected[p], 'property: ' + p)
		assert.equal(Object.keys(actual).length, Object.keys(expected).length + fns.length)
	},
	'GetAppData': function () {
		var aInit = []
		var eInit = [{appInfo: 5}]
		appshutdown.init = function mockInit(a) {aInit.push(a)}

		var actual = appdata.getAppData(eInit[0].appInfo)

		assert.equal(typeof actual, 'object')
		assert.deepEqual(aInit, eInit)
	},
	'GetLog': function () {
		var appData = appdata.getAppData()

		var actual = appData.getLog()

		assert.equal(typeof actual, 'function')
		assert.equal(actual.log, appData.log)
		assert.equal(actual.marker, '')

		var marker = 'MARKER'
		var log1 = 1
		var log2 = 2
		var aLog = []
		var eLog = [marker + ' ' + log1, log2]
		function myLog(s) {aLog.push(s)}
		var actual = appData.getLog(myLog, marker)

		assert.equal(typeof actual, 'function')
		assert.equal(actual.log, myLog)
		assert.equal(actual.marker, marker)

		actual(1)
		actual.log(2)

		assert.deepEqual(aLog, eLog)
	},
	'GetLaunchFolder': function () {
		var value = 5
		testconfig.getOverrideLaunchFolder = function mockOverride() {}

		var actual = appdata.getLaunchFolder()

		assert.equal(typeof actual, 'string')
		assert.ok(actual)

		testconfig.getOverrideLaunchFolder = function mockOverride() {return value}
		var actual = appdata.getLaunchFolder()

		assert.equal(actual, value)
	},
	'after': function () {
		appshutdown.init = ii
		testconfig.getOverrideLaunchFolder = of
	}
}

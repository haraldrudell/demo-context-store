// test-initapiwrapper.js
// Â© 2013 Harald Rudell <harald.rudell@therudells.com> (http://haraldrudell.com) MIT License

var initapiwrapper = require('../lib/initapiwrapper')

var apilist = require('../lib/apilist')
var rqsm = require('../lib/rqs')

// http://nodejs.org/api/events.html
var events = require('events')

// https://github.com/haraldrudell/mochawrapper
var assert = require('mochawrapper')

var aa = apilist.addApi
var gr = rqsm.getRqs

exports['InitApiWrapper:'] = {
	'Exports': function () {
		assert.exportsTest(initapiwrapper, 1)
	},
	'InitApi Opts Mixin': function () {
		var moduleName = 'MODULE'
		var api = 'APINAME'
		var jsonOpts = {json: 1}
		var invocationOps = {invocation: 1}

		var mixedOpts = {}
		for (var p in jsonOpts) mixedOpts[p] = jsonOpts[p]
		for (var p in invocationOps) mixedOpts[p] = invocationOps[p]
		var aInitApiOpts = []
		var eInitApiOpts = [mixedOpts]
		function mockInitApi(o) {aInitApiOpts.push(o)}

		var mockState = {
			exportsMap: {},
			apiConfigs: {},
		}
		var mockExports = {}
		mockState.exportsMap[moduleName] = mockExports
		mockState.apiConfigs[moduleName] = jsonOpts

		var mockRequireState = {apiObject: {theExports: mockExports}}

		// add the api to get an initApi Wrapper function
		var initApiWrapper = initapiwrapper.getWrapper(mockInitApi, mockState, mockRequireState)
		assert.equal(typeof initApiWrapper, 'function')
		mockExports.initApi = initApiWrapper

		initApiWrapper(invocationOps)

		assert.deepEqual(aInitApiOpts, eInitApiOpts)
	},
	'InitApi new': function () {
		var moduleName = 'MODULE'
		var api = 'APINAME'
		var jsonOpts = {json: 1}
		var invocationOps = {invocation: 1}
		var value = 3

		var mixedOpts = {}
		for (var p in jsonOpts) mixedOpts[p] = jsonOpts[p]
		for (var p in invocationOps) mixedOpts[p] = invocationOps[p]

		function Constructor(o, b) {
			assert.equal(this.constructor, Constructor)
			this.o = o
			this.b = b
		}

		var mockState = {
			exportsMap: {},
			apiConfigs: {},
		}
		var mockExports = {}
		mockState.exportsMap[moduleName] = mockExports
		mockState.apiConfigs[moduleName] = jsonOpts

		var mockRequireState = {apiObject: {theExports: mockExports}}

		// add the api to get an initApi Wrapper function
		var initApiWrapper = initapiwrapper.getWrapper(Constructor, mockState, mockRequireState)

		assert.equal(typeof initApiWrapper, 'function')
		assert.equal(initApiWrapper.prototype.constructor, Constructor)
		assert.equal(initApiWrapper.prototype.__proto__, Constructor.prototype.__proto__)

		mockExports.initApi = initApiWrapper

		var actual = new initApiWrapper(invocationOps, value)
//		assert.equal(actual.__proto__, Constructor.prototype)
debugger
		assert.ok(actual instanceof Constructor)
		assert.equal(actual.b, value)
		assert.deepEqual(actual.o, mixedOpts)
	},
	'Instance Ready Event': function () {
		var moduleName = 'MODULE'
		var api = 'APINAME'
		var jsonOpts = {instanceReady: 5000}

		var emitter = new events.EventEmitter
		function mockInitApi(o) {return emitter}

		var mockState = {
			exportsMap: {},
			apiConfigs: {},
		}
		var mockExports = {}
		mockState.exportsMap[moduleName] = mockExports
		mockState.apiConfigs[moduleName] = jsonOpts

		var mockRequireState = {apiObject: {api: api, theExports: mockExports}}

		var aRq = []
		var eRq = [[api, jsonOpts.instanceReady]]
		function mockAddRq(apiName, timeout) {
			aRq.push([apiName, timeout])
			return {clear: mockClear}
		}
		var aClear = 0
		function mockClear() {aClear++}
		rqsm.getRqs = function mockGetRqs() {return {addRq: mockAddRq}}

		// set the timer
		var initApiWrapper = initapiwrapper.getWrapper(mockInitApi, mockState, mockRequireState)
		mockExports.initApi = initApiWrapper
		var actual = initApiWrapper()

		assert.equal(actual, emitter)
		assert.equal(emitter.listeners('ready').length, 1)
		assert.deepEqual(aRq, eRq)
		assert.equal(aClear, 0)

		emitter.emit('ready')
		assert.ok(aClear)
	},
	'after': function () {
		apilist.addApi = aa
		rqsm.getRqs = gr
	}
}

// test-mapbyobject.js
// Â© 2013 Harald Rudell <harald.rudell@therudells.com> (http://haraldrudell.com) MIT License

var mapbyobject = require('../lib/mapbyobject')

// http://nodejs.org/api/events.html
var events = require('events')
// https://github.com/haraldrudell/mochawrapper
var assert = require('mochawrapper')

exports['MapByObject:'] = {
	'Exports': function () {
		assert.exportsTest(mapbyobject, 1)
	},
	'Constructor': function () {
		var expected = ['add', 'getByName', 'getByObject', 'reset']
		var actual = new mapbyobject.MapByObject

		expected.forEach(verifyFunction)
		matchExports(Object.keys(actual), expected)

		function verifyFunction(name) {
			assert.equal(typeof actual[name], 'function', name + ' not function')
		}
		function matchExports(actualNames, expectedNames) {
			var missing = []
			var actualMap = {}

			actualNames.forEach(addToMap)
			expectedNames.forEach(removeFromMap)
			var news = Object.keys(actualMap)
			if (missing.length || news.length) {
				assert.ok(false, 'Exports changed, new: ' + news + ' missing: ' + missing)
			}

			function addToMap(name) {
				actualMap[name] = true
			}
			function removeFromMap(name) {
				if (actualMap[name]) delete actualMap[name]
				else missing.push(name)
			}
		}
	},
	'Add GetByName GetByObject': function () {
		var map = new mapbyobject.MapByObject
		var o = [
			{o: {}, i: {}, n: 'ONE',},
			{o: {}, i: {}, n: 'TWO',},
		]

		o.forEach(addToMap)
		for (var index in o) {
			var obj = o[index]
			assert.equal(map.getByName(obj.n), obj.o)
			assert.equal(map.getByObject(obj.i), obj.o)
		}

		function addToMap(o) {
			map.add(o.o, o.i, o.n)
		}
	},
	'Add Duplicate Name Error': function () {
		var s = 'ABC'
		var map = new mapbyobject.MapByObject
		map.add({}, undefined, s)

		assert.throws(function () {
			map.add({}, undefined, s)
		}, /unique/)
	},
	'Add Duplicate Object Error': function () {
		var s = 'ABC'
		var o = {}
		var map = new mapbyobject.MapByObject
		map.add({}, o)

		assert.throws(function () {
			map.add({}, o)
		}, /indexObject/)
	},
	'Add Duplicate Object Error': function () {
		var s = 'ABC'
		var o = {}
		var map = new mapbyobject.MapByObject
		map.add({}, o)

		assert.throws(function () {
			map.add({}, o)
		}, /indexObject/)
	},
	'GetByName Not Found': function () {
		var map = new mapbyobject.MapByObject

		assert.equal(map.getByName('abc'), undefined)
	},
	'GetByObject Not Found': function () {
		var map = new mapbyobject.MapByObject

		assert.equal(map.getByObject({}), undefined)
	},
	'Reset': function () {
		var s = 'ABC'
		var map = new mapbyobject.MapByObject
		map.add({}, {}, s)

		assert.ok(map.getByName(s))

		map.reset()

		assert.equal(map.getByName(s), undefined)
	},
}

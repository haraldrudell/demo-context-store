// test-apilist.js
// Â© 2012 Harald Rudell <harald.rudell@therudells.com> (http://haraldrudell.com) MIT License

var apilist = require('../lib/apilist')

var apierror = require('../lib/apierror')
var apperror = require('../lib/apperror')
var apitouch = require('../lib/apitouch')
// http://nodejs.org/api/events.html
var events = require('events')
// http://nodejs.org/api/path.html
var path = require('path')

// https://github.com/haraldrudell/mochawrapper
var assert = require('mochawrapper')

var ta = apitouch.touchApis
var _rqs = apilist.testReset()

exports['ApiList:'] = {
	'Exports': function () {
		assert.exportsTest(apilist, 9)
	},
	'AddApi': function () {
		var emitter = new events.EventEmitter
		emitter.id = 'API'
		var mockRqs = {addRq: function () {}}
		apilist.testReset(mockRqs)
		var mockOpts = {initApi: function initApi() {}}

		var actual = apilist.addApi(emitter, mockOpts)

		assert.ok(actual)
		assert.equal(actual.api, emitter.id)
		assert.equal(actual.emitter, emitter)
	},
	'AddApi After EndApi Error': function () {
		var mockRqs = {addRq: function () {}}
		apilist.testReset(mockRqs)

		apitouch.touchApis = function (e, cb) {cb()}
		apilist.invokeEndApi(afterEndApi)

		function afterEndApi(err) {
			var actual = apilist.addApi()

			assert.equal(actual, 'addApi invoked after endApi')
		}
	},
	'AddApi Emitter Error': function () {
		var mockRqs = {addRq: function () {}}
		apilist.testReset(mockRqs)

		var actual = apilist.addApi()

		assert.equal(actual, 'Bad emitter')
	},
	'AddApi Emitter ID Error': function () {
		var mockRqs = {addRq: function () {}}
		apilist.testReset(mockRqs)
		var emitter = new events.EventEmitter

		var actual = apilist.addApi(emitter)

		assert.equal(actual, 'Emitter id property (api name) not string or blank')
	},
	'AddApi Duplicate Error': function () {
		var emitter = new events.EventEmitter
		emitter.id = 'API'
		var mockRqs = {addRq: function () {}}
		apilist.testReset(mockRqs)
		var mockOpts = {initApi: function initApi() {}}

		var expected1 = 'Duplicate api: ' + emitter.id

		apilist.addApi(emitter, mockOpts)
		var actual = apilist.addApi(emitter, mockOpts)

		assert.equal(actual, expected1)
	},
	'AddApi Singleton Ready': function () {
		var emitter = new events.EventEmitter
		emitter.id = 'API'
		var timeout = 5e3

		var aAddRq = []
		var eAddRq = [
			['API', 3000],
			['API', 5000],
		]
		var mockRqs = {addRq: function (api, timeout) {aAddRq.push([api, timeout])}}
		var mockOpts = {initApi: function initApi() {}, ready: false}

		apilist.testReset(mockRqs)
		var actual = apilist.addApi(emitter, mockOpts)
		assert.equal(emitter.listeners('ready').length, 0)

		apilist.testReset(mockRqs)
		mockOpts.ready = true
		var actual = apilist.addApi(emitter, mockOpts)
		assert.equal(emitter.listeners('ready').length, 1)


		apilist.testReset(mockRqs)
		emitter.removeAllListeners('ready')
		mockOpts.ready = timeout
		var actual = apilist.addApi(emitter, mockOpts)
		assert.equal(emitter.listeners('ready').length, 1)

		assert.deepEqual(aAddRq, eAddRq)
	},
	'AddApi Instance Ready': function () {
		var emitter = new events.EventEmitter
		emitter.id = 'API'
		var timeout = 5e3
		var defaultInstanceReady = 3e3
		var mockRqs = {addRq: function () {}}
		var mockOpts = {initApi: function initApi() {}}

		apilist.testReset(mockRqs)
		var actual = apilist.addApi(emitter, mockOpts)
		assert.equal(actual.instanceReady, defaultInstanceReady)

		apilist.testReset(mockRqs)
		mockOpts.instanceReady = false
		var actual = apilist.addApi(emitter, mockOpts)
		assert.equal(actual.instanceReady, false)

		apilist.testReset(mockRqs)
		mockOpts.instanceReady = timeout
		var actual = apilist.addApi(emitter, mockOpts)
		assert.equal(actual.instanceReady, timeout)
	},
	'AddApi SaveApi EndApi ApiState': function () {
		var emitter = new events.EventEmitter
		emitter.id = 'API'
		var mockRqs = {addRq: function () {}}
		var fns = {
			saveApi: function saveApi() {},
			endApi: function endApi() {},
			apiState: function apiState() {},
			initApi: function initApi() {},
		}

		apilist.testReset(mockRqs)
		var actual = apilist.addApi(emitter, fns)
		delete fns.initApi

		for (var fName in fns)
			assert.equal(actual[fName], fns[fName], 'function: ' + fName)
	},
	'AddApi FindFn Not Function Error': function () {
		var emitter = new events.EventEmitter
		emitter.id = 'API'
		var mockRqs = {addRq: function () {}}
		var mockOpts = {initApi: function initApi() {}, saveApi: 5}


		var expected1 = ' must be function'

		apilist.testReset(mockRqs)
		var actual = apilist.addApi(emitter, mockOpts)

		assert.ok(typeof actual, 'string')
		assert.equal(actual.slice(-expected1.length), expected1)
	},
	'ApisReady': function () {
		var emitter = new events.EventEmitter
		emitter.id = 'API'
		var mockRqs = {addRq: function () {return {clear: function () {}}}}
		apilist.testReset(mockRqs)
		var mockOpts = {initApi: function initApi() {}, ready: true}

		var aCbs = 0
		function cbFn() {aCbs++}

		apilist.apisReady(checkStartReady)

		function checkStartReady() {
			var actual = apilist.addApi(emitter, mockOpts)
			assert.equal(emitter.listeners('ready').length, 1)

			apilist.apisReady(cbFn)
			apilist.apisReady(cbFn)

			assert.equal(aCbs, 0)

			var readyListener = emitter.listeners('ready')[0]
			readyListener.apply(emitter)

			assert.equal(aCbs, 2)
		}
	},
	'EndApi IsEndApiFn': function () {
		apilist.testReset()

		assert.ok(!apilist.isEndApiFn())

		var aTouch = []
		var eTouch = ['saveApi', 'endApi']
		apitouch.touchApis = function (fName, cb) {aTouch.push(fName); cb()}

		apilist.invokeEndApi(afterEndApi)

		function afterEndApi(err) {
			if (err) assert.equal(err, null)
			assert.deepEqual(aTouch, eTouch)
			assert.equal(apilist.isEndApiFn(), true)
		}
	},
	'EndApi Repeated Error': function () {
		apilist.testReset()

		apitouch.touchApis = function (e, cb) {cb()}

		var aAno = 0
		var apiErrorEmitter = apierror.init()
		apperror.removeErrorListener(apiErrorEmitter)
		apiErrorEmitter.on('error', function () {aAno++})

		apilist.invokeEndApi(afterEndApi)

		function afterEndApi(err) {
			if (err) assert.equal(err, null)
			apilist.invokeEndApi(doubleEndApi)
		}

		function doubleEndApi(err) {
			assert.ok(err)
			assert.ok(aAno)
		}
	},
	'EndApi SaveApi Error': function () {
		apilist.testReset()
		apitouch.touchApis = function (e, cb) {if (e === 'saveApi') cb(new Error('x')); else cb()}
		var apiErrorEmitter = apierror.init()
		apperror.removeErrorListener(apiErrorEmitter)
		var aAno = 0
		apiErrorEmitter.on('error', function () {aAno++})
		apilist.invokeEndApi(afterEndApi)

		function afterEndApi(err) {
			assert.ok(err)
		}
	},
	'EndApi EndApi Error': function () {
		apilist.testReset()
		apitouch.touchApis = function (e, cb) {if (e === 'endApi') cb(new Error('x')); else cb()}
		var apiErrorEmitter = apierror.init()
		apperror.removeErrorListener(apiErrorEmitter)
		var aAno = 0
		apiErrorEmitter.on('error', function () {aAno++})
		apilist.invokeEndApi(afterEndApi)

		function afterEndApi(err) {
			assert.ok(err)
		}
	},
	'GetState': function () {
		var api = 'API'
		var emitter = new events.EventEmitter
		emitter.id = api
		var expected = {}
		expected[api] = {api: api, emitter: emitter, theExports: undefined, isReady: true, instanceReady: false, initApiName: 'initApi'}
		var mockOpts = {initApi: function initApi() {}, instanceReady: false}

		apilist.testReset()
		apilist.addApi(emitter, mockOpts)

		var actual = apilist.getState()
		expected[api].updatePrototype = actual[api].updatePrototype

		assert.deepEqual(actual, expected)
	},
	'GetApiStates': function () {
		var emitter = new events.EventEmitter
		emitter.id = 'API'
		var value = 5
		var expected = {}
		expected[emitter.id] = value
		var mockOpts = {initApi: function initApi() {}, instanceReady: false, apiState: mockApiState}

		function mockApiState() {return value}

		apilist.testReset()
		apilist.addApi(emitter, mockOpts)

		var actual = apilist.getApiStates()

		assert.deepEqual(actual, expected)
	},
	'Singleton Ready Event': function () {

		// reset and install our own error listener
		var apiErrorEmitter = apierror.init()
		apperror.removeErrorListener(apiErrorEmitter)
		var apilistErrors = 0
		var errFunc = function () {apilistErrors++}
		apiErrorEmitter.on('error', errFunc)
		var mockOpts = {initApi: function initApi() {}, instanceReady: false, ready: true}

		// get onReady
		var onReady
		var api = 'API'
		var emitter = new events.EventEmitter
		emitter.id = api
		apilist.testReset({addRq: function () {return {clear: function () {}}}})
		var actual = apilist.addApi(emitter, mockOpts)

		assert.ok(typeof actual !== 'string') // make sure registration successful
		onReady = emitter.listeners('ready')[0]
		assert.equal(typeof onReady, 'function')

		// onReady from non-emitter
		onReady()
		assert.ok(apilistErrors)

		// onReady from emitter without id
		apilistErrors = 0
		var anEmitter = new events.EventEmitter
		anEmitter.once('ready', onReady)
		anEmitter.emit('ready')

		assert.ok(apilistErrors)

		// onReady from unknown api
		apilistErrors = 0
		var anEmitter = new events.EventEmitter
		anEmitter.id = 'XYZ'
		anEmitter.once('ready', onReady)
		anEmitter.emit('ready')

		assert.ok(apilistErrors)

		// onReady with error
		assert.equal(emitter.isReady, undefined)
		apilistErrors = 0
		var e = new Error('x')
		emitter.once('ready', onReady)
		emitter.emit('ready', e)

		assert.ok(apilistErrors)
		assert.equal(actual.isReady, e)

		// duplicate onReady
		apilistErrors = 0
		emitter.once('ready', onReady)
		emitter.emit('ready')

		assert.ok(apilistErrors)

		// good onReady
		apilistErrors = 0
		delete actual.isReady
		emitter.once('ready', onReady)
		emitter.emit('ready')

		assert.equal(apilistErrors, 0)
		assert.ok(actual.isReady)
	},
	'GetInitApiName TODO': function () {
	},
	'after': function () {
		apitouch.touchApis = ta
		apilist.testReset(_rqs)
		apierror.init()
	}
}

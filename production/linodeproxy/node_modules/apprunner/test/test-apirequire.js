// test-apirequire.js
// Copyright Â© 2013 Harald Rudell <harald.rudell@therudells.com> (http://haraldrudell.com) MIT License

var apirequire = require('../lib/apirequire')

var apierror = require('../lib/apierror')

// https://github.com/haraldrudell/mochawrapper
var assert = require('mochawrapper')

var ee = apierror.emitError

exports['ApiRequire:'] = {
	'Exports': function () {
		assert.exportsTest(apirequire, 1)
	},
	'TestMap': function () {
		var moduleName = 'MODULENAME'
		var expected = 5

		var mockState = {testMap: {}, exportsMap: {}, apiConfigs: {}}
		mockState.testMap[moduleName] = expected
		var apiRequire = apirequire.getApiRequire(mockState)

		var actual = apiRequire(moduleName)

		assert.equal(actual, expected)
	},
	'Folder Override': function () {
		var moduleName = 'MODULENAME'
		var folder = 'FOLDER'
		var expected = 5

		var mockState = {
			deployFolder: 'DEPLOYFOLDER',
			exportsMap: {},
			apiConfigs: {},
		}
		mockState.apiConfigs[moduleName] = {folder: folder}

		function mockRequire(m) {
			if (m === [mockState.deployFolder, folder, moduleName].join('/')) return expected
			else throw new Error(arguments.callee.name)
		}
		var apiRequire = apirequire.getApiRequire(mockState, mockRequire)

		var actual = apiRequire(moduleName)

		assert.equal(actual, expected)
	},
	'File Override and SubPath': function () {
		var moduleName = 'MODULENAME'
		var file = 'FILE'
		var expected = 5
		var subPath = 'x'

		var mockState = {
			exportsMap: {},
			apiConfigs: {},
		}
		mockState.apiConfigs[moduleName] = {file: file, subPath: subPath}

		var theModule = {}
		theModule[subPath] = expected
		function mockRequire(m) {
			if (m === file) return theModule
			else throw new Error(arguments.callee.name)
		}

		var apiRequire = apirequire.getApiRequire(mockState, mockRequire)

		var actual = apiRequire(moduleName)

		assert.equal(actual, expected)
	},
	'File Override Error': function () {
		var moduleName = 'MODULENAME'
		var file = 'FILE'

		var mockState = {
			exportsMap: {},
			apiConfigs: {},
		}
		mockState.apiConfigs[moduleName] = {file: file}

		function mockRequire(m) {
			var err = new Error(arguments.callee.name + ': ' + m)
			err.code = 'MODULE_NOT_FOUND'
			throw err
		}

		var aEmit = []
		apierror.emitError = function (e1, e2) {aEmit.push([e1, e2])}
		var apiRequire = apirequire.getApiRequire(mockState, mockRequire)

		assert.throws(function () {
			apiRequire(moduleName)
		},/mockRequire/)
		assert.ok(aEmit.length)
	},
	'Passthrough': function () {
		var moduleName = 'MODULENAME'
		var expected = 5

		var mockState = {
			exportsMap: {},
			apiConfigs: {},
		}
		function mockRequire(m) {
			if (m === moduleName) return expected
			else throw new Error(arguments.callee.name)
		}
		var apiRequire = apirequire.getApiRequire(mockState, mockRequire)

		var actual = apiRequire(moduleName)

		assert.equal(actual, expected)
	},
	'ApiPath Folder': function () {
		var moduleName = 'MODULENAME'
		var folder = 'FOLDER'
		var expected = 5

		var mockState = {
			deployFolder: 'DEPLOYFOLDER',
			apiPath: [{folder: folder}],
			exportsMap: {},
			apiConfigs: {},
		}

		function mockRequire(m) {
			if (m === [mockState.deployFolder, folder, moduleName].join('/')) return expected
			else {
				var err = new Error(arguments.callee.name + ': ' + m)
				err.code = 'MODULE_NOT_FOUND'
				throw err
			}
		}
		var apiRequire = apirequire.getApiRequire(mockState, mockRequire)

		var actual = apiRequire(moduleName)

		assert.equal(actual, expected)
	},
	'ApiPath File': function () {
		var moduleName = 'MODULENAME'
		var file = 'FILE'
		var expected = 5

		var mockState = {
			apiPath: [{file: file}],
			exportsMap: {},
			apiConfigs: {},
		}

		var theModule = {}
		theModule[moduleName] = expected
		function mockRequire(m) {
			if (m === file) return theModule
			else {
				var err = new Error(arguments.callee.name + ': ' + m)
				err.code = 'MODULE_NOT_FOUND'
				throw err
			}
		}
		var apiRequire = apirequire.getApiRequire(mockState, mockRequire)

		var actual = apiRequire(moduleName)

		assert.equal(actual, expected)
	},
	'ApiPath File SubPath false': function () {
		var moduleName = 'MODULENAME'
		var file = 'FILE'
		var expected = 5

		var mockState = {
			apiPath: [{file: file, subPath: false}],
			exportsMap: {},
			apiConfigs: {},
		}

		function mockRequire(m) {
			if (m === file) return expected
			else {
				var err = new Error(arguments.callee.name + ': ' + m)
				err.code = 'MODULE_NOT_FOUND'
				throw err
			}
		}
		var apiRequire = apirequire.getApiRequire(mockState, mockRequire)

		var actual = apiRequire(moduleName)

		assert.equal(actual, expected)
	},
	'ApiPath Failed to Load Error': function () {
		var moduleName = 'MODULENAME'
		var file = 'FILE'
		var expected = 5

		var mockState = {
			apiPath: [{file: file}],
			exportsMap: {},
			apiConfigs: {},
		}

		function mockRequire(m) {
			var err = new Error(arguments.callee.name + ': ' + m)
			err.code = 'MODULE_NOT_FOUND'
			throw err
		}
		apierror.emitError = function () {}
		var apiRequire = apirequire.getApiRequire(mockState, mockRequire)

		assert.throws(function () {
			apiRequire(moduleName)
		},/Module in api.path/)
	},
	'after': function () {
		apierror.emitError = ee
	}
}

// topapprunner.js
// Ensure that there is only one apprunner location in this app
// Â© 2013 Harald Rudell <harald.rudell@therudells.com> (http://haraldrudell.com) MIT License

var appdata = require('./appdata')
// http://nodejs.org/api/path.html
var path = require('path')
// http://nodejs.org/api/fs.html
var fs = require('fs')

exports.getOtherAppRunner = getOtherAppRunner

/*
issue: apprunner may be required from a sub-module that has an apprunner available lower than top level.
This is a problem because running duplicate apprunner modules means they are not sharing state.
Therefore, figure out here if this source file comes from the app's top level apprunner module.
If it does not, return the top level exports object
*/
function getOtherAppRunner() {
	var result
	var launchFolder = appdata.getLaunchFolder()
	var packageJson = path.join(launchFolder, 'package.json')
	var topLevelApprunner = path.join(launchFolder, 'node_modules', 'apprunner')
	var myApprunner = path.join(__dirname, '..')

	if (process.apprunner) { // apprunner already initialized from another folder: crap!
		var otherFolder = process.apprunner.dirname
		if (typeof otherFolder === 'string') {
			var otherParent = path.join(otherFolder, '..') // this should be the app's top node_modules folder
			if (otherParent && otherParent === myApprunner.substring(0, otherParent.length)) {
				// it's in a node_module above us: we can safely use that
				result = require(otherFolder)
			}
		}
		if (!result) throw new Error('Multiple apprunner: second: ' + myApprunner + ' first: ' + process.apprunner.dirname)
	} else process.apprunner = {dirname: myApprunner}

	if (!result) {
		/*
		if we are not testing the apprunner package
		and we are not the top level apprunner
		delegate to the top level apprunner
		*/
		var package = {name: 'apprunner'}
		try {
			package = require(packageJson)
		} catch (e) {
			if (e.code !== 'MODULE_NOT_FOUND' ||
				!~e.message.indexOf(packageJson)) throw e
		}
		if (package.name !== 'apprunner')
			if (fs.existsSync(topLevelApprunner)) {
				if (myApprunner !== topLevelApprunner) result = require(topLevelApprunner)
			} else throw new Error('app does not have apprunner in dependencies')
	}

	return result
}

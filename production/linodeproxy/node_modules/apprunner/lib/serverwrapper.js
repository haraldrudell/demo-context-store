// serverwrapper.js
// Allow registration of handlers prior to server start
// Â© 2013 Harald Rudell <harald.rudell@therudells.com> (http://haraldrudell.com) MIT License

var emitter
var routesToBeRegistered = []
var serverRegisterFns = []

;[
addUriHandler, registerHandler, setEmitter, testReset
].forEach(function (f) {exports[f.name] = f})

/*
Register a request handler funtion for a uri with all servers
uri: string eg. '/page'
handlerFn(req, res, next): function
*/
function registerHandler(uri, handlerFn) {
	var err

	if (typeof uri === 'string' && uri) {
		if (typeof handlerFn === 'function') {
			if (serverRegisterFns.length)
				serverRegisterFns.forEach(registerWithServer)
			else routesToBeRegistered.push({uri: uri, fn: handlerFn})
		} else err = new Error('RegisterHandler argument 2 not function')
	} else err = new Error('Bad registerHandler uri: ' + uri)

	if (err)
		if (emitter) emitter.emit('error', err)
		else throw err

	function registerWithServer(serverRegisterFn) {
		serverRegisterFn(uri, handlerFn)
	}
}

/*
Register a server that handles uris
serverRegisterFn(uri, handlerFn): function
*/
function addUriHandler(serverRegisterFn) {
	if (typeof serverRegisterFn === 'function') {
		serverRegisterFns.push(serverRegisterFn)
		if (routesToBeRegistered.length) {
			var rh = routesToBeRegistered
			routesToBeRegistered = []
			rh.forEach(registerRoute)
		}
	}

	function registerRoute(routeObject) {
		serverRegisterFn(routeObject.uri, routeObject.fn)
	}
}

function setEmitter(em) {
	var result = emitter
	if (em !== undefined) emitter = em
	return result
}

function testReset() {
	routesToBeRegistered = []
	serverRegisterFns = []
}

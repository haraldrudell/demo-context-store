// testconfig.js
// Load config json from the test folder so that apis can be loaded during testing
// Â© 2013 Harald Rudell <harald.rudell@therudells.com> (http://haraldrudell.com) MIT License

/*
When we are testing with Mocha:
- the app's launch folder is not known
-- the main file is in the mocha module
-- the test file is not in the launch folder

This module provides test apprunner configuration so that apis can be used while testing
This module also provides means for determining launch folder, that may otherwise not be possible
*/

// http://nodejs.org/api/path.html
var path = require('path')

exports.getTestConfig = getTestConfig
exports.getOverrideLaunchFolder = getOverrideLaunchFolder

var overrideLaunchFolder

/*
Read json configuration to be used for testing
dirname: string: absolute path, __dirname, for a test file, assumed to be in the test folder of the app's base folder
noLaunchFolderOverride: boolean default false: do not have apprunner modify its launch folder
return value: api config json
*/
function getTestConfig(dirname, noLaunchFolderOverride) {
	var testApiSetup

	if (typeof dirname === 'string' && dirname) {
		if (noLaunchFolderOverride !== false) overrideLaunchFolder = path.join(dirname, '..')

		// try to load the file with test configuration from the project's test folder
		var absPathTestApiSetup = path.join(dirname, 'testapisetup.json')
		try {
			testApiSetup = require(absPathTestApiSetup)
		} catch (e) {
			if (e.code !== 'MODULE_NOT_FOUND') throw e
		}

		// use the api cofiguration found, most importantly path
		var getRequireInitOpts = {}
		for (var p in testApiSetup) if (p !== 'api') getRequireInitOpts[p] = testApiSetup[p]
		if (testApiSetup) getRequireInitOpts.apiOpts = testApiSetup.api // rename api to apiOpts
		if (!getRequireInitOpts.appData) getRequireInitOpts.appData = {} // avoid init-check
		getRequireInitOpts.appData.launchFolder = path.join(dirname, '..')
	} else throw new Error(arguments.callee.name + ' needs __dirname variable with project\'s test folder')

	return getRequireInitOpts
}

function getOverrideLaunchFolder() {
	return overrideLaunchFolder
}

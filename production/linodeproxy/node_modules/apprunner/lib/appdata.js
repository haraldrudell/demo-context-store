// appdata.js
// Provide a data collection on the running app
// Â© 2013 Harald Rudell <harald.rudell@therudells.com> (http://haraldrudell.com) MIT License

var emailer = require('./emailer')
var anomaly = require('./anomaly')
var appshutdown = require('./appshutdown')
var serverwrapper = require('./serverwrapper')
// https://github.com/haraldrudell/haraldutil
var haraldutil = require('haraldutil')
// http://nodejs.org/api/path.html
var path = require('path')
// http://nodejs.org/api/util.html
var util = require('util')

var appData = {
	appName: '?', // app name eg. 'Node.js #3'
	appId: '?', //machine-friendly app identifier, eg. 'nodejs3'
	launchFolder: '?', // fully qualified path to the initially launched script
	log: console.log, // default log function
	sendMail: emailer.send, // function(subject, body, cb) sending ops email
	// views
	// defaultsFile
	registerHandler: serverwrapper.registerHandler, // function for registering uris
	anomaly: anomaly.anomaly,
	getLog: getLog,
}

;[
initAppData, getAppData, getLaunchFolder,
].forEach(function (f) {exports[f.name] = f})

function initAppData(jsonData) {
	appData.appName = jsonData.haraldopsAppName || '?'
	appData.appId = jsonData.haraldopsidentifier || 'x'
 	appData.launchFolder = jsonData.haraldopsAppFolder || getLaunchFolder()
	appData.log = jsonData.log
	appData.views = jsonData.haraldopsViews || {}
	if (jsonData.haraldopsDefaultsFile) appData.defaultsFile = jsonData.haraldopsDefaultsFile

	return appData
}

function getAppData(appInfo) {
	if (appInfo) appshutdown.init({appInfo: appInfo})
	return haraldutil.merge(appData)
}

/*
Get a log function that prepends marker
logFn: optional function default appData.log, log function with util.format capability
marker: string: what is prepended to each log invocation

return value: function with properties
.log: the underlying log function
.marker: the marker string
*/
function getLog(logFn, marker) {
	var result = pLog
	result.log = logFn = logFn || appData.log
	result.marker = marker || ''

	return result

	function pLog() {
		var s = util.format.apply(this, Array.prototype.slice.call(arguments))
		if (marker) s = marker + ' ' + s
		logFn(s)
	}
}

/*
Find the app's launch folder

possible sources:
1. require.main.filename
1a. One level above if foldername is 'test'
1b. For npm test: above the first occurence of '/node_modules' (does not work for symlinked modules)
3. this file's __dirname
4. current working directory
return value: string absolute path to folder where the initially launched script is located

Situations:
a. npm test:
a1. require.main.filename: (launch)/node_modules/mochawrapper/node_modules/mocha2/bin/_mocha

b. symlinked folder: apprunner, launch folder
*/
function getLaunchFolder() {
	var result

	var test = require('./testconfig').getOverrideLaunchFolder()
	if (test) result = test
	else {

		var requireMainFilename = require && require.main && require.main.filename
		if (requireMainFilename) result = path.dirname(requireMainFilename)
		else if (__dirname) {
			var myFolderName = path.basename(__dirname)
			if (myFolderName === 'test') result = path.join(__dirname, '..')
			else {
				var firstNodeModules = __dirname.indexOf('/node_modules/')
				if (~firstNodeModules) result = __dirname.substring(0, firstNodeModules)
			}
		}
		if (!result) result = process.cwd()
	}

	return result
}

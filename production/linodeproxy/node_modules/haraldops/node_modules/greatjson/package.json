{
  "name": "greatjson",
  "description": "JSON.parse replacement with clearer Syntax messages providing location, expected tokens and offending text. Errors are returned, not thrown. By Harald Rudell",
  "author": {
    "name": "Harald Rudell",
    "email": "harald@allgoodapps.com",
    "url": "http://www.haraldrudell.com"
  },
  "keywords": [
    "json",
    "parser",
    "json-js",
    "rfc4627",
    "json-sans-eval"
  ],
  "homepage": "https://github.com/haraldrudell/greatjson",
  "version": "0.0.8",
  "contributors": [
    {
      "name": "Harald Rudell",
      "email": "harald@allgoodapps.com",
      "url": "http://www.haraldrudell.com"
    }
  ],
  "dependencies": {
    "haraldutil": "*"
  },
  "devDependencies": {
    "mochawrapper": ""
  },
  "repository": {
    "type": "git",
    "url": "https://haraldrudell@github.com/haraldrudell/greatjson.git"
  },
  "main": "lib/greatjson",
  "scripts": {
    "test": "mocha --ui exports --reporter spec",
    "monitor": "mocha --ui exports --reporter min --watch",
    "debugtest": "mocha --debug-brk --ui exports --reporter spec",
    "coverage": "mochacoverage"
  },
  "readme": "# Great Json\n\nThe **greatjson** module is a **JSON.parse** replacement providing clearer syntax messages with line and column numbers, expected tokens and offending text. In addition, errors are returned instead of thrown.\n\n## Get It Now\n\n* [GreatJson](https://github.com/haraldrudell/greatjson) is on github\n\n# Usage\n\nExample of parsing with greatjson:\n\n```js\nvar greatjson = require('greatjson')\nvar result, error\n\n// example how to use successfully\nif (!((result = greatjson.parse('17')) instanceof Error))\n\t// It works! I got: 17\n\tconsole.log('It works! I got:', result)\n\n// example of parse failure\nif (!((error = greatjson.parse('qwerty')) instanceof Error)) ;\nelse\n\t// SyntaxError: Unexpected token: expected json value, text:'qwerty' at line:1 column:1 position: 0 (0%)\n\tconsole.log(error.toString())\n\n// example of missing comma\nif (!((error = greatjson.parse('{\"a\":5\"b\":6}')) instanceof Error)) ;\nelse {\n\t// SyntaxError: Bad token: expected object comma, text:'\"b\":6.' at line:1 column:7 position: 6 (50%)\n\tconsole.log(error.toString())\n\n\t// printout of custom error properties\n\tvar s = []\n\tfor (var p in error) s.push(p + ':' + error[p])\n\t// Error properties: position:6 line:1 column:7 text:\"b\":6.\n\tconsole.log('Error properties:', s.join(' '))\n}\n```\n\n# Notes\n\n(c) [Harald Rudell](http://www.haraldrudell.com) wrote this for the love of node in August, 2012\n\nGreat Json is based on work by\n\n* [Mike Samuel](http://json-sans-eval.googlecode.com/)\n* [Douglas Crockford](https://github.com/douglascrockford/JSON-js)\n\n[JavaScript Object Notation](http://json.org/) or json is a language-independent text format.\n\n[rfc4627](http://www.ietf.org/rfc/rfc4627): the application/json media type.\n\n[JSON.parse](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=215) in secion 15.12.2 of JavaScript.\n\nNo warranty expressed or implied. Use at your own risk.\n\nPlease suggest better ways, new features, and possible difficulties on [github](https://github.com/haraldrudell/greatjson)",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/haraldrudell/greatjson/issues"
  },
  "_id": "greatjson@0.0.8",
  "_from": "greatjson@>= 0.0.8"
}

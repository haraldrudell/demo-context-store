{
  "name": "haraldutil",
  "description": "App utility functions by Harald Rudell",
  "author": {
    "name": "Harald Rudell",
    "email": "harald@allgoodapps.com",
    "url": "http://www.haraldrudell.com"
  },
  "version": "0.1.18",
  "keywords": [
    "timestamp",
    "error",
    "inspect",
    "file",
    "stack",
    "date",
    "number",
    "trace",
    "stacktrace",
    "util",
    "utility",
    "type"
  ],
  "contributors": [
    {
      "name": "Harald Rudell",
      "email": "harald@allgoodapps.com",
      "url": "http://www.haraldrudell.com"
    }
  ],
  "devDependencies": {
    "grunt-contrib-watch": ">= 0.1.4",
    "grunts": ">= 0.0.1",
    "grunt": ">= 0.4.0rc7",
    "mochawrapper": ">= 0.0.34"
  },
  "dependencies": {},
  "repository": {
    "type": "git",
    "url": "https://github.com/haraldrudell/haraldutil.git"
  },
  "scripts": {
    "test": "mocha --ui exports --reporter spec",
    "monitor": "mocha --ui exports --reporter min --watch",
    "debugtest": "mocha --debug-brk --ui exports --reporter spec",
    "coverage": "mochacoverage",
    "changelog": "git log --format=\"%ad %s\" --date=short >ChangeLog; ls -l ChangeLog"
  },
  "main": "./lib/haraldutil",
  "readme": "<h1>haraldutil</h1>\n<p>Utility functions for handling data types, errors, and unknown JavaScript values.</p>\n\n<h2>Benefits</h2>\n<ol>\n<li><strong>Save time and code</strong> by using well tested, commonly sought functions</li>\n<li><strong>Immediately</strong> find printout statements by having file and function names available</li>\n<li>Examine <strong>exact type</strong> of values with hidden properties and full prototype chains</li>\n<li><strong>Separate logging</strong> by multiple instances by preceding with process id or host name</li>\n<li>Enhanced <strong>app portability</strong> across Linux, Mac and Windows</li>\n</ol>\n<p>&copy; 2011, 2013 <a href=http://www.haraldrudell.com><strong>Harald Rudell</strong></a> wrote haraldutil for node in October, 2011</p>\n\n<h2>Features</h2>\n<ol>\n<li>Conversion of any value to printable string representation</li>\n<li>Object manipulation methods</li>\n<li>Portable path, number and browser-launch functions</li>\n<li>Error and stack trace parsers and string conversions</li>\n<li>JavaScript time value, Unix timestamp and timezone functions</li>\n</ol>\n\n<h1>Reference</h1>\n<h2>p(...), ps()</h2>\n<p>Console.log equivalent with added leading code location\n```js\nvar p = require('haraldutil').p\n\np('Printouts start with code location: file:line:function')\np('In an anonymous function, the function name is omitted')\nsomeFunction()\n\nfunction someFunction() {\n  p('Value examples:', undefined, '1',\n    new function Class() {this.a = 1},\n    JSON.stringify, new Error('a'))\n}\n```\n```\nexamples:15 Printouts start with code location: file:line:function\nexamples:16 In an anonymous function like here, the function name is omitted\nexamples:20:someFunction Leading string does format [object Object] NaN {\"a\":1}\nexamples:21:someFunction undefined '1' { a: 1 } [Function: stringify] [Error: a]\n```\n</p>\n<ul>\n<li>return value: the string</li>\n<li>ps is like p, but omits the console.log</li>\n</ul>\n<p>\n```js\nconsole.log('ps is p without logging, it can output location:', ps())\n```\n```\nps is p without logging, it can output location: examples:28\n```\n</p>\n\n\n<h2>pargs(arguments)</h2>\nPrints haraldutil.inspect of the argument list for a function\n```js\nvar haraldutil = require('haraldutil')\nvar pargs = haraldutil.pargs\n\nsomeFunction(undefined, '1', new function Class() {this.a = 1}, JSON.stringify, new Error('a'))\n\nfunction someFunction() {\n  pargs(arguments)\n}\n```\n```\nexamples:38:someFunction undefined, '1', object:Class {a: 1}, function stringify(), Error: a\n```\n\n\n<h2>pPrepend(str)</h2>\npPrepend adds a lead-in to functions p, ps, pargs, q, qs, pp and pps\n```js\nvar haraldutil = require('haraldutil')\nvar p = haraldutil.p\nvar pPrepend = haraldutil.pPrepend\n\npPrepend(process.pid)\np('Launching of new process')\n\npPrepend(require('os').hostname() + ':' + process.pid)\np('Launching on new host')\n```\n```\n19854:examples:51 'Launching of new process'\nsomehostname:19854:examples:54 'Launching on new host'\n```\n* pPrepend(): removes the current prepend value\n* pPrepend(null): gets the current prepend value\n\n\n\n<h2>q(...), qs(...)</h2>\nq and qs does a more detailed haraldutil.inspect.\n```js\nvar q = require('haraldutil').q\n\nsomeFunction()\n\nfunction someFunction() {\n  q('q and qs are like p and ps but does haraldutil.inspect rather then util.format')\n  q(undefined, '1', new function Class() {this.a = 1}, JSON.stringify, new Error('a'))\n}\n```\n```\nexamples:61:someFunction 'q and qs are like p and ps but does haraldutil.inspect rather then util.format'\nexamples:62:someFunction undefined '1' object:Class {a: 1} function stringify() Error: a\n```\n\n<h2>pp(...), pps(...)</h2>\nPrintout with code location and exhaustive inspect of values.\n```js\nvar pp = require('haraldutil').pp\n\nsomeFunction()\n\nfunction someFunction() {\n  pp(console)\n}\n```\n```\nexamples:17:someFunction {\n  info: function (),\n  log: recursive-object#2,\n  error: function (),\n  time: function (label),\n  warn: recursive-object#3,\n  dir: function (object),\n  trace: function (label),\n  assert: function (expression),\n  timeEnd: function (label)\n}\n```\n* return value: the string\n* pps is like pp, but omits the console.log\n\n\n\n<h2>inspectDeep(v)</h2>\nProvides prototype chains, and unlimited strings. Abbreviates array-type properties at 10 elements.\n\n```js\nvar haraldutil = require('haraldutil')\nconsole.log(haraldutil.inspectDeep(console))\n```\n```\n{\n  info:function (),\n  log:recursive-object#2,\n  error:function (),\n  time:function (label),\n  warn:recursive-object#3,\n  dir:function (object),\n  trace:function (label),\n  assert:function (expression),\n  timeEnd:function (label)\n}\n```\n\n\n<h2>inspect(v, optsArg)</h2>\nPrints any value in a way that conveys both value and type. The value is articulate and will not contain unprintable characters.\n\n```js\nvar haraldutil = require('haraldutil')\nvar a = 'abcdefghijklm'.split('')\nconsole.log(haraldutil.inspect(a))\n```\n```\n13:['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', ..., 'm']\n```\nBy default, the following steps shorten the printout\n* Strings are shortened at 80 characters\n* Non-enumerable properties or prototype chains are not printed\n* Array-like properties are abbrevieted at 10 elements\n* Max 2 levels of object properties are printed\n\noptsArg\n* maxString: optional number, default 80\n* maxProperties: optional number, default 10\n* maxLevels: optional number, default 2\n* nonEnum: optional boolean, default false\n* noArrayLength: optional boolean, default true: do not print array length\n\n\n<h2>inspectAll(v)</h2>\nprovide unique all-encompassing string describing value and type.\n\n<h2>clone(o1)</h2>\n<p>Clone an object and its enumerable properties</p>\n<ul><li>o: value of array, object and primitive properties</li></ol>\n\n<p>Array, Date and RegExp instances are cloned.\nother objects becomes Object objects, ie. Function, Error etc.\nnon-enumerable properties, getters and setters are not copied\n</p>\n\n\n<h2>merge(o1, o2, ...)</h2>\nCreate an object constructed using the enumerable properties of all provided arguments.\n\n```js\nvar haraldutil = require('haraldutil')\nconsole.log(haraldutil.merge({a: 1}, {a: 2, b: 2}, {c: 3}))\n```\n```\n{ a: 2, b: 2, c: 3 }\n```\n* same name properties from later objects overwrite\n* return value: Object object with only enumerable properties\n\n\n\n<h2>shallowClone(object)</h2>\nCreate a shallow copy of an object\n```js\nvar haraldutil = require('haraldutil')\nconsole.log('Any value works:', haraldutil.shallowClone(undefined))\nvar o = {a: 'unchanged'}\nvar o1 = haraldutil.shallowClone(o)\no1.a = 'changed'\nconsole.log('o:', o)\n```\n```\nAny value works: {}\no: { a: 'unchanged' }\n```\n\n\n\n<h2>browseTo(url)</h2>\nOpens the system default browser, or a new tab in the active browser window, displaying the location url.\n```js\nrequire('haraldutil').browseTo('http://google.com').on('exit', function (code) {\n\tif (code) console.log('Failed with exit code:' + code)\n})\n```\n\n<h2>getType(path1)</h2>\nDetermine what path1 is, an improved to fs.exists function.\n```js\nvar haraldutil = require('haraldutil')\nconsole.log('Type:', haraldutil.getType('/home'))\n```\n```\nType: 1\n```\nreturn value:\n\n* undefined: path1 does not exist\n* 1: path1 is a directory\n* true: path1 is a file\n\n\n<h2>getHomeFolder()</h2>\nGet the path to the user's home folder\n```js\nvar haraldutil = require('haraldutil')\nconsole.log('Home folder:', haraldutil.getHomeFolder())\n```\n```\nHome folder: /home/foxyboy\n```\n\n\n<h2>getTmpFolder()</h2>\nGet path to a folder for temporary files\n```js\nvar haraldutil = require('haraldutil')\nconsole.log('Tmp folder:', haraldutil.getTmpFolder())\n```\n```\nTmp folder: /home/foxyboy/tmp\n```\nif the user's home folder has a tmp, this is used. Otherwise, the systems temporary files folder is provided.\n\n\n<h2>parseTrace(e)</h2>\nIf e is an Error object that has a stack trace, the parsed stack trace is returned as an object. Otherwise undefined is returned.\n```js\nvar haraldutil = require('haraldutil')\nvar s = haraldutil.parseTrace(new Error)\nif (s) console.log(s.frames[0])\n```\n```\n{ text: 'parseTrace (/home/foxyboy/Desktop/c505/node/haraldutil/test/examples/examples.js:40:31)',\n  folder: '/home/foxyboy/Desktop/c505/node/haraldutil/test/examples',\n  file: 'examples.js',\n  line: 40,\n  column: 31,\n  func: 'parseTrace' }\n```\nreturn value: object or undefined\n* .message: string: the leading error message\n* .frames: array of object: captured stack traces\n\nEach frame in the frames array\n* .func: optional string: Object.function expression in the code\n* .as: optional string: function name if different from property name\n* .folder: optional string: if a folder other than current directory, then the absolute path to folder where source file is located, '/home/user'\n* .file: optional string: source file name, 'script.js'\n* .line: optional number: 10\n* .column optional number: 5\n* .source: optional string: text that may appear instead of file and folder, eg. 'unknown source'\n* .text: string: this frame as text. contains no newlines and has the leading at removed\n\n<h2>eToString(err, trace)</h2>\nmake an Error object printable\n```js\nvar haraldutil = require('haraldutil')\ntry {\n\tJSON.parse('que')\n} catch (e) {\n\tconsole.log(haraldutil.eToString(e))\n}\n```\nNote the type property that JSON.parse adds to the Error object:\n```\nSyntaxError: Unexpected token q\n    at Object.parse (native)\n    at eToString (/home/foxyboy/Desktop/c505/node/haraldutil/test/examples/examples.js:52:7)\n    at demonstrate (/home/foxyboy/Desktop/c505/node/haraldutil/test/examples/examples.js:70:2)\n    at /home/foxyboy/Desktop/c505/node/haraldutil/test/examples/examples.js:61:2\n    at Array.forEach (native)\n    at Object.<anonymous> (/home/foxyboy/Desktop/c505/node/haraldutil/test/examples/examples.js:60:7)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\ntype: 'unexpected_token'\n```\n* e: Error object\n* trace: optional boolean: false: do not include the stack trace\n* return value: printable string\n\n\n\n<h2>getLocation(opts)</h2>\nGets the current script executing location as a string.\n```js\nvar haraldutil = require('haraldutil')\nconsole.log(haraldutil.getLocation())\n```\n```\nfunction: demonstrate file: examples.js:61:2 folder: /home/foxyboy/Desktop/c505/node/haraldutil/test/examples\n```\n* opts: optional object\n* .offset: offset in the stack for lcoation\n* .err: optional Error object\n* .object: optional boolean: false: do not prepend object and * method, eg. Module.load\n* .folder: optional boolean: false: do not include file folder\n* .fileline: true: no column, no fileheader\n* .dropExt: remove extention from filename\n* .addAfterFile: string\n\nreturn value: printable string\n* empty string on troubles\n\n\n\n<h2>getLoc(s)</h2>\nGets location as file:line\n```js\n// example.js\nvar haraldutil = require('haraldutil')\nfuncName()\nfunction funcName() {\n  // next line is line 6\n  console.log(haraldutil.getLoc(arguments.callee.name), 'Hello')\n}\n```\n```\nexample:6:funcName Hello\n```\n* s: optional string\n\n\n\n<h2>toNumber(str, allowFloat)</h2>\nparse numbers, NaN if trailing non-numeric characters\n\n* str: string: format: [+-]0-9..[.0-9..]\n* allowFloat: optional boolean: allow decimal part, default no\n* leading and trailing whitespace and line terminators are allowed\n* unparseable numbers return NaN\n\nThis function is similar to parseFloat, but does not accept trailing garbage characters.\n\n<h2>getTimestamp(date)</h2>\nconvert Date to a unix timestamp number.\n\n* date: optional Date, default now\n\n<h2>getDate(timestamp)</h2>\nconvert a unix timestamp number to Date.\n\n* timestamp: number: Unix epoch\n* return value: Date object\n\n<h2>getDateString(timestamp, timezoneMinutesOffUtc, modifier)</h2>\nConvert unix timestamp to string like '2011-09-30T23:21-0400'\n\n* timestamp: optional number: unix timestamp, default: now\n* timezoneMinutesOffUtc: optional number: minutes off utc, negative west of London, -240 for NY\n* modifier: optional number: 1: skip date part, 2: skip date and timezone\n\n<h2>getTimevalString(...)</h2>\nSame as getDateString but for a JavaScript timeval\n\n<h2>getISOPacific(date, offset)</h2>\nPrint an ISO8601 string adjusted for US daylight savings\n```\nvar haraldutil = require('haraldutil')\nconsole.log(haraldutil.getISOPacific())\n```\n```\n2012-07-01T02:00-08\n```\n\n* date a Date object, default now\n* offset number, minutes from utc, default -420 (Pacific standard time)\n\nNote that JavaScript does not provide daylight savings data for timezones, but it is implemented here of the US.\n\n<h2>encodeTimeNumber(hour, minute, tzOffset)</h2>\nEncoding that allows for difference and comparison within a day for any time zone\n\nThis allows to compare what is earlier in the day for another timezone than localtime or utc, using the commonly available utc timevalues.\n\n* hour, minute: number: base time 0-23, 0-59\n* tzOffset: offset from base location in minutes for result\n* if base is in utc timezone and tzOffset is -240, result will be in eastern daylight time\n\n<h2>createKey(s1, s2, ...)</h2>\nConstruct a unique string value based on the function arguments.\n```js\nvar haraldutil = require('haraldutil')\nvar dbServer = 'server'\nvar dbTable = 'table'\nvar dbTable2 = 'table2'\nvar key1 = haraldutil.createKey(dbServer, dbTable)\nvar key2 = haraldutil.createKey(dbServer, dbTable2)\nif (key1 !== key2) console.log('not the same')\n```\n```\nnot the same\n```\n\n* If any argument is not a non-empty string, exception is thrown\n* For keys to match, every string argument at their creation must have been exactly the same\n\n<h2>periodString(num)</h2>\nprovide a human-readable string expressing a time period to two-digit precision\n```js\nvar haraldutil = require('haraldutil')\nconsole.log('The world will come to an end in:', haraldutil.periodString(1e7))\n```\n```\nThe world will come to an end in: 2 h 46 min\n```\n\n* num: timevalue, unit: ms, positive value\n\n<h1>Notes</h1>\n<p>Please suggest better ways, new features, and possible difficulties on <a href=https://github.com/haraldrudell/haraldutil>github</a></p>\n<p>&copy; 2011, 2013 <a href=http://www.haraldrudell.com><strong>Harald Rudell</strong></a> wrote haraldutil for node in October, 2011</p>\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/haraldrudell/haraldutil/issues"
  },
  "_id": "haraldutil@0.1.18",
  "_from": "haraldutil@>= 0.1.16"
}

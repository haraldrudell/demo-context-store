// inspectwalker.js
// Get list of object properties
// Â© 2011 Harald Rudell <harald.rudell@therudells.com> MIT License

// when printing prototype objects, this property is not printed
var suppressedPrototypeFields = ['constructor']
// when printing funcion objects, these properties are not printed
var suppressedFunctionFields = ['name', 'prototype', 'constructor', 'length', 'caller', 'arguments']

exports.walkProperties = walkProperties

/*
fn: function to invoke for each property
object: object: properties and prototypes to walk
nonEnum: boolean: list prototypes and non-enumerable properties
*/
function walkProperties(fn, object, nonEnum) {
	if (!nonEnum) fn(object, Object.keys(object))
	else {
		var isPrototype
		var constructorName
		for (;;) { // prototypes and non-enumerable properties
			fn(object, getProperties(object, isPrototype), constructorName)
			isPrototype = true
			object = object.__proto__ // walk the object prototype chain
			if (object) {
				constructorName = object.constructor && object.constructor.name || ''
				if (constructorName == 'SlowBuffer' ||
					constructorName == 'Buffer'||
				// abbreviated prototypes
				object === Object.prototype || // prototype Object: saves 11 lines for all objects
				object === Function.prototype || // saves 10 lines for all function objects
				object === Array.prototype || // saves 40 array function names from printing
				object === Date.prototype || // saves 48 function names from printing
				object === RegExp.prototype //|| // saves 16 lines for all RegExp objects
				//object == Error.prototype // only 3 lines, print this
				) object = null
			}
			if (!object) break // prototype chain ended
		}
	}
}

/*
Get object property names
object: object
doSuppress: boolean default false: remove properties that are to be suppressed

return value: array of string: property names
enumerable properties first, followed by non-enumerable
*/
function getProperties(object, doSuppress) {
	var props = []
	var nonEnumProps = []
	var suppress = typeof object === 'function' ? suppressedFunctionFields :
		doSuppress ? suppressedPrototypeFields :
		null

	Object.getOwnPropertyNames(object).forEach(addProperty)
	props.push.apply(props, nonEnumProps) // append nonEnumProps
	return props

	function addProperty(prop) {
		if (!suppress || !~suppress.indexOf(prop)) { // suppress filter
			var isEnum
			try { // some objects throw exception
				isEnum = object.propertyIsEnumerable(prop)
			} catch (e) {} // exception: assume the property is not enumerable
			if (isEnum) props.push(prop)
			else nonEnumProps.push(prop)
		}
	}
}

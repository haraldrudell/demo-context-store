// inspectformatter.js
// Manage property output with braces, commas, newlines etc.
// Â© 2012 Harald Rudell <harald.rudell@therudells.com> MIT License

/*
Arrays
- begin and end with square brackets
- always on single line
- may have leading dimension

Objects
- begins and end with braces
- have one property per line unless singleLine
- for multi-line, indents using levelCount
- primitive objects, Date and function omit braces if there are no properties
*/
exports.Formatter = Formatter

/*
Format output
result: array: output buffer
*/
function Formatter(result, singleLine, levelCount) {
	this.start = start
	this.printAbbreviate = printAbbreviate
	this.printEntry = printEntry
	this.printPrototype = printPrototype
	this.printLeadout = printLeadout
	this.printBrackets // arrays uses brackets, not braces
	this.printBracesMaybe // function, primitive objects, Date: print braces if we have properties
	this.printPropertiesMaybe // string: do not print array properties
	var firstLeadIn // what precedes first property, for array nothing
	var leadIn = ', ' // what precedes a subequent property, for array comma-space
	var endOut // how to end, for array closing brace
	var indent // indent at this level, does not apply to single-line or arrays
	var didPrint

	function start() {
		if (this.printBrackets) {
			result.push('[')
			endOut = ']'
		} else { // this is object-style: multi-line, indentation and curly braces
			endOut = '}'
			if (singleLine) {
				indent = ''
				propIndent = ''
				leadIn = ', '
			} else {
				indent = ['\n']
				for (var i = 1; i < levelCount; i++) indent.push('  ')
				indent = indent.join('')
				var propIndent = indent + '  ' // properties are indented one extra level
				leadIn = ',' + propIndent
			}
			if (!this.printBracesMaybe) { // always braces, print them now
				if (result.length) result.push(' ')
				result.push('{')
				firstLeadIn = propIndent
			} else firstLeadIn = ' {' + propIndent // maybe braces, add the possible opening brace
		}
	}

	function printEntry() {
		var args = Array.prototype.slice.call(arguments)
		if (args.length) {
			var lead = didPrint ? leadIn : firstLeadIn
			if (lead) result.push(lead)
			didPrint = true
			result.push.apply(result, args)
		}
	}

	function printPrototype(prototypeName) {
		if (prototypeName) printEntry('-- prototype: ', prototypeName)
		else printEntry('-- prototype')
	}

	function printAbbreviate() {
		result.push('...')
	}

	function printLeadout() { // closing bracket or brace
		if (this.printBrackets) result.push(endOut)
		else if (!this.printBracesMaybe || didPrint) {
			if (didPrint) result.push(indent)
			result.push(endOut)
		}
	}
}

/// <reference path="../../typings/tsd.d.ts" />
var angular2_1 = require('angular2/angular2');
var event_manager_1 = require('angular2/src/core/render/dom/events/event_manager');
var shared_styles_host_1 = require('angular2/src/core/render/dom/shared_styles_host');
var parse5_adapter_1 = require('angular2/src/core/dom/parse5_adapter');
var render_1 = require('angular2/src/core/render/render');
var key_events_1 = require('angular2/src/core/render/dom/events/key_events');
var hammer_gestures_1 = require('angular2/src/core/render/dom/events/hammer_gestures');
var lang_1 = require('angular2/src/core/facade/lang');
// import {Promise} from 'angular2/src/core/facade/async';
var xhr_1 = require('angular2/src/core/compiler/xhr');
var xhr_impl_1 = require('angular2/src/core/compiler/xhr_impl');
var dom_adapter_1 = require('angular2/src/core/dom/dom_adapter');
var testability_1 = require('angular2/src/core/testability/testability');
var animation_builder_1 = require('angular2/src/animate/animation_builder');
var browser_details_1 = require('angular2/src/animate/browser_details');
var directive_resolver_1 = require('angular2/src/core/linker/directive_resolver');
var server_dom_renderer_1 = require('../render/server_dom_renderer');
var platform_providers_1 = require('./platform_providers');
var application_ref_1 = require('./application_ref');
function platform(providers) {
    return application_ref_1.platformCommon(providers, function () {
        parse5_adapter_1.Parse5DomAdapter.makeCurrent();
    });
}
exports.platform = platform;
function applicationServerDomProviders(appComponentType) {
    if (lang_1.isBlank(dom_adapter_1.DOM)) {
        throw 'Must set a root DOM adapter first.';
    }
    return [
        angular2_1.provide(render_1.DOCUMENT, {
            useFactory: function (directiveResolver) {
                var selector = directiveResolver.resolve(appComponentType).selector;
                var serverDocument = dom_adapter_1.DOM.createHtmlDocument();
                var el = dom_adapter_1.DOM.createElement(selector, serverDocument);
                dom_adapter_1.DOM.appendChild(serverDocument.body, el);
                return serverDocument;
            },
            deps: [directive_resolver_1.DirectiveResolver]
        }),
        // provide(DOCUMENT, {useValue: DOM.defaultDoc()}),
        event_manager_1.EventManager,
        angular2_1.provide(event_manager_1.EVENT_MANAGER_PLUGINS, { multi: true, useClass: event_manager_1.DomEventsPlugin }),
        angular2_1.provide(event_manager_1.EVENT_MANAGER_PLUGINS, { multi: true, useClass: key_events_1.KeyEventsPlugin }),
        angular2_1.provide(event_manager_1.EVENT_MANAGER_PLUGINS, { multi: true, useClass: hammer_gestures_1.HammerGesturesPlugin }),
        angular2_1.provide(render_1.DomRenderer, { useClass: server_dom_renderer_1.ServerDomRenderer_ }),
        // provide(DomRenderer, {useClass: DomRenderer_}),
        angular2_1.provide(render_1.Renderer, { useExisting: render_1.DomRenderer }),
        shared_styles_host_1.DomSharedStylesHost,
        angular2_1.provide(shared_styles_host_1.SharedStylesHost, { useExisting: shared_styles_host_1.DomSharedStylesHost }),
        platform_providers_1.EXCEPTION_PROVIDERS,
        angular2_1.provide(xhr_1.XHR, { useValue: new xhr_impl_1.XHRImpl() }),
        testability_1.Testability,
        browser_details_1.BrowserDetails,
        animation_builder_1.AnimationBuilder,
        angular2_1.FORM_PROVIDERS
    ];
}
exports.applicationServerDomProviders = applicationServerDomProviders;
function serverBootstrap(appComponentType, appProviders) {
    if (appProviders === void 0) { appProviders = null; }
    var p = platform();
    var providers = [
        application_ref_1.applicationCommonProviders(),
        applicationServerDomProviders(appComponentType)
    ];
    if (lang_1.isPresent(appProviders)) {
        providers.push(appProviders);
    }
    return p.application(providers).bootstrap(appComponentType);
}
exports.serverBootstrap = serverBootstrap;
//# sourceMappingURL=application_common.js.map
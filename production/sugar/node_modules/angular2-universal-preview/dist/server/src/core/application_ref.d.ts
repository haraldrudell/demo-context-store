/// <reference path="../../../../server/typings/tsd.d.ts" />
import { Injector, Provider, Type, ComponentRef, PlatformRef, ApplicationRef, NgZone } from 'angular2/angular2';
import { platformProviders, createNgZone } from 'angular2/src/core/application_ref';
export { PlatformRef, createNgZone, platformProviders };
export declare function applicationCommonProviders(): Array<Type | Provider | any[]>;
export declare function platformCommon(providers?: Array<Type | Provider | any[]>, initializer?: () => void): PlatformRef;
export declare class PlatformRef_ extends PlatformRef {
    private _injector;
    private _dispose;
    _applications: Array<ApplicationRef | ApplicationRef_ | any>;
    componentTypes: Array<Type>;
    constructor(_injector: Injector, _dispose: () => void);
    injector: Injector;
    application(providers: Array<Type | Provider | any[]>): ApplicationRef;
    asyncApplication(bindingFn: (zone: NgZone) => Promise<Array<Type | Provider | any[]>>): Promise<ApplicationRef>;
    private _initApp(zone, providers);
    dispose(): void;
    _applicationDisposed(app: ApplicationRef): void;
}
export declare class ApplicationRef_ extends ApplicationRef {
    private _platform;
    private _zone;
    private _injector;
    private _bootstrapListeners;
    private _rootComponents;
    constructor(_platform: PlatformRef_, _zone: NgZone, _injector: Injector);
    registerBootstrapListener(listener: (ref: ComponentRef) => void): void;
    bootstrap(componentType: Type, providers?: Array<Type | Provider | any[]>): Promise<ComponentRef>;
    injector: Injector;
    zone: NgZone;
    dispose(): void;
}







<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" class="">

<head>
    <script type="text/javascript">
        
        window.IC = window.IC || {};
        window.IC.currentUser = JSON.parse('{\u0022id\u0022:9997231,\u0022username\u0022:\u00222018\u002D10\u002D21_23:46:15_i40e6r\u0022,\u0022email\u0022:null,\u0022date_joined\u0022:\u00222018\u002D10\u002D21T23:46:15.637150+00:00\u0022,\u0022first_name\u0022:\u0022\u0022,\u0022last_name\u0022:\u0022\u0022,\u0022full_name\u0022:\u0022\u0022,\u0022short_name\u0022:\u0022friend\u0022,\u0022is_anonymous\u0022:true,\u0022is_on_last_question\u0022:false,\u0022percent_done\u0022:0,\u0022num_questions_done\u0022:0,\u0022num_questions_remaining\u0022:46,\u0022recruiting_is_interested_in_intros\u0022:null,\u0022is_full_access\u0022:false,\u0022is_student\u0022:false,\u0022first_payment_date\u0022:null,\u0022last_payment_date\u0022:null,\u0022num_free_questions_left\u0022:2,\u0022terms_has_agreed_to_latest\u0022:false,\u0022preferred_content_language\u0022:\u0022\u0022,\u0022preferred_editor_language\u0022:\u0022\u0022,\u0022is_staff\u0022:false,\u0022auth_providers_human_readable_list\u0022:\u0022\u0022,\u0022num_auth_providers\u0022:0,\u0022auth_email\u0022:\u0022\u0022,\u0022profile_public_id\u0022:null}');
        
    </script>

    
        <script src="//cdn.optimizely.com/js/1358232165.js"></script>
    

    
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=Edge"/><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,n,t){function r(t){if(!n[t]){var o=n[t]={exports:{}};e[t][0].call(o.exports,function(n){var o=e[t][1][n];return r(o||n)},o,o.exports)}return n[t].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<t.length;o++)r(t[o]);return r}({1:[function(e,n,t){function r(){}function o(e,n,t){return function(){return i(e,[c.now()].concat(u(arguments)),n?null:this,t),n?void 0:this}}var i=e("handle"),a=e(3),u=e(4),f=e("ee").get("tracer"),c=e("loader"),s=NREUM;"undefined"==typeof window.newrelic&&(newrelic=s);var p=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],d="api-",l=d+"ixn-";a(p,function(e,n){s[n]=o(d+n,!0,"api")}),s.addPageAction=o(d+"addPageAction",!0),s.setCurrentRouteName=o(d+"routeName",!0),n.exports=newrelic,s.interaction=function(){return(new r).get()};var m=r.prototype={createTracer:function(e,n){var t={},r=this,o="function"==typeof n;return i(l+"tracer",[c.now(),e,t],r),function(){if(f.emit((o?"":"no-")+"fn-start",[c.now(),r,o],t),o)try{return n.apply(this,arguments)}catch(e){throw f.emit("fn-err",[arguments,this,e],t),e}finally{f.emit("fn-end",[c.now()],t)}}}};a("actionText,setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,n){m[n]=o(l+n)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,c.now()])}},{}],2:[function(e,n,t){function r(e,n){if(!o)return!1;if(e!==o)return!1;if(!n)return!0;if(!i)return!1;for(var t=i.split("."),r=n.split("."),a=0;a<r.length;a++)if(r[a]!==t[a])return!1;return!0}var o=null,i=null,a=/Version\/(\S+)\s+Safari/;if(navigator.userAgent){var u=navigator.userAgent,f=u.match(a);f&&u.indexOf("Chrome")===-1&&u.indexOf("Chromium")===-1&&(o="Safari",i=f[1])}n.exports={agent:o,version:i,match:r}},{}],3:[function(e,n,t){function r(e,n){var t=[],r="",i=0;for(r in e)o.call(e,r)&&(t[i]=n(r,e[r]),i+=1);return t}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],4:[function(e,n,t){function r(e,n,t){n||(n=0),"undefined"==typeof t&&(t=e?e.length:0);for(var r=-1,o=t-n||0,i=Array(o<0?0:o);++r<o;)i[r]=e[n+r];return i}n.exports=r},{}],5:[function(e,n,t){n.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(e,n,t){function r(){}function o(e){function n(e){return e&&e instanceof r?e:e?f(e,u,i):i()}function t(t,r,o,i){if(!d.aborted||i){e&&e(t,r,o);for(var a=n(o),u=v(t),f=u.length,c=0;c<f;c++)u[c].apply(a,r);var p=s[y[t]];return p&&p.push([b,t,r,a]),a}}function l(e,n){h[e]=v(e).concat(n)}function m(e,n){var t=h[e];if(t)for(var r=0;r<t.length;r++)t[r]===n&&t.splice(r,1)}function v(e){return h[e]||[]}function g(e){return p[e]=p[e]||o(t)}function w(e,n){c(e,function(e,t){n=n||"feature",y[t]=n,n in s||(s[n]=[])})}var h={},y={},b={on:l,addEventListener:l,removeEventListener:m,emit:t,get:g,listeners:v,context:n,buffer:w,abort:a,aborted:!1};return b}function i(){return new r}function a(){(s.api||s.feature)&&(d.aborted=!0,s=d.backlog={})}var u="nr@context",f=e("gos"),c=e(3),s={},p={},d=n.exports=o();d.backlog=s},{}],gos:[function(e,n,t){function r(e,n,t){if(o.call(e,n))return e[n];var r=t();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,n,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[n]=r,r}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],handle:[function(e,n,t){function r(e,n,t,r){o.buffer([e],r),o.emit(e,n,t)}var o=e("ee").get("handle");n.exports=r,r.ee=o},{}],id:[function(e,n,t){function r(e){var n=typeof e;return!e||"object"!==n&&"function"!==n?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");n.exports=r},{}],loader:[function(e,n,t){function r(){if(!E++){var e=x.info=NREUM.info,n=l.getElementsByTagName("script")[0];if(setTimeout(s.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&n))return s.abort();c(y,function(n,t){e[n]||(e[n]=t)}),f("mark",["onload",a()+x.offset],null,"api");var t=l.createElement("script");t.src="https://"+e.agent,n.parentNode.insertBefore(t,n)}}function o(){"complete"===l.readyState&&i()}function i(){f("mark",["domContent",a()+x.offset],null,"api")}function a(){return O.exists&&performance.now?Math.round(performance.now()):(u=Math.max((new Date).getTime(),u))-x.offset}var u=(new Date).getTime(),f=e("handle"),c=e(3),s=e("ee"),p=e(2),d=window,l=d.document,m="addEventListener",v="attachEvent",g=d.XMLHttpRequest,w=g&&g.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:g,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var h=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1099.min.js"},b=g&&w&&w[m]&&!/CriOS/.test(navigator.userAgent),x=n.exports={offset:u,now:a,origin:h,features:{},xhrWrappable:b,userAgent:p};e(1),l[m]?(l[m]("DOMContentLoaded",i,!1),d[m]("load",r,!1)):(l[v]("onreadystatechange",o),d[v]("onload",r)),f("mark",["firstbyte",u],null,"api");var E=0,O=e(5)},{}]},{},["loader"]);</script><script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"transactionName":"ZVwAbEQCDUQCAUwKDFwWJE1YABdeDAwXDhpBUBZdGA4CXg0DSBNNRFAHT0VZMkIGEUwKDFxvC11BTQRSFw==","applicationID":"7328113","applicationTime":185,"agent":"","licenseKey":"9e57878e2e","errorBeacon":"bam.nr-data.net","beacon":"bam.nr-data.net","queueTime":2}</script>
        <link rel="shortcut icon" type="image/x-icon" href="/images/favicon.ico?bust=187" />
        <link rel="canonical" href="https://www.interviewcake.com/question/java/stock-price" />
        <meta name="description" content="Figure out the optimal buy and sell time for a given stock, given its prices yesterday."/>

        <meta property="og:title" content="Apple Stocks (Practice Interview Question) | Interview Cake" />
        <meta property="og:description" content="Figure out the optimal buy and sell time for a given stock, given its prices yesterday." />
        <meta property="og:image" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png?bust=187" />
        <meta property="og:type" content="website" />
        <meta property="og:locale" content="en_US" />
        <meta property="og:site_name" content="Interview Cake: Programming Interview Questions and Tips" />
        <meta property="fb:app_id" content="149278655279066"/>
        <meta property="fb:admins" content="514407734"/>
        <meta property="og:url" content="https://www.interviewcake.com/question/java/stock-price"/>

        <meta name="twitter:card" content="summary" />
        <meta name="twitter:site" content="@interviewcake" />
        <meta name="twitter:title" content="Apple Stocks (Practice Interview Question) | Interview Cake" />
        <meta name="twitter:description" content="Figure out the optimal buy and sell time for a given stock, given its prices yesterday." />
        <meta name="twitter:creator" content="@interviewcake" />
        <meta name="twitter:image:src" content="https://www.interviewcake.com/static/images/cake_white_on_blue_600_600_unrounded.png?bust=187" />
        <meta name="twitter:domain" content="interviewcake.com" />
        <meta name="format-detection" content="telephone=no">
        <meta name="google-site-verification" content="r7D0sJ5yY_0tZHJ3uXk2pPriygDLCPtz7Ihqq5NTpf8" />

        <title>Apple Stocks (Practice Interview Question) | Interview Cake</title>
    

    

    
        <script type="text/javascript">
            window.analytics||(window.analytics=[]),window.analytics.methods=["identify","track","trackLink","trackForm","trackClick","trackSubmit","page","pageview","ab","alias","ready","group","on","once","off"],window.analytics.factory=function(a){return function(){var t=Array.prototype.slice.call(arguments);return t.unshift(a),window.analytics.push(t),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var method=window.analytics.methods[i];window.analytics[method]=window.analytics.factory(method)}window.analytics.load=function(a){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+a+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},window.analytics.SNIPPET_VERSION="2.0.6",
            window.analytics.load("rowk0wc1g6"),
            window.analytics.page();
        </script>
    

    

    

    
        <link href="//netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" rel="stylesheet" />
        <link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css" rel="stylesheet" />
        <link href="//netdna.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet" />
        <link href="//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.2.0/katex.min.css" rel="stylesheet" />
    

    

    
        <link rel="stylesheet" href="/static/CACHE/css/9a7f2aa6c2be.css" type="text/css" media="all" />
        
    

    

    <link href='//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,700italic,400,300,700|Inconsolata:400,700|Lora:400,400italic' rel='stylesheet' type='text/css'>

    

    <link rel="apple-touch-icon" href="/images/cake_white_on_blue_128_128_unrounded.png">

    

    <meta name="50fc73d52056532c18787976ceb78fddb87b78b2" content="ceb4cec06fc4a780c7b31b85c07cf75d1ca58d9d" />

    
    
    

    <script type='text/javascript'>
        var _vwo_code=(function(){
        var account_id=50155,
        settings_tolerance=2000,
        library_tolerance=2500,
        use_existing_jquery=false,
        // DO NOT EDIT BELOW THIS LINE
        f=false,d=document;return{use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b='body{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('//dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&r='+Math.random());return settings_timer;}};}());_vwo_settings_timer=_vwo_code.init();
    </script>
</head>

<body ng-app="prepApp" ng-init="contentItemIsEmbedded = false"
    class="
           
           
           ">



<div class="ic-alerts">
    
    
        <div ng-cloak class="ic-alert ic-alert-interruption ic-alert-email-newsletter-signup right-drawer" ng-show='showing' ng-controller='AlertDrawerCtrl' ng-init="type='email_newsletter'">
    <div class="ic-alert-content">

        <h2>
            Get a <em>free</em> weekly practice problem!
        </h2>

        <p>
            Keep that axe sharp.
        </p>

        <div ng-controller='EmailNewsletterSignupCtrl' id="email_magnet_alert-drawer-newsletter-signup" class="email-magnet" campaign="weekly_problem">
    <form class="the-form center-block" ng-hide="success" ng-submit="signupPress()">
        
        <div ng-cloak ng-show="failureMessage" ng-bind="failureMessage" class="error"></div>
        <div class="input-group input-group-lg email-magnet-one-liner">
                <input type="email" ng-model='email' placeholder="me@gmail.com" class="form-control" ng-disabled="disabled">
                <span class="input-group-btn">
                    <input ng-cloak type="submit" class="submit btn btn-branded btn-bold" style="" ng-value="disabled ? 'Working...' : 'Sign up!'" ng-disabled="disabled"/>
                </span>
        </div>
        
        
        <p class="reassurance text-center">
            No spam, ever. Easy unsubscribe.
        </p>
        
    </form>

    <div ng-cloak ng-show="success" class="success">
        
            <p class="text-center">
                <em>
                Cool, watch your inbox!
                </em>
            </p>

        
    </div>
</div>


        <p class="text-center close-p" ng-hide="success">
            <small>
                <a href="" ng-click="noThanksClick()">&times; No thanks</a>
            </small>
        </p>
    </div>
</div>


    
</div>

<select id="select-language-content-width-hack" style="display: none">
    <option></option>
</select>



<div class="panel-wrapper" ng-controller="PanelWrapperCtrl">
<div class="left-panel scrolling-body"
     ng-class="{
        'editor-open-or-opening': editorOpenOrOpening,
        'editor-opening-or-closing': editorOpeningOrClosing,
        'editor-open-or-partly-open': editorOpenOrPartlyOpen,
     }">



    
    
<div class="print-header navbar-print-header navbar navbar-inverse">
    <div class="navbar-header">
        <span class="navbar-brand">
            <img src="/static//images/cake_white_20_21.png" class="logo" />
            Interview Cake
        </span>
    </div>
</div>




    <div class="navbar navbar-normal navbar-inverse" role="navigation" ng-controller="HeaderCtrl" language="python">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="/">
                Interview Cake
            </a>
        </div>

        <div class="collapse navbar-collapse">
            <ul class="nav navbar-nav navbar-left">
                
                <li class="dropdown tips">
                    <a href="" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                        Interview Tips <span class="caret"></span>
                    </a>
                    <ul class="dropdown-menu" role="menu">
                        <li>
                            <a href="/coding-interview-beginner-faq">
                                First coding interview? Start here.
                            </a>
                        </li>

                        <li>
                            <a href="/coding-interview-tips">
                                General coding interview tips
                            </a>
                        </li>

                        <li>
                            <a href="/tricks-for-getting-unstuck-programming-interview">
                                How to get un-stuck
                            </a>
                        </li>

                        <li>
                            <a href="/impostor-syndrome-in-programming-interviews">
                                Beating impostor syndrome
                            </a>
                        </li>

                        <li>
                            <a href="/24-hours-before-onsite-whiteboard-coding-interview">
                                24 hours before your onsite
                            </a>
                        </li>

                        <li>
                            <a href="/why-youre-hitting-dead-ends-in-whiteboard-interviews">
                                Why you're hitting dead ends
                            </a>
                        </li>

                        <li>
                            <a href="/getting-the-most-from-coding-interview-practice-sessions">
                                Best ways to practice
                            </a>
                        </li>

                        

                        <li>
                            <a href="/coding-interview-timeline-exploding-offers-burnout-negotiation-leverage">
                                Organizing your interview timeline
                            </a>
                        </li>

                        <li>
                            <a href="/behavioral-questions-programming-interview-story-telling">
                                Mastering behavioral questions
                            </a>
                        </li>

                        <li>
                            <a href="/coding-interview-faq">
                                Common issues
                            </a>
                        </li>

                    </ul>
                </li>
                

                <li class="dropdown">
                    <a href="" class="dropdown-toggle" data-toggle="dropdown" rel="nofollow">
                        Glossary <span class="caret"></span>
                    </a>
                    <ul class="dropdown-menu" role="menu">
                        <li>
    <a href="/big-o-notation-time-and-space-complexity">Big O Notation: <span complexity="n"></span>, <span complexity="n^2"></span>, etc</a>
</li>
<li>
    <a href="/article/logarithms">Logarithms</a>
</li>
<li>
    <a href="/concept/triangular-series">Triangular Series</a>
</li>

<li role="separator" class="divider"></li>

<li>
    <a href="/concept/binary-search">Binary Search</a>
</li>
<li>
    <a href="/concept/bfs">Breadth-First Search</a>
</li>
<li>
    <a href="/concept/dfs">Depth-First Search</a>
</li>
<li>
    <a href="/concept/counting-sort">Counting Sort</a>
</li>

<li role="separator" class="divider"></li>
<li>
    <a href="/concept/brute-force">Brute Force Algorithms</a>
</li>
<li>
    <a href="/concept/greedy">Greedy Algorithms</a>
</li>
<li>
    <a href="/concept/bottom-up">Bottom-Up Algorithms</a>
</li>
<li>
    <a href="/concept/overlapping-subproblems">Overlapping Subproblems</a>
</li>
<li>
    <a href="/concept/memoization">Memoization</a>
</li>

<li role="separator" class="divider"></li>

<li>
    <a href="/concept/short-circuit-evaluation">Short Circuit Evaluation</a>
</li>
<li>
    <a href="/concept/garbage-collection">Garbage Collection</a>
</li>
<li>
    <a href="/concept/js-closure">Closure</a>
</li>
<li>
    <a href="/concept/slice">Array Slicing</a>
</li>
<li>
    <a href="/concept/hashing">Hashing</a>
</li>
<li>
    <a href="/concept/mutable">Mutable vs Immutable</a>
</li>
<li>
    <a href="/concept/in-place">In-Place Operation</a>
</li>

<li role="separator" class="divider"></li>

<li>
    <a href="/article/data-structures-computer-science">Data Structures Overview</a>
</li>

<li>
    <a href="/concept/array">Array</a>
</li>
<li>
    <a href="/concept/dynamic-array">Dynamic Array</a>
</li>
<li>
    <a href="/concept/hash-map">Hash Table</a>
</li>
<li>
    <a href="/concept/linked-list">Linked List</a>
</li>
<li>
    <a href="/concept/queue">Queue</a>
</li>
<li>
    <a href="/concept/stack">Stack</a>
</li>
<li>
    <a href="/concept/binary-tree">Binary Tree</a>
</li>
<li>
    <a href="/concept/graph">Graph</a>
</li>

<li role="separator" class="divider"></li>

<li>
    <a href="/concept/binary-numbers">Binary Numbers</a>
</li>
<li>
    <a href="/concept/and">Bitwise AND</a>
</li>
<li>
    <a href="/concept/or">Bitwise OR</a>
</li>
<li>
    <a href="/concept/xor">Bitwise XOR</a>
</li>
<li>
    <a href="/concept/not">Bitwise NOT</a>
</li>
<li>
    <a href="/concept/bit-shift">Bit Shifting</a>
</li>
<li>
    <a href="/concept/integer-overflow">Integer Overflow</a>
</li>

                    </ul>
                </li>

				
                <li>
					
                        <a href="/table-of-contents">Full Course</a>
                    
                </li>
				
            </ul>

            <ul class="nav navbar-nav navbar-right" ng-cloak ng-show="currentUserSet">

                <li ng-cloak>

					

                    <a class="upgrade" ng-hide="currentUser.is_full_access" href="/upgrade">
                        Get the full course
                        <span class="glyphicon glyphicon-chevron-right full-access-badge"></span>
                    </a>
                </li>

                
                    <li class="dropdown language-dropdown" ng-controller="NavbarTranslationCtrl" ng-show="contentLanguage && currentUser.is_full_access">
                        <a rel="nofollow" href="" class="dropdown-toggle" data-toggle="dropdown">
                            <span ng-bind="contentLanguage.display_name"></span> <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu" role="menu">
                            <li ng-repeat="language in contentLanguages | orderBy: 'display_name'">
                                <a href="" ng-click="updateLanguage(language, true)" ng-bind="::language.display_name"></a>
                            </li>
                        </ul>
                    </li>
                

                
                    <li>
                        <p class="navbar-text">
                            
                            <span ng-show="currentUser.is_full_access" class="glyphicon glyphicon-star full-access-badge"></span>
                        </p>
                    </li>
                    <li ng-hide="currentUser.is_anonymous">
                        <a rel="nofollow" ng-click="logoutClick($event)" tracklink the-event="Logout Link Click" the-properties='{"which" : "header top right"}' href="">Log out</a>
                    </li>
                    <li ng-show="currentUser.is_anonymous">
                        <a href="" rel="nofollow" ng-click="loginClick('header top right')">Log in to save progress</a>
                    </li>
                
            </ul>
        </div>
    </div>



    

    <div class="below-nav">

        

        
        

<div class="quiz" ng-controller="PrepSeshApp">
    
        
    

    
        <div class="free-questions-left" ng-show='currentUserSet && !currentUser.is_full_access' ng-cloak >

<h3 class="text-center">

	You only have <strong class="num" ng-bind="currentUser.getNumFreeQuestionsLeft()"></strong> free question<span ng-show="currentUser.getNumFreeQuestionsLeft()!=1">s</span> left<span ng-show="currentUser.getNumFreeQuestionsLeft()!=1"> (including this one)</span>.

</h3>


<div id="crash-course-email" class="interstitial-cta-box" blocks-news-drawer-when-visible>
<p class="subheader text-center">
  But it doesn't have to end here! Sign up for the 7-day coding interview crash course and you'll get a <strong>free</strong> Interview Cake problem every week.
</p>
<div class="email-input">

<div ng-controller='EmailNewsletterSignupCtrl' id="email_magnet_free-questions-left" class="email-magnet" campaign="intro_course">
    <form class="the-form center-block" ng-hide="success" ng-submit="signupPress()">
        
        <div ng-cloak ng-show="failureMessage" ng-bind="failureMessage" class="error"></div>
        <div class="input-group input-group-lg email-magnet-one-liner">
                <input type="email" ng-model='email' placeholder="me@gmail.com" class="form-control" ng-disabled="disabled">
                <span class="input-group-btn">
                    <input ng-cloak type="submit" class="submit btn btn-branded btn-bold" style="" ng-value="disabled ? 'Working...' : 'Sign me up!'" ng-disabled="disabled"/>
                </span>
        </div>
        
        
        <p class="reassurance text-center">
            No spam, ever.
        </p>
        
    </form>

    <div ng-cloak ng-show="success" class="success">
        
            <p class="custom-success text-center">
                <strong>
                    You're in!
                </strong>
            </p>
        
    </div>
</div>

</div>
</div>


</div>

    


    
    <div class="wrapper-hack" ng-init="slug='stock-price'">
<div class="card" ng-class="{'started': btnPresses.length > 0}" ng-controller="CardCtrl">

    <div class="sections" ng-cloak>
        
    <div>
<span class="question-data" data-difficulty="7" data-meta_desc="Figure out the optimal buy and sell time for a given stock, given its prices yesterday." data-name="Apple Stocks" data-title="" data-weight="8" data-num-hints="15" data-num-gotchas="3" ng-init="setNumHints(15); setNumGotchas(3); ">
</span>
<div section="question">
<p>
<strong>
Writing programming interview questions hasn't made me rich yet ... so I might give up and start trading Apple stocks all day instead.
</strong>
</p>
<p>
First, I wanna know how much money I <em>could have</em> made yesterday if I'd been trading Apple stocks all day.
</p>
<p>
So I grabbed Apple's stock prices from yesterday and put them in <span words="question__stock-price__a-standard-list">a list</span> called <span var="question__stock-price__stock-prices">stock_prices</span>, where:
</p>
<ul>
<li>
The <strong>indices</strong> are the time (in minutes) past trade opening time, which was 9:30am local time.
</li>
<li>
The <strong>values</strong> are the price (in US dollars) of one share of Apple stock at that time.
</li>
</ul>
<p>
So if the stock cost $500 at 10:30am, that means <span code-inline="question__stock-price__stock-prices-example">stock_prices[60] = 500</span>.
</p>
<p>
Write an efficient <span words="question__stock-price__function">function</span> that takes <span var="question__stock-price__stock-prices">stock_prices</span> and returns <strong>the best profit I could have made from one purchase and one sale of one share of Apple stock yesterday.</strong>
</p>
<p>
For example:
</p>
<div class="clearfix"></div>
<div code-block="question__stock-price__input-output-example" language="python" translation-highlighting="dynamic" actual-language="python">stock_prices = [10, 7, 5, 8, 11, 9]

get_max_profit(stock_prices)
# Returns 6 (buying for $5 and selling for $11)</div>
<span words="question__stock-price__using-namespace-std"></span>
<p>
No "shorting"&#x2014;you need to buy before you can sell. Also, you can't buy <em>and</em> sell in the same time step&#x2014;at least 1 minute has to pass.
</p>
</div>
<div section="gotchas">
<div note="" number="1" type="gotcha">
<p>
<strong>You can't just take the difference between the highest price and the lowest price</strong>, because the highest price might come <em>before</em> the lowest price. And you have to buy before you can sell.
</p>
</div>
<div note="" number="2" type="gotcha">
<p>
What if the price <em>goes down all day</em>? In that case, the best profit will be <strong>negative</strong>.
</p>
</div>
<div note="" number="3" type="gotcha">
<p>
You can do this in <span concept="big-o-learn-more"><span complexity="n"></span> time and <span complexity="1"></span> space!</span>
</p>
</div>
</div>
<div section="breakdown">
<div note="" number="1" type="hint">
<p>
To start, try writing an example value for <span var="question__stock-price__stock-prices">stock_prices</span> and finding the maximum profit "by hand." What's your process for figuring out the maximum profit?
</p>
</div>
<div note="" number="2" type="hint">
<p>
The <span concept="brute-force">brute force</span> approach would be to try <em>every pair of times</em> (treating the earlier time as the buy time and the later time as the sell time) and see which one is higher.
</p>
<div class="clearfix"></div>
<div code-block="question__stock-price__brute-force" language="python" translation-highlighting="dynamic" actual-language="python">def get_max_profit(stock_prices):
    max_profit = 0

    # Go through every time
    for outer_time in xrange(len(stock_prices)):

        # For every time, go through every other time
        for inner_time in xrange(len(stock_prices)):
            # For each pair, find the earlier and later times
            earlier_time = min(outer_time, inner_time)
            later_time   = max(outer_time, inner_time)

            # And use those to find the earlier and later prices
            earlier_price = stock_prices[earlier_time]
            later_price   = stock_prices[later_time]

            # See what our profit would be if we bought at the
            # earlier price and sold at the later price
            potential_profit = later_price - earlier_price

            # Update max_profit if we can do better
            max_profit = max(max_profit, potential_profit)

    return max_profit</div>
<span words="question__stock-price__null-pointer-check"></span>
<p>
But that will take <span concept="big-o-learn-more"><span complexity="n^2"></span> time,</span> since we have two nested loops&#x2014;for <em>every</em> time, we're going through <em>every other</em> time. Also, <strong>it's not correct</strong>: we won't ever report a negative profit! Can we do better?
</p>
</div>
<div note="" number="3" type="hint">
<p>
Well, we&#x2019;re doing a lot of extra work. We&#x2019;re looking at every pair <em>twice</em>. We know we have to buy before we sell, so in our <em>inner for loop</em> we could just look at every price <strong>after</strong> the price in our <em>outer for loop</em>.
</p>
<p>
That could look like this:
</p>
<div class="clearfix"></div>
<div code-block="question__stock-price__smarter-brute-force" language="python" translation-highlighting="dynamic" actual-language="python">def get_max_profit(stock_prices):
    max_profit = 0

    # Go through every price (with its index as the time)
    for earlier_time, earlier_price in enumerate(stock_prices):

        # And go through all the LATER prices
        for later_time in xrange(earlier_time + 1, len(stock_prices)):
            later_price = stock_prices[later_time]

            # See what our profit would be if we bought at the
            # earlier price and sold at the later price
            potential_profit = later_price - earlier_price

            # Update max_profit if we can do better
            max_profit = max(max_profit, potential_profit)

    return max_profit</div>
<p>
<strong>What&#x2019;s our runtime now?</strong>
</p>
</div>
<div note="" number="4" type="hint">
<p>
Well, our outer for loop goes through <em>all</em> the times and prices, but our inner for loop goes through <em>one fewer price each time</em>. So our total number of steps is the sum <span concept="summation-1-to-n"><span math="">n + (n - 1) + (n - 2) ... + 2 + 1</span></span>, which is <em>still</em> <span complexity="n^2"></span> time.
</p>
<p>
We can do better!
</p>
</div>
<div note="" number="5" type="hint">
<p>
If we're going to do better than <span complexity="n^2"></span>, we're probably going to do it in either <span complexity="nlgn"></span> or <span complexity="n"></span>. <span complexity="nlgn"></span> comes up in sorting and searching algorithms where we're recursively cutting the <span words="question__stock-price__standard-list">list</span> in half. It's not obvious that we can save time by cutting the <span words="question__stock-price__standard-list">list</span> in half here. Let's first see how well we can do by looping through the <span words="question__stock-price__standard-list">list</span> only <em>once</em>.
</p>
</div>
<div note="" number="6" type="hint">
<p>
Since we're trying to loop through the <span words="question__stock-price__standard-list">list</span> once, let's use a <span concept="greedy">greedy</span> approach, where we keep a running <span var="question__stock-price__max-profit">max_profit</span> until we reach the end. We'll start our <span var="question__stock-price__max-profit">max_profit</span> at $0. As we're iterating, how do we know if we've found a new <span var="question__stock-price__max-profit">max_profit</span>?
</p>
</div>
<div note="" number="7" type="hint">
<p>
At each iteration, our <span var="question__stock-price__max-profit">max_profit</span> is either:
</p>
<ol>
<li>the same as the <span var="question__stock-price__max-profit">max_profit</span> at the last time step, or</li>
<li>the max profit we can get by selling at the <span var="question__stock-price__current-price">current_price</span>
</li>
</ol>
<p>
How do we know when we have case (2)?
</p>
</div>
<div note="" number="8" type="hint">
<p>
The max profit we can get by selling at the <span var="question__stock-price__current-price">current_price</span> is simply the difference between the <span var="question__stock-price__current-price">current_price</span> and the <span var="question__stock-price__min-price">min_price</span> from earlier in the day. If this difference is greater than the current <span var="question__stock-price__max-profit">max_profit</span>, we have a new <span var="question__stock-price__max-profit">max_profit</span>.
</p>
<p>
So for every price, we&#x2019;ll need to:
</p>
<ul>
<li>keep track of the <strong>lowest price we&#x2019;ve seen so far</strong>
</li>
<li>see if we can get a <strong>better profit</strong>
</li>
</ul>
</div>
<div note="" number="9" type="hint">
<p>
Here&#x2019;s one possible solution:
</p>
<div class="clearfix"></div>
<div code-block="question__stock-price__solution-before-edge-cases" language="python" translation-highlighting="dynamic" actual-language="python">def get_max_profit(stock_prices):
    min_price  = stock_prices[0]
    max_profit = 0

    for current_price in stock_prices:
        # Ensure min_price is the lowest price we've seen so far
        min_price = min(min_price, current_price)

        # See what our profit would be if we bought at the
        # min price and sold at the current price
        potential_profit = current_price - min_price

        # Update max_profit if we can do better
        max_profit = max(max_profit, potential_profit)

    return max_profit</div>
<p>
We&#x2019;re finding the max profit with one pass and constant space!
</p>
<p>
<strong>Are we done?</strong> Let&#x2019;s think about some edge cases. What if the price <em>stays the same</em>? What if the price <em>goes down all day</em>?
</p>
</div>
<div note="" number="10" type="hint">
<p>
If the price doesn't change, the max possible profit is 0. Our <span words="question__stock-price__function">function</span> will correctly return that. So we're good.
</p>
<p>
But if the value <em>goes down all day</em>, we&#x2019;re in trouble. Our <span words="question__stock-price__function">function</span> would return 0, but there&#x2019;s no way we could break even if the price always goes down.
</p>
<p>
<strong>How can we handle this?</strong>
</p>
</div>
<div note="" number="11" type="hint">
<p>
Well, what are our options? Leaving our <span words="question__stock-price__function">function</span> as it is and just returning zero is <em>not</em> a reasonable option&#x2014;we wouldn't know if our best profit was negative or <em>actually</em> zero, so we'd be losing information. Two reasonable options could be:
</p>
<ol>
<li>
<strong>return a negative profit</strong>. &#x201C;What&#x2019;s the least badly we could have done?&#x201D;</li>
<li>
<strong><span words="question__stock-price__throw-an-error">raise an exception</span></strong>. &#x201C;We should not have purchased stocks yesterday!&#x201D;</li>
</ol>
<p>
In this case, it&#x2019;s probably best to go with option (1). The advantages of returning a negative profit are:
</p>
<ul>
<li>We <strong>more accurately answer the challenge</strong>. If profit is "revenue minus expenses", we&#x2019;re returning the <em>best</em> we could have done.</li>
<li>It's <strong>less opinionated</strong>. We'll leave decisions up to our <span words="question__stock-price__function">function</span>&#x2019;s users. It would be easy to wrap our <span words="question__stock-price__function">function</span> in a helper <span words="question__stock-price__function">function</span> to decide if it&#x2019;s worth making a purchase.</li>
<li>We allow ourselves to <strong>collect better data</strong>. It <em>matters</em> if we would have lost money, and it <em>matters</em> how much we would have lost. If we&#x2019;re trying to get rich, we&#x2019;ll probably care about those numbers.</li>
</ul>
<p>
<strong>How can we adjust our <span words="question__stock-price__function">function</span> to return a negative profit if we can only lose money?</strong> Initializing <span var="question__stock-price__max-profit">max_profit</span> to 0 won&#x2019;t work...
</p>
</div>
<div note="" number="12" type="hint">
<p>
Well, we started our <span var="question__stock-price__min-price">min_price</span> at the first price, so let&#x2019;s start our <span var="question__stock-price__max-profit">max_profit</span> at the <em>first profit we could get</em>&#x2014;if we buy at the first time and sell at the second time.
</p>
<div class="clearfix"></div>
<div code-block="question__stock-price__first-min-price-and-max-profit" language="python" translation-highlighting="dynamic" actual-language="python">min_price  = stock_prices[0]
max_profit = stock_prices[1] - stock_prices[0]</div>
<p>
But we have the potential for <span words="question__stock-price__out-of-bounds-result">an index out of bounds error</span> here, if <span var="question__stock-price__stock-prices">stock_prices</span> has fewer than 2 prices.
</p>
<p>
<span words="question__stock-price__error-requires-two-prices-text">We <em>do</em> want to <span words="question__stock-price__throw-an-error">raise an exception</span> in that case, since <em>profit</em> requires buying <em>and</em> selling, which we can't do with less than 2 prices. So, let's explicitly check for this case and handle it:</span>
</p>
<div class="clearfix"></div>
<div code-block="question__stock-price__error-requires-two-prices" language="python" translation-highlighting="dynamic" actual-language="python">if len(stock_prices) &lt; 2:
    raise ValueError('Getting a profit requires at least 2 prices')

min_price  = stock_prices[0]
max_profit = stock_prices[1] - stock_prices[0]</div>
<p>
Ok, does that work?
</p>
</div>
<div note="" number="13" type="hint">
<p>
No! <strong><span var="question__stock-price__max-profit">max_profit</span> is still always 0.</strong> What&#x2019;s happening?
</p>
</div>
<div note="" number="14" type="hint">
<p>
If the price always goes down, <span var="question__stock-price__min-price">min_price</span> is always set to the <span var="question__stock-price__current-price">current_price</span>. So <span code-inline="question__stock-price__current-price-minus-min-price">current_price - min_price</span> comes out to 0, which of course will always be greater than a negative profit.
</p>
<p>
When we&#x2019;re calculating the <span var="question__stock-price__max-profit">max_profit</span>, we need to make sure we never have a case where we try <strong>both buying and selling stocks at the <span var="question__stock-price__current-price">current_price</span></strong>.
</p>
</div>
<div note="" number="15" type="hint">
<p>
To make sure we&#x2019;re always buying at an <em>earlier</em> price, never the <span var="question__stock-price__current-price">current_price</span>, let&#x2019;s switch the order around so we calculate <span var="question__stock-price__max-profit">max_profit</span> <em>before</em> we update <span var="question__stock-price__min-price">min_price</span>.
</p>
<p>
We'll also need to pay special attention to time 0. Make sure we don't try to buy <em>and</em> sell at time 0.
</p>
<p>
</p>
</div>
<div section="solution">
<p>
We&#x2019;ll <span concept="greedy">greedily</span> walk through the <span words="question__stock-price__standard-list">list</span> to track the max profit and lowest price so far.
</p>
<p>
For every price, we check if:
</p>
<ul>
<li>we can get a better profit by buying at <span var="question__stock-price__min-price">min_price</span> and selling at the <span var="question__stock-price__current-price">current_price</span>
</li>
<li>we have a new <span var="question__stock-price__min-price">min_price</span>
</li>
</ul>
<p>
To start, we initialize:
</p>
<ol>
<li>
<span var="question__stock-price__min-price">min_price</span> as the first price of the day</li>
<li>
<span var="question__stock-price__max-profit">max_profit</span> as the first profit we could get</li>
</ol>
<p>
We decided to return a <em>negative</em> profit if the price decreases all day and we can't make any money. We could have <span words="question__stock-price__thrown-an-error">raised an exception</span> instead, but returning the negative profit is cleaner, makes our <span words="question__stock-price__function">function</span> less opinionated, and ensures we don't lose information.
</p>
<div class="clearfix"></div>
<div code-block="question__stock-price__solution" language="python" translation-highlighting="dynamic" actual-language="python">def get_max_profit(stock_prices):
    if len(stock_prices) &lt; 2:
        raise ValueError('Getting a profit requires at least 2 prices')

    # We'll greedily update min_price and max_profit, so we initialize
    # them to the first price and the first possible profit
    min_price  = stock_prices[0]
    max_profit = stock_prices[1] - stock_prices[0]

    # Start at the second (index 1) time
    # We can't sell at the first time, since we must buy first,
    # and we can't buy and sell at the same time!
    # If we started at index 0, we'd try to buy *and* sell at time 0.
    # This would give a profit of 0, which is a problem if our
    # max_profit is supposed to be *negative*--we'd return 0.
    for current_time in xrange(1, len(stock_prices)):
        current_price = stock_prices[current_time]

        # See what our profit would be if we bought at the
        # min price and sold at the current price
        potential_profit = current_price - min_price

        # Update max_profit if we can do better
        max_profit = max(max_profit, potential_profit)

        # Update min_price so it's always
        # the lowest price we've seen so far
        min_price  = min(min_price, current_price)

    return max_profit</div>
</div>
<div section="complexity">
<p>
<span concept="big-o-learn-more"><span complexity="n"></span> time and <span complexity="1"></span> space.</span> We only loop through the <span words="question__stock-price__standard-list">list</span> once.
    </p>
</div>
<div section="learnings">
<p>
This one's a good example of the <span concept="greedy">greedy</span> approach in action. Greedy approaches are great because they're <em>fast</em> (usually just one pass through the input). But they don't work for every problem.
</p>
<p>
How do you know if a problem will lend itself to a greedy approach? Best bet is to try it out and see if it works. Trying out a greedy approach should be one of the first ways you try to break down a new question.
</p>
<p>
To try it on a new problem, start by asking yourself:
</p>
<p>
"Suppose we <em>could</em> come up with the answer in one pass through the input, by simply updating the 'best answer so far' as we went. What <strong><em>additional values</em></strong> would we need to keep updated as we looked at each item in our input, in order to be able to update the <strong>'best answer so far'</strong> in constant time?"
</p>
<p>
In <em>this</em> case:
</p>
<p>
The "<strong>best answer so far</strong>" is, of course, the max profit that we can get based on the prices we've seen so far.
</p>
<p>
The "<strong>additional value</strong>" is the minimum price we've seen so far. If we keep that updated, we can use it to calculate the new max profit so far in constant time. The max profit is the larger of:
</p>
<ol>
<li>
The previous max profit
</li>
<li>
The max profit we can get by selling now (the current price minus the minimum price seen so far)
</li>
</ol>
<p>
Try applying this greedy methodology to future questions.
</p>
</div>
</div>
<script type="text/javascript">

            //
            var elTranslations = {"vars": {"question__stock-price__current-price": {"camel": "currentPrice", "snake": "current_price"}, "question__stock-price__stock-prices": {"camel": "stockPrices", "snake": "stock_prices", "php": "$stockPrices"}, "question__stock-price__null": {"default": "NULL"}, "question__stock-price__max-profit": {"camel": "maxProfit", "snake": "max_profit"}, "question__stock-price__min-price": {"camel": "minPrice", "snake": "min_price"}}, "code-inlines": {"question__stock-price__index-out-of-range-exception": {"default": "IndexOutOfRangeException"}, "question__stock-price__current-price-minus-min-price": {"camel": "currentPrice - minPrice", "snake": "current_price - min_price"}, "question__stock-price__array-index-out-of-bounds-exception": {"default": "ArrayIndexOutOfBoundsException"}, "question__stock-price__using-namespace-std": {"default": "\n", "cpp": "using namespace std"}, "question__stock-price__stock-prices-example": {"camel": "stockPrices[60] = 500", "snake": "stock_prices[60] = 500", "swift": "stockPrices[60] = 500", "php": "$stockPrices[60] = 500", "objectivec": "stockPrices[60] = @500"}}, "code-blocks": {"question__stock-price__smarter-brute-force": {"swift": {"code": "func getMaxProfit(from stockPricesYesterday: [Int]) -> Int {\n\n    var maxProfit = 0\n\n    // go through every price and time\n    for earlierTime in 0..&lt;stockPricesYesterday.count {\n        let earlierPrice = stockPricesYesterday[earlierTime]\n\n        // and go through all the LATER prices\n        for laterPrice in stockPricesYesterday[(earlierTime + 1)...] {\n\n            // see what our profit would be if we bought at the\n            // min price and sold at the current price\n            let potentialProfit = laterPrice - earlierPrice\n\n            // update maxProfit if we can do better\n            maxProfit = max(maxProfit, potentialProfit)\n        }\n    }\n\n    return maxProfit\n}", "tests": "try test(positiveTests)", "actual_language": "swift"}, "javascript": {"code": "function getMaxProfit(stockPrices) {\n  let maxProfit = 0;\n\n  // Go through every price and time\n  for (let earlierTime = 0; earlierTime &lt; stockPrices.length; earlierTime++) {\n    const earlierPrice = stockPrices[earlierTime];\n\n    // And go through all the LATER prices\n    for (let laterTime = earlierTime + 1; laterTime &lt; stockPrices.length; laterTime++) {\n      const laterPrice = stockPrices[laterTime];\n\n      // See what our profit would be if we bought at the\n      // min price and sold at the current price\n      const potentialProfit = laterPrice - earlierPrice;\n\n      // Update maxProfit if we can do better\n      maxProfit = Math.max(maxProfit, potentialProfit);\n    }\n  }\n\n  return maxProfit;\n}", "tests": "test(positiveTests);", "actual_language": "javascript"}, "objectivec": {"code": "NSNumber *ICKGetMaxProfit(NSArray&lt;NSNumber *> *stockPrices) {\n\n    NSInteger maxProfit = 0;\n\n    // go through every price and time\n    for (NSUInteger earlierTime = 0; earlierTime &lt; stockPrices.count; earlierTime++) {\n        NSInteger earlierPrice = stockPrices[earlierTime].integerValue;\n\n        // and go through all the LATER prices\n        for (NSUInteger laterTime = earlierTime + 1; laterTime &lt; stockPrices.count; laterTime++) {\n            NSInteger laterPrice = stockPrices[laterTime].integerValue;\n\n            // see what our profit would be if we bought at the\n            // min price and sold at the current price\n            NSInteger potentialProfit = laterPrice - earlierPrice;\n\n            // update maxProfit if we can do better\n            maxProfit = MAX(maxProfit, potentialProfit);\n        }\n    }\n\n    return @(maxProfit);\n}", "tests": "ICKtest(YES, NO);", "actual_language": "objectivec"}, "csharp": {"code": "using System;\n\npublic int GetMaxProfit(int[] stockPrices)\n{\n    int maxProfit = 0;\n\n    // Go through every price and time\n    for (int earlierTime = 0; earlierTime &lt; stockPrices.Length; earlierTime++)\n    {\n        int earlierPrice = stockPrices[earlierTime];\n\n        // And go through all the LATER prices\n        for (int laterTime = earlierTime + 1; laterTime &lt; stockPrices.Length; laterTime++)\n        {\n            int laterPrice = stockPrices[laterTime];\n\n            // See what our profit would be if we bought at the\n            // min price and sold at the current price\n            int potentialProfit = laterPrice - earlierPrice;\n\n            // Update maxProfit if we can do better\n            maxProfit = Math.Max(maxProfit, potentialProfit);\n        }\n    }\n\n    return maxProfit;\n}", "tests": "for (int i = 0; i < positiveTestInputs.Length; i++)\n{\n    AssertEqual(GetMaxProfit(positiveTestInputs[i]), positiveTestOutputs[i]);\n}", "actual_language": "csharp"}, "python": {"code": "def get_max_profit(stock_prices):\n    max_profit = 0\n\n    # Go through every price (with its index as the time)\n    for earlier_time, earlier_price in enumerate(stock_prices):\n\n        # And go through all the LATER prices\n        for later_time in xrange(earlier_time + 1, len(stock_prices)):\n            later_price = stock_prices[later_time]\n\n            # See what our profit would be if we bought at the\n            # earlier price and sold at the later price\n            potential_profit = later_price - earlier_price\n\n            # Update max_profit if we can do better\n            max_profit = max(max_profit, potential_profit)\n\n    return max_profit", "tests": "test(positive_tests)", "actual_language": "python"}, "ruby": {"code": "def get_max_profit(stock_prices)\n  max_profit = 0\n\n  # go through every price (with it's index as the time)\n  stock_prices.each_with_index do |earlier_price, earlier_time|\n\n    # and go through all the LATER prices\n    (stock_prices[earlier_time+1..-1]).each do |later_price|\n\n      # see what our profit would be if we bought at the\n      # earlier price and sold at the later price\n      potential_profit = later_price - earlier_price\n\n      # update max_profit if we can do better\n      max_profit = [max_profit, potential_profit].max\n    end\n  end\n\n  max_profit\nend", "tests": "test(positive_tests)", "actual_language": "ruby"}, "cpp": {"code": "int getMaxProfit(const vector&lt;int>& stockPrices)\n{\n    int maxProfit = 0;\n\n    // go through every price and time\n    for (size_t earlierTime = 0; earlierTime &lt; stockPrices.size();\n        ++earlierTime) {\n        int earlierPrice = stockPrices[earlierTime];\n\n        // and go through all the LATER prices\n        for (size_t laterTime = earlierTime + 1;\n             laterTime &lt; stockPrices.size(); ++laterTime) {\n            int laterPrice = stockPrices[laterTime];\n\n            // see what our profit would be if we bought at the\n            // min price and sold at the current price\n            int potentialProfit = laterPrice - earlierPrice;\n\n            // update maxProfit if we can do better\n            maxProfit = max(maxProfit, potentialProfit);\n        }\n    }\n\n    return maxProfit;\n}", "tests": "for (size_t i = 0; i < positiveTestInputs.size(); ++i) {\n    assertEqual(getMaxProfit(positiveTestInputs[i]), positiveTestOutputs[i]);\n}", "actual_language": "cpp"}, "php": {"code": "function getMaxProfit($stockPrices)\n{\n    $maxProfit = 0;\n\n    // go through every price and time\n    for ($earlierTime = 0; $earlierTime &lt; count($stockPrices); $earlierTime++) {\n        $earlierPrice = $stockPrices[$earlierTime];\n\n        // and go through all the LATER prices\n        for ($laterTime = $earlierTime + 1; $laterTime &lt; count($stockPrices); $laterTime++) {\n            $laterPrice = $stockPrices[$laterTime];\n\n            // see what our profit would be if we bought at the\n            // min price and sold at the current price\n            $potentialProfit = $laterPrice - $earlierPrice;\n\n            // update maxProfit if we can do better\n            $maxProfit = max($maxProfit, $potentialProfit);\n        }\n    }\n\n    return $maxProfit;\n}", "tests": "test($positiveTests);", "actual_language": "php"}, "java": {"code": "public static int getMaxProfit(int[] stockPrices) {\n\n    int maxProfit = 0;\n\n    // go through every price and time\n    for (int earlierTime = 0; earlierTime &lt; stockPrices.length; earlierTime++) {\n        int earlierPrice = stockPrices[earlierTime];\n\n        // and go through all the LATER prices\n        for (int laterTime = earlierTime + 1; laterTime &lt; stockPrices.length; laterTime++) {\n            int laterPrice = stockPrices[laterTime];\n\n            // see what our profit would be if we bought at the\n            // min price and sold at the current price\n            int potentialProfit = laterPrice - earlierPrice;\n\n            // update maxProfit if we can do better\n            maxProfit = Math.max(maxProfit, potentialProfit);\n        }\n    }\n\n    return maxProfit;\n}", "tests": "for (int i = 0; i < positiveTestInputs.length; i++) {\n    assertEqual(getMaxProfit(positiveTestInputs[i]), positiveTestOutputs[i]);\n}", "actual_language": "java"}, "c": {"code": "#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n#define MIN(a, b) (((a) &lt; (b)) ? (a) : (b))\n\nint getMaxProfit(const int *stockPrices, size_t length)\n{\n    size_t earlierTime;\n    int maxProfit = 0;\n\n    // go through every price and time\n    for (earlierTime = 0; earlierTime &lt; length; earlierTime++) {\n        size_t laterTime;\n\n        // and go through all the LATER prices\n        for (laterTime = earlierTime + 1; laterTime &lt; length; laterTime++) {\n            int earlierPrice = stockPrices[earlierTime];\n            int laterPrice = stockPrices[laterTime];\n\n            // see what our profit would be if we bought at the\n            // min price and sold at the current price\n            int potentialProfit = laterPrice - earlierPrice;\n\n            // update maxProfit if we can do better\n            maxProfit = MAX(maxProfit, potentialProfit);\n        }\n    }\n\n    return maxProfit;\n}", "tests": "{\n    int i;\n    for (i = 0; i < 3; i++) {\n        testInputAndOutput((const int *)postitiveTestInputs[i], postitiveTestLengths[i],\n                           positiveTestOutputs[i], getMaxProfit);\n    }\n}", "actual_language": "c"}}, "setup": {"swift": "let positiveTests = [\n    [[10, 20, 5], 10],\n    [[10, 5, 10, 20], 15],\n    [[10, 10, 10], 0]\n]\n\nlet negativeTests = [\n    [[35, 20, 10], -10],\n    [[30, 20, 10], -10],\n    [[100, 70, 50], -20]\n]\n\nfunc test(_ tests: [Array<Any>]) throws {\n    for inputAndOutput in tests {\n        try assertEqual(getMaxProfit(from: inputAndOutput[0] as! [Int]),\n                        inputAndOutput[1] as? Int)\n    }\n}", "javascript": "const positiveTests = [\n  [[10, 20, 5],     10],\n  [[10, 5, 10, 20], 15],\n  [[10, 10, 10],    0],\n];\n\nconst negativeTests = [\n  [[35, 20, 10],  -10],\n  [[30, 20, 10],  -10],\n  [[100, 70, 50], -20],\n];\n\nfunction test(tests) {\n  tests.forEach((inputAndOutput) => {\n    assertEqual(getMaxProfit(inputAndOutput[0]), inputAndOutput[1]);\n  });\n}", "objectivec": "NSNumber *ICKGetMaxProfit(NSArray<NSNumber *> *stockPrices);\n\nvoid ICKtestFunc(NSArray *tests) {\n    for (NSArray *test in tests) {\n        NSArray *input = test[0];\n        NSNumber *expectedOutput = test[1];\n        NSNumber *output = ICKGetMaxProfit(input);\n        NSCAssert([output isEqualToNumber:expectedOutput], @\"Numbers should be equal\");\n    }\n}\n\nvoid ICKtest(BOOL includePositive, BOOL includeNegative) {\n    NSArray *positiveTests = @[\n        @[@[@10, @20, @5], @10],\n        @[@[@10, @5, @10, @20], @15],\n        @[@[@10, @10, @10], @0]\n    ];\n\n    NSArray *negativeTests = @[\n        @[@[@35, @20, @10], @-10],\n        @[@[@30, @20, @10], @-10],\n        @[@[@100, @70, @50], @-20]\n    ];\n\n    if (includePositive) {\n        ICKtestFunc(positiveTests);\n    }\n\n    if (includeNegative) {\n        ICKtestFunc(negativeTests);\n    }\n}", "csharp": "int[][] positiveTestInputs =\n{\n    new[] { 10, 20, 5 },\n    new[] { 10, 5, 10, 20 },\n    new[] { 10, 10, 10 },\n};\n\nint[] positiveTestOutputs =\n{\n    10,\n    15,\n    0,\n};\n\nint[][] negativeTestInputs =\n{\n    new[] { 35, 20, 10 },\n    new[] { 30, 20, 10 },\n    new[] { 100, 70, 50 },\n};\n\nint[] negativeTestOutputs =\n{\n    -10,\n    -10,\n    -20,\n};", "python": "positive_tests = [\n    ([10, 20, 5],     10),  # simple buy and sell\n    ([10, 5, 10, 20], 15),  # wait to buy and sell\n    ([10, 10, 10],    0),   # no change\n]\n\nnegative_tests = [\n    ([35, 20, 10],  -10),   # decrease in value all day\n    ([30, 20, 10],  -10),   # steady decrease\n    ([100, 70, 50], -20),   # decrease, wait to buy\n]\n\ndef test(tests):\n    for input, output in tests:\n        assertEqual(get_max_profit(input), output)", "ruby": "positive_tests = [\n  [[10, 20, 5],     10],\n  [[10, 5, 10, 20], 15],\n  [[10, 10, 10],    0],\n]\n\nnegative_tests = [\n  [[35, 20, 10],  -10],\n  [[30, 20, 10],  -10],\n  [[100, 70, 50], -20],\n]\n\ndef test(tests)\n  tests.each do |input, output|\n    assertEqual(get_max_profit(input), output)\n  end\nend", "cpp": "const vector<vector<int>> positiveTestInputs {\n    vector<int>{10, 20, 5},\n    vector<int>{10, 5, 10, 20},\n    vector<int>{10, 10, 10},\n};\n\nconst vector<int> positiveTestOutputs {\n    10,\n    15,\n    0\n};\n\nconst vector<vector<int>> negativeTestInputs {\n    vector<int>{35, 20, 10},\n    vector<int>{30, 20, 10},\n    vector<int>{100, 70, 50},\n};\n\nconst vector<int> negativeTestOutputs {\n    -10,\n    -10,\n    -20\n};", "php": "$positiveTests = [\n    [[10, 20, 5],     10],\n    [[10, 5, 10, 20], 15],\n    [[10, 10, 10],    0],\n];\n\n$negativeTests = [\n    [[35, 20, 10],  -10],\n    [[30, 20, 10],  -10],\n    [[100, 70, 50], -20],\n];\n\nfunction test($tests)\n{\n    foreach ($tests as $inputAndOutput) {\n        assertEquals(getMaxProfit($inputAndOutput[0]), $inputAndOutput[1]);\n    }\n}", "java": "int[][] positiveTestInputs = new int[][] {\n    {10, 20, 5},\n    {10, 5, 10, 20},\n    {10, 10, 10},\n};\n\nint[] positiveTestOutputs = new int[] {\n    10,\n    15,\n    0,\n};\n\nint[][] negativeTestInputs = new int[][] {\n    {35, 20, 10},\n    {30, 20, 10},\n    {100, 70, 50},\n};\n\nint[] negativeTestOutputs = new int[] {\n    -10,\n    -10,\n    -20,\n};", "c": "const int postitiveTestInputs[3][4] = {\n    {10, 20, 5},\n    {10, 5, 10, 20},\n    {10, 10, 10}\n};\n\nconst size_t postitiveTestLengths[3] = {\n    3,\n    4,\n    3\n};\n\nconst int positiveTestOutputs[3] = {\n    10,\n    15,\n    0\n};\n\nconst int negativeTestInputs[3][3] = {\n    {35, 20, 10},\n    {30, 20, 10},\n    {100, 70, 50}\n};\n\nconst size_t negativeTestLengths[3] = {\n    3,\n    3,\n    3\n};\n\nconst int negativeTestOutputs[3] = {\n    -10,\n    -10,\n    -20\n};\n\nvoid testInputAndOutput(const int *inputs, size_t inputsLength, int output,\n                        int (*func) (const int *inputs, size_t length))\n{\n    int testOutput;\n\n    testOutput = func(inputs, inputsLength);\n    ASSERT(testOutput == output);\n}"}, "question__stock-price__solution-before-edge-cases": {"swift": {"code": "func getMaxProfit(from stockPricesYesterday: [Int]) -> Int {\n\n    var minPrice  = stockPricesYesterday[0]\n    var maxProfit = 0\n\n    for currentPrice in stockPricesYesterday {\n\n        // ensure minPrice is the lowest price we've seen so far\n        minPrice = min(minPrice, currentPrice)\n\n        // see what our profit would be if we bought at the\n        // min price and sold at the current price\n        let potentialProfit = currentPrice - minPrice\n\n        // update maxProfit if we can do better\n        maxProfit = max(maxProfit, potentialProfit)\n    }\n\n    return maxProfit\n}", "tests": "try test(positiveTests)", "actual_language": "swift"}, "javascript": {"code": "function getMaxProfit(stockPrices) {\n  let minPrice = stockPrices[0];\n  let maxProfit = 0;\n\n  for (let i = 0; i &lt; stockPrices.length; i++) {\n    const currentPrice = stockPrices[i];\n\n    // Ensure minPrice is the lowest price we've seen so far\n    minPrice = Math.min(minPrice, currentPrice);\n\n    // See what our profit would be if we bought at the\n    // min price and sold at the current price\n    const potentialProfit = currentPrice - minPrice;\n\n    // Update maxProfit if we can do better\n    maxProfit = Math.max(maxProfit, potentialProfit);\n  }\n\n  return maxProfit;\n}", "tests": "test(positiveTests);", "actual_language": "javascript"}, "objectivec": {"code": "NSNumber *ICKGetMaxProfit(NSArray&lt;NSNumber *> *stockPrices) {\n\n    NSInteger minPrice  = stockPrices[0].integerValue;\n    NSInteger maxProfit = 0;\n\n    for (NSUInteger i = 0; i &lt; stockPrices.count; i++) {\n        NSInteger currentPrice = stockPrices[i].integerValue;\n\n        // ensure minPrice is the lowest price we've seen so far\n        minPrice = MIN(minPrice, currentPrice);\n\n        // see what our profit would be if we bought at the\n        // min price and sold at the current price\n        NSInteger potentialProfit = currentPrice - minPrice;\n\n        // update maxProfit if we can do better\n        maxProfit = MAX(maxProfit, potentialProfit);\n    }\n\n    return @(maxProfit);\n}", "tests": "ICKtest(YES, NO);", "actual_language": "objectivec"}, "csharp": {"code": "using System;\n\npublic int GetMaxProfit(int[] stockPrices)\n{\n    int minPrice  = stockPrices[0];\n    int maxProfit = 0;\n\n    foreach (int currentPrice in stockPrices)\n    {\n        // Ensure minPrice is the lowest price we've seen so far\n        minPrice = Math.Min(minPrice, currentPrice);\n\n        // See what our profit would be if we bought at the\n        // min price and sold at the current price\n        int potentialProfit = currentPrice - minPrice;\n\n        // Update maxProfit if we can do better\n        maxProfit = Math.Max(maxProfit, potentialProfit);\n    }\n\n    return maxProfit;\n}", "tests": "for (int i = 0; i < positiveTestInputs.Length; i++)\n{\n    AssertEqual(GetMaxProfit(positiveTestInputs[i]), positiveTestOutputs[i]);\n}", "actual_language": "csharp"}, "python": {"code": "def get_max_profit(stock_prices):\n    min_price  = stock_prices[0]\n    max_profit = 0\n\n    for current_price in stock_prices:\n        # Ensure min_price is the lowest price we've seen so far\n        min_price = min(min_price, current_price)\n\n        # See what our profit would be if we bought at the\n        # min price and sold at the current price\n        potential_profit = current_price - min_price\n\n        # Update max_profit if we can do better\n        max_profit = max(max_profit, potential_profit)\n\n    return max_profit", "tests": "test(positive_tests)", "actual_language": "python"}, "ruby": {"code": "def get_max_profit(stock_prices)\n  min_price = stock_prices[0]\n  max_profit = 0\n\n  stock_prices.each do |current_price|\n\n    # Ensure min_price is the lowest price we've seen so far.\n    min_price = [min_price, current_price].min\n\n    # See what our profit would be if we bought at the\n    # min price and sold at the current price.\n    potential_profit = current_price - min_price\n\n    # Update max_profit if we can do better.\n    max_profit = [max_profit, potential_profit].max\n  end\n\n  max_profit\nend", "tests": "test(positive_tests)", "actual_language": "ruby"}, "cpp": {"code": "int getMaxProfit(const vector&lt;int>& stockPrices)\n{\n    int minPrice = stockPrices[0];\n    int maxProfit = 0;\n\n    for (size_t i = 0; i &lt; stockPrices.size(); ++i) {\n\n        int currentPrice = stockPrices[i];\n\n        // ensure minPrice is the lowest price we've seen so far\n        minPrice = min(minPrice, currentPrice);\n\n        // see what our profit would be if we bought at the\n        // min price and sold at the current price\n        int potentialProfit = currentPrice - minPrice;\n\n        // update maxProfit if we can do better\n        maxProfit = max(maxProfit, potentialProfit);\n    }\n\n    return maxProfit;\n}", "tests": "for (size_t i = 0; i < positiveTestInputs.size(); ++i) {\n    assertEqual(getMaxProfit(positiveTestInputs[i]), positiveTestOutputs[i]);\n}", "actual_language": "cpp"}, "php": {"code": "function getMaxProfit($stockPrices)\n{\n    $minPrice = $stockPrices[0];\n    $maxProfit = 0;\n\n    for ($i = 0; $i &lt; count($stockPrices); $i++) {\n        $currentPrice = $stockPrices[$i];\n\n        // ensure minPrice is the lowest price we've seen so far\n        $minPrice = min($minPrice, $currentPrice);\n\n        // see what our profit would be if we bought at the\n        // min price and sold at the current price\n        $potentialProfit = $currentPrice - $minPrice;\n\n        // update maxProfit if we can do better\n        $maxProfit = max($maxProfit, $potentialProfit);\n    }\n\n    return $maxProfit;\n}", "tests": "test($positiveTests);", "actual_language": "php"}, "java": {"code": "public static int getMaxProfit(int[] stockPrices) {\n\n    int minPrice = stockPrices[0];\n    int maxProfit = 0;\n\n    for (int currentPrice : stockPrices) {\n\n        // ensure minPrice is the lowest price we've seen so far\n        minPrice = Math.min(minPrice, currentPrice);\n\n        // see what our profit would be if we bought at the\n        // min price and sold at the current price\n        int potentialProfit = currentPrice - minPrice;\n\n        // update maxProfit if we can do better\n        maxProfit = Math.max(maxProfit, potentialProfit);\n    }\n\n    return maxProfit;\n}", "tests": "for (int i = 0; i < positiveTestInputs.length; i++) {\n    assertEqual(getMaxProfit(positiveTestInputs[i]), positiveTestOutputs[i]);\n}", "actual_language": "java"}, "c": {"code": "#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n#define MIN(a, b) (((a) &lt; (b)) ? (a) : (b))\n\nint getMaxProfit(const int *stockPrices, size_t length)\n{\n    size_t i;\n    int maxProfit = 0;\n    int minPrice = stockPrices[0];\n\n    for (i = 0; i &lt; length; i++) {\n        int currentPrice = stockPrices[i];\n\n        // ensure minPrice is the lowest price we've seen so far\n        minPrice = MIN(minPrice, currentPrice);\n\n        // see what our profit would be if we bought at the\n        // min price and sold at the current price\n        int potentialProfit = currentPrice - minPrice;\n\n        // update maxProfit if we can do better\n        maxProfit = MAX(maxProfit, potentialProfit);\n    }\n\n    return maxProfit;\n}", "tests": "{\n    int i;\n    for (i = 0; i < 3; i++) {\n        testInputAndOutput((const int *)postitiveTestInputs[i], postitiveTestLengths[i],\n                           positiveTestOutputs[i], getMaxProfit);\n    }\n}", "actual_language": "c"}}, "question__stock-price__error-requires-two-prices": {"swift": "guard stockPricesYesterday.count >= 2 else {\n    return nil\n}\n\nlet minPrice = stockPricesYesterday[0]\nlet maxProfit = stockPricesYesterday[1] - stockPricesYesterday[0]", "javascript": "if (stockPrices.length &lt; 2) {\n  throw new Error('Getting a profit requires at least 2 prices');\n}\n\nlet minPrice = stockPrices[0];\nlet maxProfit = stockPrices[1] - stockPrices[0];", "objectivec": "NSCAssert(stockPrices.count >= 2, \n          @\"Getting a profit requires at least 2 prices\");\n\nNSInteger minPrice  = stockPrices[0].integerValue;\nNSInteger maxProfit = stockPrices[1].integerValue - stockPrices[0].integerValue;", "csharp": "if (stockPrices.Length &lt; 2)\n{\n    throw new ArgumentException(\"Getting a profit requires at least 2 prices\",\n        nameof(stockPrices));\n}\n\nint minPrice  = stockPrices[0];\nint maxProfit = stockPrices[1] - stockPrices[0];", "python": "if len(stock_prices) &lt; 2:\n    raise ValueError('Getting a profit requires at least 2 prices')\n\nmin_price  = stock_prices[0]\nmax_profit = stock_prices[1] - stock_prices[0]", "ruby": "if stock_prices.length &lt; 2\n  raise ArgumentError, 'Getting a profit requires at least 2 prices'\nend\n\nmin_price = stock_prices[0]\nmax_profit = stock_prices[1] - stock_prices[0]", "cpp": "if (stockPrices.size() &lt; 2) {\n    throw invalid_argument(\"Getting a profit requires at least 2 prices\");\n}\n\nint minPrice = stockPrices[0];\nint maxProfit = stockPrices[1] - stockPrices[0];", "php": "if (count($stockPrices) &lt; 2) {\n    throw new InvalidArgumentException('Getting a profit requires at least 2 prices');\n}\n\n$minPrice = $stockPrices[0];\n$maxProfit = $stockPrices[1] - $stockPrices[0];", "java": "if (stockPrices.length &lt; 2) {\n    throw new IllegalArgumentException(\"Getting a profit requires at least 2 prices\");\n}\n\nint minPrice = stockPrices[0];\nint maxProfit = stockPrices[1] - stockPrices[0];", "c": "assert(length >= 2);  // Getting a profit requires at least 2 prices\n\nint minPrice = stockPrices[0];\nint maxProfit = stockPrices[1] - stockPrices[0];"}, "question__stock-price__input-output-example": {"swift": "let stockPrices = [10, 7, 5, 8, 11, 9]\n\ngetMaxProfit(from: stockPrices)\n// returns 6 (buying for $5 and selling for $11)", "javascript": "const stockPrices = [10, 7, 5, 8, 11, 9];\n\ngetMaxProfit(stockPrices);\n// Returns 6 (buying for $5 and selling for $11)", "objectivec": "NSArray&lt;NSNumber *> *stockPrices = @[@10, @7, @5, @8, @11, @9];\n\nICKGetMaxProfit(stockPrices);\n// returns 6 (buying for $5 and selling for $11)", "csharp": "int[] stockPrices = { 10, 7, 5, 8, 11, 9 };\n\n// Returns 6 (buying for $5 and selling for $11)\nGetMaxProfit(stockPrices);", "snake": "stock_prices = [10, 7, 5, 8, 11, 9]\n\nget_max_profit(stock_prices)\n# returns 6 (buying for $5 and selling for $11)", "python": "stock_prices = [10, 7, 5, 8, 11, 9]\n\nget_max_profit(stock_prices)\n# Returns 6 (buying for $5 and selling for $11)", "cpp": "vector&lt;int> stockPrices{10, 7, 5, 8, 11, 9};\n\ngetMaxProfit(stockPrices);\n// returns 6 (buying for $5 and selling for $11)", "php": "$stockPrices = [10, 7, 5, 8, 11, 9];\n\ngetMaxProfit($stockPrices);\n// returns 6 (buying for $5 and selling for $11)", "java": "int[] stockPrices = new int[] {10, 7, 5, 8, 11, 9};\n\ngetMaxProfit(stockPrices);\n// returns 6 (buying for $5 and selling for $11)", "c": "int stockPrices[6] = {10, 7, 5, 8, 11, 9};\nsize_t numStockPrices = 6;\n\ngetMaxProfit(stockPrices, numStockPrices);\n// returns 6 (buying for $5 and selling for $11)"}, "question__stock-price__first-min-price-and-max-profit": {"swift": "minPrice = stockPrices[0]\nmaxProfit = stockPrices[1] - stockPrices[0]", "php": "$minPrice = $stockPrices[0];\n$maxProfit = $stockPrices[1] - $stockPrices[0];", "objectivec": "NSInteger minPrice  = stockPrices[0].integerValue;\nNSInteger maxProfit = stockPrices[1].integerValue - stockPrices[0].integerValue;", "snake": "min_price = stock_prices[0]\nmax_profit = stock_prices[1] - stock_prices[0]", "python": "min_price  = stock_prices[0]\nmax_profit = stock_prices[1] - stock_prices[0]", "camel": "minPrice = stockPrices[0];\nmaxProfit = stockPrices[1] - stockPrices[0];"}, "question__stock-price__brute-force": {"swift": {"code": "func getMaxProfit(from stockPricesYesterday: [Int]) -> Int {\n\n    var maxProfit = 0\n\n    // go through every time\n    for outerTime in 0..&lt;stockPricesYesterday.count {\n\n        // for every time, go through every other time\n        for innerTime in 0..&lt;stockPricesYesterday.count {\n\n            // for each pair, find the earlier and later times\n            let earlierTime = min(outerTime, innerTime)\n            let laterTime   = max(outerTime, innerTime)\n\n            // and use those to find the earlier and later prices\n            let earlierPrice = stockPricesYesterday[earlierTime]\n            let laterPrice   = stockPricesYesterday[laterTime]\n\n            // see what our profit would be if we bought at the\n            // min price and sold at the current price\n            let potentialProfit = laterPrice - earlierPrice\n\n            // update maxProfit if we can do better\n            maxProfit = max(maxProfit, potentialProfit)\n        }\n    }\n\n    return maxProfit\n}", "tests": "try test(positiveTests)", "actual_language": "swift"}, "javascript": {"code": "function getMaxProfit(stockPrices) {\n  let maxProfit = 0;\n\n  // Go through every time\n  for (let outerTime = 0; outerTime &lt; stockPrices.length; outerTime++) {\n\n    // For each time, go through every other time\n    for (let innerTime = 0; innerTime &lt; stockPrices.length; innerTime++) {\n\n      // For each pair, find the earlier and later times\n      const earlierTime = Math.min(outerTime, innerTime);\n      const laterTime = Math.max(outerTime, innerTime);\n\n      // And use those to find the earlier and later prices\n      const earlierPrice = stockPrices[earlierTime];\n      const laterPrice = stockPrices[laterTime];\n\n      // See what our profit would be if we bought at the\n      // min price and sold at the current price\n      const potentialProfit = laterPrice - earlierPrice;\n\n      // Update maxProfit if we can do better\n      maxProfit = Math.max(maxProfit, potentialProfit);\n    }\n  }\n\n  return maxProfit;\n}", "tests": "test(positiveTests);", "actual_language": "javascript"}, "objectivec": {"code": "NSNumber *ICKGetMaxProfit(NSArray&lt;NSNumber *> *stockPrices) {\n\n    NSInteger maxProfit = 0;\n\n    // go through every time\n    for (NSUInteger outerTime = 0; outerTime &lt; stockPrices.count; outerTime++) {\n\n        // for every time, go through every other time\n        for (NSUInteger innerTime = 0; innerTime &lt; stockPrices.count; innerTime++) {\n\n            // for each pair, find the earlier and later times\n            NSUInteger earlierTime = MIN(outerTime, innerTime);\n            NSUInteger laterTime   = MAX(outerTime, innerTime);\n\n            // and use those to find the earlier and later prices\n            NSInteger earlierPrice = stockPrices[earlierTime].integerValue;\n            NSInteger laterPrice   = stockPrices[laterTime].integerValue;\n\n            // see what our profit would be if we bought at the\n            // min price and sold at the current price\n            NSInteger potentialProfit = laterPrice - earlierPrice;\n\n            // update maxProfit if we can do better\n            maxProfit = MAX(maxProfit, potentialProfit);\n        }\n    }\n\n    return @(maxProfit);\n}", "tests": "ICKtest(YES, NO);", "actual_language": "objectivec"}, "csharp": {"code": "using System;\n\npublic int GetMaxProfit(int[] stockPrices)\n{\n    int maxProfit = 0;\n\n    // Go through every time\n    for (int outerTime = 0; outerTime &lt; stockPrices.Length; outerTime++)\n    {\n        // For every time, go through every other time\n        for (int innerTime = 0; innerTime &lt; stockPrices.Length; innerTime++)\n        {\n            // For each pair, find the earlier and later times\n            int earlierTime = Math.Min(outerTime, innerTime);\n            int laterTime = Math.Max(outerTime, innerTime);\n\n            // And use those to find the earlier and later prices\n            int earlierPrice = stockPrices[earlierTime];\n            int laterPrice = stockPrices[laterTime];\n\n            // See what our profit would be if we bought at the\n            // min price and sold at the current price\n            int potentialProfit = laterPrice - earlierPrice;\n\n            // Update maxProfit if we can do better\n            maxProfit = Math.Max(maxProfit, potentialProfit);\n        }\n    }\n\n    return maxProfit;\n}", "tests": "for (int i = 0; i < positiveTestInputs.Length; i++)\n{\n    AssertEqual(GetMaxProfit(positiveTestInputs[i]), positiveTestOutputs[i]);\n}", "actual_language": "csharp"}, "python": {"code": "def get_max_profit(stock_prices):\n    max_profit = 0\n\n    # Go through every time\n    for outer_time in xrange(len(stock_prices)):\n\n        # For every time, go through every other time\n        for inner_time in xrange(len(stock_prices)):\n            # For each pair, find the earlier and later times\n            earlier_time = min(outer_time, inner_time)\n            later_time   = max(outer_time, inner_time)\n\n            # And use those to find the earlier and later prices\n            earlier_price = stock_prices[earlier_time]\n            later_price   = stock_prices[later_time]\n\n            # See what our profit would be if we bought at the\n            # earlier price and sold at the later price\n            potential_profit = later_price - earlier_price\n\n            # Update max_profit if we can do better\n            max_profit = max(max_profit, potential_profit)\n\n    return max_profit", "tests": "test(positive_tests)", "actual_language": "python"}, "ruby": {"code": "def get_max_profit(stock_prices)\n  max_profit = 0\n\n  # go through every time\n  (0...stock_prices.length).each do |outer_time|\n\n    # for every time, go through every other time\n    (0...stock_prices.length).each do |inner_time|\n\n      # for each pair, find the earlier and later times\n      earlier_time = [outer_time, inner_time].min\n      later_time   = [outer_time, inner_time].max\n\n      # and use those to find the earlier and later prices\n      earlier_price = stock_prices[earlier_time]\n      later_price   = stock_prices[later_time]\n\n      # see what our profit would be if we bought at the\n      # earlier price and sold at the later price\n      potential_profit = later_price - earlier_price\n\n      # update max_profit if we can do better\n      max_profit = [max_profit, potential_profit].max\n    end\n  end\n\n  max_profit\nend", "tests": "test(positive_tests)", "actual_language": "ruby"}, "cpp": {"code": "int getMaxProfit(const vector&lt;int>& stockPrices)\n{\n    int maxProfit = 0;\n\n    // go through every time\n    for (size_t outerTime = 0; outerTime &lt; stockPrices.size();\n        ++outerTime) {\n\n        // for every time, go through every other time\n        for (size_t innerTime = 0; innerTime &lt; stockPrices.size();\n            ++innerTime) {\n\n            // for each pair, find the earlier and later times\n            size_t earlierTime = min(outerTime, innerTime);\n            size_t laterTime   = max(outerTime, innerTime);\n\n            // and use those to find the earlier and later prices\n            int earlierPrice = stockPrices[earlierTime];\n            int laterPrice   = stockPrices[laterTime];\n\n            // see what our profit would be if we bought at the\n            // min price and sold at the current price\n            int potentialProfit = laterPrice - earlierPrice;\n\n            // update maxProfit if we can do better\n            maxProfit = max(maxProfit, potentialProfit);\n        }\n    }\n\n    return maxProfit;\n}", "tests": "for (size_t i = 0; i < positiveTestInputs.size(); ++i) {\n    assertEqual(getMaxProfit(positiveTestInputs[i]), positiveTestOutputs[i]);\n}", "actual_language": "cpp"}, "php": {"code": "function getMaxProfit($stockPrices)\n{\n    $maxProfit = 0;\n\n    // go through every time\n    for ($outerTime = 0; $outerTime &lt; count($stockPrices); $outerTime++) {\n\n        // for every time, go through every other time\n        for ($innerTime = 0; $innerTime &lt; count($stockPrices); $innerTime++) {\n\n            // for each pair, find the earlier and later times\n            $earlierTime = min($outerTime, $innerTime);\n            $laterTime   = max($outerTime, $innerTime);\n\n            // and use those to find the earlier and later prices\n            $earlierPrice = $stockPrices[$earlierTime];\n            $laterPrice   = $stockPrices[$laterTime];\n\n            // see what our profit would be if we bought at the\n            // min price and sold at the current price\n            $potentialProfit = $laterPrice - $earlierPrice;\n\n            // update maxProfit if we can do better\n            $maxProfit = max($maxProfit, $potentialProfit);\n        }\n    }\n\n    return $maxProfit;\n}", "tests": "test($positiveTests);", "actual_language": "php"}, "java": {"code": "public static int getMaxProfit(int[] stockPrices) {\n\n    int maxProfit = 0;\n\n    // go through every time\n    for (int outerTime = 0; outerTime &lt; stockPrices.length; outerTime++) {\n\n        // for every time, go through every other time\n        for (int innerTime = 0; innerTime &lt; stockPrices.length; innerTime++) {\n\n            // for each pair, find the earlier and later times\n            int earlierTime = Math.min(outerTime, innerTime);\n            int laterTime   = Math.max(outerTime, innerTime);\n\n            // and use those to find the earlier and later prices\n            int earlierPrice = stockPrices[earlierTime];\n            int laterPrice   = stockPrices[laterTime];\n\n            // see what our profit would be if we bought at the\n            // min price and sold at the current price\n            int potentialProfit = laterPrice - earlierPrice;\n\n            // update maxProfit if we can do better\n            maxProfit = Math.max(maxProfit, potentialProfit);\n        }\n    }\n\n    return maxProfit;\n}", "tests": "for (int n = 0; n < positiveTestInputs.length; n++) {\n    assertEqual(getMaxProfit(positiveTestInputs[n]), positiveTestOutputs[n]);\n}", "actual_language": "java"}, "c": {"code": "#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n#define MIN(a, b) (((a) &lt; (b)) ? (a) : (b))\n\nint getMaxProfit(const int *stockPrices, size_t length)\n{\n    size_t outerTime;\n    int maxProfit = 0;\n\n    // go through every time\n    for (outerTime = 0; outerTime &lt; length; outerTime++) {\n        size_t innerTime;\n\n        // for every time, go through every other time\n        for (innerTime = 0; innerTime &lt; length; innerTime++) {\n\n            // for each pair, find the earlier and later times\n            int earlierTime = MIN(outerTime, innerTime);\n            int laterTime   = MAX(outerTime, innerTime);\n\n            // and use those to find the earlier and later prices\n            int earlierPrice = stockPrices[earlierTime];\n            int laterPrice   = stockPrices[laterTime];\n\n            // see what our profit would be if we bought at the\n            // min price and sold at the current price\n            int potentialProfit = laterPrice - earlierPrice;\n\n            // update maxProfit if we can do better\n            maxProfit = MAX(maxProfit, potentialProfit);\n        }\n    }\n\n    return maxProfit;\n}", "tests": "{\n    int i;\n    for (i = 0; i < 3; i++) {\n        testInputAndOutput((const int *)postitiveTestInputs[i], postitiveTestLengths[i],\n                           positiveTestOutputs[i], getMaxProfit);\n    }\n}", "actual_language": "c"}}, "question__stock-price__solution": {"swift": {"code": "func getMaxProfit(from stockPricesYesterday: [Int]) -> Int? {\n\n    guard stockPricesYesterday.count >= 2 else {\n        return nil\n    }\n\n    // we'll greedily update minPrice and maxProfit, so we initialize\n    // them to the first price and the first possible profit\n    var minPrice  = stockPricesYesterday[0]\n    var maxProfit = stockPricesYesterday[1] - stockPricesYesterday[0]\n\n    // start at the second (index 1) time\n    // we can't sell at the first time, since we must buy first,\n    // and we can't buy and sell at the same time!\n    // if we started at index 0, we'd try to buy *and* sell at time 0.\n    // this would give a profit of 0, which is a problem if our\n    // maxProfit is supposed to be *negative*--we'd return 0.\n    for currentPrice in stockPricesYesterday[1...] {\n\n        // see what our profit would be if we bought at the\n        // min price and sold at the current price\n        let potentialProfit = currentPrice - minPrice\n\n        // update maxProfit if we can do better\n        maxProfit = max(maxProfit, potentialProfit)\n\n        // update minPrice so it's always\n        // the lowest price we've seen so far\n        minPrice = min(minPrice, currentPrice)\n    }\n\n    return maxProfit\n}", "tests": "try test(positiveTests)\ntry test(negativeTests)\ntry assertEqual(getMaxProfit(from: [1]), nil)\ntry assertEqual(getMaxProfit(from: []), nil)", "actual_language": "swift"}, "javascript": {"code": "function getMaxProfit(stockPrices) {\n  if (stockPrices.length &lt; 2) {\n    throw new Error('Getting a profit requires at least 2 prices');\n  }\n\n  // We'll greedily update minPrice and maxProfit, so we initialize\n  // them to the first price and the first possible profit\n  let minPrice = stockPrices[0];\n  let maxProfit = stockPrices[1] - stockPrices[0];\n\n  // Start at the second (index 1) time\n  // We can't sell at the first time, since we must buy first,\n  // and we can't buy and sell at the same time!\n  // If we started at index 0, we'd try to buy *and* sell at time 0.\n  // this would give a profit of 0, which is a problem if our\n  // maxProfit is supposed to be *negative*--we'd return 0.\n  for (let i = 1; i &lt; stockPrices.length; i++) {\n    const currentPrice = stockPrices[i];\n\n    // See what our profit would be if we bought at the\n    // min price and sold at the current price\n    const potentialProfit = currentPrice - minPrice;\n\n    // Update maxProfit if we can do better\n    maxProfit = Math.max(maxProfit, potentialProfit);\n\n    // Update minPrice so it's always\n    // the lowest price we've seen so far\n    minPrice = Math.min(minPrice, currentPrice);\n  }\n\n  return maxProfit;\n}", "tests": "test(positiveTests);\ntest(negativeTests);\n\nfunction passOnePrice() {\n  getMaxProfit([1]);\n}\n\nfunction passEmptyArray() {\n  getMaxProfit([]);\n}\n\nassertRaisesError(passOnePrice, 'An array with 1 element', 'requires at least 2 prices');\nassertRaisesError(passEmptyArray, 'An empty array', 'requires at least 2 prices');", "actual_language": "javascript"}, "objectivec": {"code": "NSNumber *ICKGetMaxProfit(NSArray&lt;NSNumber *> *stockPrices) {\n\n    NSCAssert(stockPrices.count >= 2, \n              @\"Getting a profit requires at least 2 prices\");\n\n    // we'll greedily update minPrice and maxProfit, so we initialize\n    // them to the first price and the first possible profit\n    NSInteger minPrice  = stockPrices[0].integerValue;\n    NSInteger maxProfit = stockPrices[1].integerValue - stockPrices[0].integerValue;\n\n    // start at the second (index 1) time\n    // we can't sell at the first time, since we must buy first,\n    // and we can't buy and sell at the same time!\n    // if we started at index 0, we'd try to buy *and* sell at time 0.\n    // this would give a profit of 0, which is a problem if our\n    // maxProfit is supposed to be *negative*--we'd return 0.\n    for (NSUInteger i = 1; i &lt; stockPrices.count; i++) {\n        NSInteger currentPrice = stockPrices[i].integerValue;\n\n        // see what our profit would be if we bought at the\n        // min price and sold at the current price\n        NSInteger potentialProfit = currentPrice - minPrice;\n\n        // update maxProfit if we can do better\n        maxProfit = MAX(maxProfit, potentialProfit);\n\n        // update minPrice so it's always\n        // the lowest price we've seen so far\n        minPrice = MIN(minPrice, currentPrice);\n    }\n\n    return @(maxProfit);\n}", "tests": "ICKtest(YES, YES);\n\nNSArray *emptyArray = [NSArray new];\nASSERT_RAISES(ICKGetMaxProfit(emptyArray), @\"Should raise an error when input has < 2 elements.\")\n\nNSArray *oneElemArray = @[ @10 ];\nASSERT_RAISES(ICKGetMaxProfit(oneElemArray), @\"Should raise an error when input has < 2 elements.\")", "actual_language": "objectivec"}, "csharp": {"code": "using System;\n\npublic static int GetMaxProfit(int[] stockPrices)\n{\n    if (stockPrices.Length &lt; 2)\n    {\n        throw new ArgumentException(\"Getting a profit requires at least 2 prices\",\n            nameof(stockPrices));\n    }\n\n    // We'll greedily update minPrice and maxProfit, so we initialize\n    // them to the first price and the first possible profit\n    int minPrice  = stockPrices[0];\n    int maxProfit = stockPrices[1] - stockPrices[0];\n\n    // Start at the second (index 1) time.\n    // We can't sell at the first time, since we must buy first,\n    // and we can't buy and sell at the same time!\n    // If we started at index 0, we'd try to buy *and* sell at time 0.\n    // This would give a profit of 0, which is a problem if our\n    // maxProfit is supposed to be *negative*--we'd return 0.\n    for (int i = 1; i &lt; stockPrices.Length; i++)\n    {\n        int currentPrice = stockPrices[i];\n\n        // See what our profit would be if we bought at the\n        // min price and sold at the current price\n        int potentialProfit = currentPrice - minPrice;\n\n        // Update maxProfit if we can do better\n        maxProfit = Math.Max(maxProfit, potentialProfit);\n\n        // Update minPrice so it's always\n        // the lowest price we've seen so far\n        minPrice = Math.Min(minPrice, currentPrice);\n    }\n\n    return maxProfit;\n}", "tests": "for (int i = 0; i < positiveTestInputs.Length; i++)\n{\n    AssertEqual(GetMaxProfit(positiveTestInputs[i]), positiveTestOutputs[i]);\n}\n\nfor (int i = 0; i < negativeTestInputs.Length; i++)\n{\n    AssertEqual(GetMaxProfit(negativeTestInputs[i]), negativeTestOutputs[i]);\n}\n\nAssertRaisesError(() => GetMaxProfit(new[]{7}), \"An array with 1 element\", \"requires at least 2 prices\");\nAssertRaisesError(() => GetMaxProfit(new int[0]), \"An empty array\", \"requires at least 2 prices\");", "actual_language": "csharp"}, "python": {"code": "def get_max_profit(stock_prices):\n    if len(stock_prices) &lt; 2:\n        raise ValueError('Getting a profit requires at least 2 prices')\n\n    # We'll greedily update min_price and max_profit, so we initialize\n    # them to the first price and the first possible profit\n    min_price  = stock_prices[0]\n    max_profit = stock_prices[1] - stock_prices[0]\n\n    # Start at the second (index 1) time\n    # We can't sell at the first time, since we must buy first,\n    # and we can't buy and sell at the same time!\n    # If we started at index 0, we'd try to buy *and* sell at time 0.\n    # This would give a profit of 0, which is a problem if our\n    # max_profit is supposed to be *negative*--we'd return 0.\n    for current_time in xrange(1, len(stock_prices)):\n        current_price = stock_prices[current_time]\n\n        # See what our profit would be if we bought at the\n        # min price and sold at the current price\n        potential_profit = current_price - min_price\n\n        # Update max_profit if we can do better\n        max_profit = max(max_profit, potential_profit)\n\n        # Update min_price so it's always\n        # the lowest price we've seen so far\n        min_price  = min(min_price, current_price)\n\n    return max_profit", "tests": "test(positive_tests)\ntest(negative_tests)\n\ndef pass_one_price():\n    get_max_profit([1])\n\ndef pass_empty_array():\n    get_max_profit([])\n\nassertRaisesError(pass_one_price, 'An array with 1 element', 'requires at least 2 prices')\nassertRaisesError(pass_empty_array, 'An empty array', 'requires at least 2 prices')", "actual_language": "python"}, "ruby": {"code": "def get_max_profit(stock_prices)\n  if stock_prices.length &lt; 2\n    raise ArgumentError, 'Getting a profit requires at least 2 prices'\n  end\n\n  # we'll greedily update min_price and max_profit, so we initialize\n  # them to the first price and the first possible profit\n  min_price = stock_prices[0]\n  max_profit = stock_prices[1] - stock_prices[0]\n\n  stock_prices.each_with_index do |current_price, index|\n\n    # skip the first time, since we already used it\n    # when we initialized min_price and max_profit\n    next if index.zero?\n\n    # see what our profit would be if we bought at the\n    # min price and sold at the current price\n    potential_profit = current_price - min_price\n\n    # update max_profit if we can do better\n    max_profit = [max_profit, potential_profit].max\n\n    # update min_price so it's always\n    # the lowest price we've seen so far\n    min_price  = [min_price, current_price].min\n  end\n\n  max_profit\nend", "tests": "test(positive_tests)\ntest(negative_tests)\n\ndef pass_one_price\n  get_max_profit([1])\nend\n\ndef pass_empty_array\n  get_max_profit([])\nend\n\nassertRaisesError(method(:pass_one_price), 'An array with 1 element', 'requires at least 2 prices')\nassertRaisesError(method(:pass_empty_array), 'An empty array', 'requires at least 2 prices')", "actual_language": "ruby"}, "cpp": {"code": "int getMaxProfit(const vector&lt;int>& stockPrices)\n{\n    if (stockPrices.size() &lt; 2) {\n        throw invalid_argument(\"Getting a profit requires at least 2 prices\");\n    }\n\n    // we'll greedily update minPrice and maxProfit, so we initialize\n    // them to the first price and the first possible profit\n    int minPrice = stockPrices[0];\n    int maxProfit = stockPrices[1] - stockPrices[0];\n\n    // start at the second (index 1) time\n    // we can't sell at the first time, since we must buy first,\n    // and we can't buy and sell at the same time!\n    // if we started at index 0, we'd try to buy *and* sell at time 0.\n    // this would give a profit of 0, which is a problem if our\n    // maxProfit is supposed to be *negative*--we'd return 0.\n    for (size_t i = 1; i &lt; stockPrices.size(); ++i) {\n        int currentPrice = stockPrices[i];\n\n        // see what our profit would be if we bought at the\n        // min price and sold at the current price\n        int potentialProfit = currentPrice - minPrice;\n\n        // update maxProfit if we can do better\n        maxProfit = max(maxProfit, potentialProfit);\n\n        // update minPrice so it's always\n        // the lowest price we've seen so far\n        minPrice = min(minPrice, currentPrice);\n    }\n\n    return maxProfit;\n}", "tests": "for (size_t i = 0; i < positiveTestInputs.size(); ++i) {\n    assertEqual(getMaxProfit(positiveTestInputs[i]), positiveTestOutputs[i]);\n}\n\nfor (size_t i = 0; i < negativeTestInputs.size(); ++i) {\n    assertEqual(getMaxProfit(negativeTestInputs[i]), negativeTestOutputs[i]);\n}\n\n// test on empty vector\n{\n    vector<int> v0;\n    assertRaisesError<invalid_argument>(\"empty input vector\", &getMaxProfit, v0);\n}\n\n// test on vector with 1 element\n{\n    vector<int> v1{7};\n    assertRaisesError<invalid_argument>(\"input vector with one element\", &getMaxProfit, v1);\n}", "actual_language": "cpp"}, "php": {"code": "function getMaxProfit($stockPrices)\n{\n    if (count($stockPrices) &lt; 2) {\n        throw new InvalidArgumentException('Getting a profit requires at least 2 prices');\n    }\n\n    // we'll greedily update minPrice and maxProfit, so we initialize\n    // them to the first price and the first possible profit\n    $minPrice = $stockPrices[0];\n    $maxProfit = $stockPrices[1] - $stockPrices[0];\n\n    // start at the second (index 1) time\n    // we can't sell at the first time, since we must buy first,\n    // and we can't buy and sell at the same time!\n    // if we started at index 0, we'd try to buy *and* sell at time 0.\n    // this would give a profit of 0, which is a problem if our\n    // maxProfit is supposed to be *negative*--we'd return 0.\n    for ($i = 1; $i &lt; count($stockPrices); $i++) {\n        $currentPrice = $stockPrices[$i];\n\n        // see what our profit would be if we bought at the\n        // min price and sold at the current price\n        $potentialProfit = $currentPrice - $minPrice;\n\n        // update maxProfit if we can do better\n        $maxProfit = max($maxProfit, $potentialProfit);\n\n        // update minPrice so it's always\n        // the lowest price we've seen so far\n        $minPrice = min($minPrice, $currentPrice);\n    }\n\n    return $maxProfit;\n}", "tests": "test($positiveTests);\ntest($negativeTests);\n\nfunction passOnePrice() {\n    getMaxProfit([1]);\n}\n\nfunction passEmptyArray() {\n    getMaxProfit([]);\n}\n\nassertRaisesError('passOnePrice', 'An array with 1 element', 'requires at least 2 prices');\nassertRaisesError('passEmptyArray', 'An empty array', 'requires at least 2 prices');", "actual_language": "php"}, "java": {"code": "public static int getMaxProfit(int[] stockPrices) {\n\n    if (stockPrices.length &lt; 2) {\n        throw new IllegalArgumentException(\"Getting a profit requires at least 2 prices\");\n    }\n\n    // we'll greedily update minPrice and maxProfit, so we initialize\n    // them to the first price and the first possible profit\n    int minPrice = stockPrices[0];\n    int maxProfit = stockPrices[1] - stockPrices[0];\n\n    // start at the second (index 1) time\n    // we can't sell at the first time, since we must buy first,\n    // and we can't buy and sell at the same time!\n    // if we started at index 0, we'd try to buy *and* sell at time 0.\n    // this would give a profit of 0, which is a problem if our\n    // maxProfit is supposed to be *negative*--we'd return 0.\n    for (int i = 1; i &lt; stockPrices.length; i++) {\n        int currentPrice = stockPrices[i];\n\n        // see what our profit would be if we bought at the\n        // min price and sold at the current price\n        int potentialProfit = currentPrice - minPrice;\n\n        // update maxProfit if we can do better\n        maxProfit = Math.max(maxProfit, potentialProfit);\n\n        // update minPrice so it's always\n        // the lowest price we've seen so far\n        minPrice = Math.min(minPrice, currentPrice);\n    }\n\n    return maxProfit;\n}", "tests": "for (int i = 0; i < positiveTestInputs.length; i++) {\n    assertEqual(getMaxProfit(positiveTestInputs[i]), positiveTestOutputs[i]);\n}\n\nfor (int i = 0; i < negativeTestInputs.length; i++) {\n    assertEqual(getMaxProfit(negativeTestInputs[i]), negativeTestOutputs[i]);\n}\n\nassertRaisesError(() -> getMaxProfit(new int[]{7}), \"An array with 1 element\", \"requires at least 2 prices\");\nassertRaisesError(() -> getMaxProfit(new int[0]), \"An empty array\", \"requires at least 2 prices\");", "actual_language": "java"}, "c": {"code": "#define MAX(a, b) (((a) > (b)) ? (a) : (b))\n#define MIN(a, b) (((a) &lt; (b)) ? (a) : (b))\n\nint getMaxProfit(const int *stockPrices, size_t length)\n{\n    int minPrice, maxProfit;\n    size_t i;\n\n    // make sure we have at least 2 prices\n    assert(length >= 2);\n\n    // we'll greedily update minPrice and maxProfit, so we initialize\n    // them to the first price and the first possible profit\n    minPrice = stockPrices[0];\n    maxProfit = stockPrices[1] - stockPrices[0];\n\n    // start at the second (index 1) time\n    // we can't sell at the first time, since we must buy first,\n    // and we can't buy and sell at the same time!\n    // if we started at index 0, we'd try to buy *and* sell at time 0.\n    // this would give a profit of 0, which is a problem if our\n    // maxProfit is supposed to be *negative*--we'd return 0.\n    for (i = 1; i &lt; length; i++) {\n        int currentPrice = stockPrices[i];\n\n        // see what our profit would be if we bought at the\n        // min price and sold at the current price\n        int potentialProfit = currentPrice - minPrice;\n\n        // update maxProfit if we can do better\n        maxProfit = MAX(maxProfit, potentialProfit);\n\n        // update minPrice so it's always\n        // the lowest price we've seen so far\n        minPrice = MIN(minPrice, currentPrice);\n    }\n\n    return maxProfit;\n}", "tests": "{\n    int i;\n    for (i = 0; i < 3; i++) {\n        testInputAndOutput((const int *)postitiveTestInputs[i], postitiveTestLengths[i],\n                           positiveTestOutputs[i], getMaxProfit);\n    }\n\n    for (i = 0; i < 3; i++) {\n        testInputAndOutput((const int *)negativeTestInputs[i], negativeTestLengths[i],\n                           negativeTestOutputs[i], getMaxProfit);\n    }\n\n    // Test empty input\n    const int array[] = { 1 };\n    ASSERT_RAISES(getMaxProfit(array, 0));\n\n    // Test 1 input\n    ASSERT_RAISES(getMaxProfit(array, 1));\n}", "actual_language": "c"}}}, "words": {"question__stock-price__using-namespace-std": {"swift": "", "javascript": "", "objectivec": "", "cpp": "<p class=\"aside\">\n                    In our C++ code, we assume we're <span code-inline=\"question__stock-price__using-namespace-std\">using namespace std</span>.\n                    Interviewers will commonly expect this when you're writing on a whiteboard because\n                    it simplifies your code. <strong>But it's not good practice in production</strong>&#8212;it\n                    floods the global namespace with things we don't need.\n                </p>", "default": "\n", "csharp": "", "ruby": "", "python": "", "php": "", "java": "", "c": ""}, "question__stock-price__error-requires-two-prices-text": {"swift": "We could <span words=\"question__stock-price__throw-an-error\">throw an error</span> in that case, or we use Swift's optional return values to just return nil. The second way is a bit more common, so let's do that:", "javascript": "We <em>do</em> want to <span words=\"question__stock-price__throw-an-error\">throw an exception</span> in that case, since <em>profit</em> requires buying <em>and</em> selling, which we can't do with less than 2 prices. So, let's explicitly check for this case and handle it:", "objectivec": "We <em>do</em> want to <span words=\"question__stock-price__throw-an-error\">throw an exception</span> in that case, since <em>profit</em> requires buying <em>and</em> selling, which we can't do with less than 2 prices. So, let's explicitly check for this case and handle it:", "cpp": "We <em>do</em> want to <span words=\"question__stock-price__throw-an-error\">throw an exception</span> in that case, since <em>profit</em> requires buying <em>and</em> selling, which we can't do with less than 2 prices. So, let's explicitly check for this case and handle it:", "default": "We <em>do</em> want to <span words=\"throw-an-error\"/> in that case, since <em>profit</em> requires buying <em>and</em> selling, which we can't do with less than 2 prices. So, let's explicitly check for this case and handle it:", "csharp": "We <em>do</em> want to <span words=\"question__stock-price__throw-an-error\">throw an exception</span> in that case, since <em>profit</em> requires buying <em>and</em> selling, which we can't do with less than 2 prices. So, let's explicitly check for this case and handle it:", "ruby": "We <em>do</em> want to <span words=\"question__stock-price__throw-an-error\">raise an exception</span> in that case, since <em>profit</em> requires buying <em>and</em> selling, which we can't do with less than 2 prices. So, let's explicitly check for this case and handle it:", "python": "We <em>do</em> want to <span words=\"question__stock-price__throw-an-error\">raise an exception</span> in that case, since <em>profit</em> requires buying <em>and</em> selling, which we can't do with less than 2 prices. So, let's explicitly check for this case and handle it:", "php": "We <em>do</em> want to <span words=\"question__stock-price__throw-an-error\">throw an exception</span> in that case, since <em>profit</em> requires buying <em>and</em> selling, which we can't do with less than 2 prices. So, let's explicitly check for this case and handle it:", "java": "We <em>do</em> want to <span words=\"question__stock-price__throw-an-error\">throw an exception</span> in that case, since <em>profit</em> requires buying <em>and</em> selling, which we can't do with less than 2 prices. So, let's explicitly check for this case and handle it:", "c": "We <em>do</em> want to <span words=\"question__stock-price__throw-an-error\">abort</span> in that case, since <em>profit</em> requires buying <em>and</em> selling, which we can't do with less than 2 prices. So, let's explicitly check for this case and handle it:"}, "question__stock-price__out-of-bounds-result": {"swift": "an \"index out of range\" error", "javascript": "reading undefined values", "objectivec": "an index out of bounds error", "csharp": "an <span code-inline=\"question__stock-price__index-out-of-range-exception\">IndexOutOfRangeException</span>", "python": "an index out of bounds error", "default": "an index out of bounds error", "ruby": "reading nil values", "cpp": "undefined behavior", "php": "an index out of bounds error", "java": "an <span code-inline=\"question__stock-price__array-index-out-of-bounds-exception\">ArrayIndexOutOfBoundsException</span>", "c": "undefined behavior"}, "question__stock-price__standard-list": {"swift": "array", "javascript": "array", "objectivec": "array", "csharp": "array", "cpp": "vector", "ruby": "array", "python": "list", "c": "array", "php": "array", "default": "list", "java": "array"}, "question__stock-price__null-pointer-check": {"swift": "", "javascript": "", "objectivec": "", "cpp": "", "default": "\n", "csharp": "", "ruby": "", "python": "", "php": "", "java": "", "c": "<div class=\"aside\">\n<p>\n                        What\n                        if <span var=\"question__stock-price__stock-prices\">stockPrices</span>\n                        is <span var=\"question__stock-price__null\">NULL</span>? Then we'd\n                        segfault.\n                    </p>\n<p>\n                        In a coding interview, you\n                        can <em>usually</em> assume your inputs will\n                        be valid. That's what we do in our C code.\n                    </p>\n<p>\n                        But if you're unsure, it can't hurt to ask\n                        your interviewer what they're\n                        expecting. We <em>could</em> add checks to\n                        handle this&#8212;and you'd definitely want\n                        them in production.\n                    </p>\n</div>"}, "question__stock-price__function": {"swift": "function", "javascript": "function", "objectivec": "function", "csharp": "method", "default": "function", "ruby": "method", "python": "function", "php": "function", "java": "method", "c": "function", "cpp": "function"}, "question__stock-price__thrown-an-error": {"swift": "thrown an exception", "javascript": "thrown an exception", "objectivec": "thrown an exception", "cpp": "thrown an exception", "default": "thrown an exception", "csharp": "thrown an exception", "ruby": "raised an exception", "python": "raised an exception", "php": "thrown an exception", "java": "thrown an exception", "c": "aborted"}, "question__stock-price__throw-an-error": {"swift": "throw an error", "javascript": "throw an exception", "objectivec": "throw an exception", "cpp": "throw an exception", "default": "throw an exception", "csharp": "throw an exception", "ruby": "raise an exception", "python": "raise an exception", "php": "throw an exception", "java": "throw an exception", "c": "abort"}, "question__stock-price__a-standard-list": {"swift": "an array", "javascript": "an array", "objectivec": "an array", "csharp": "an array", "cpp": "a vector", "ruby": "an array", "python": "a list", "c": "an array", "php": "an array", "default": "a list", "java": "an array"}}};
            //
            var codeTypes = ['words', 'code-blocks', 'vars', 'funcs', 'code-inlines'];

            var mergeObjects = function(objectA, objectB) {
                objectA = objectA || {};
                objectB = objectB || {};
                for (var key in objectB) {
                    objectA[key] = objectB[key];
                }
                return objectA;
            }

            if (!window.contentTranslations) {
                window.contentTranslations = elTranslations;
            } else {
                for (var i=0; i<codeTypes.length; i++) {
                    window.contentTranslations[codeTypes[i]] = mergeObjects(window.contentTranslations[codeTypes[i]], elTranslations[codeTypes[i]]);
                }
            }
            window.editorTemplates = {"swift": "func getMaxProfit(from stockPricesYesterday: [Int]) -> Int? {\n\n    // calculate the max profit\n\n\n    return nil\n}\n\n\n// tests\n\nimport XCTest\n\nclass Tests: XCTestCase {\n\n    func testPriceGoesUpThenDown() {\n        let actual = getMaxProfit(from: [1, 5, 3, 2])\n        let expected = 4\n        XCTAssertEqual(actual, expected)\n    }\n\n    func testPriceGoesDownThenUp() {\n        let actual = getMaxProfit(from: [7, 2, 8, 9])\n        let expected = 7\n        XCTAssertEqual(actual, expected)\n    }\n\n    func testPriceGoesUpAllDay() {\n        let actual = getMaxProfit(from: [1, 6, 7, 9])\n        let expected = 8\n        XCTAssertEqual(actual, expected)\n    }\n\n    func testPriceGoesDownAllDay() {\n        let actual = getMaxProfit(from: [9, 7, 4, 1])\n        let expected = -2\n        XCTAssertEqual(actual, expected)\n    }\n\n    func testPriceStaysTheSameAllDay() {\n        let actual = getMaxProfit(from: [1, 1, 1, 1])\n        let expected = 0\n        XCTAssertEqual(actual, expected)\n    }\n\n    func testReturnNilWithEmptyPrices() {\n        let actual = getMaxProfit(from: [])\n        XCTAssertNil(actual)\n    }\n\n    func testReturnNillWithOnePrice() {\n        let actual = getMaxProfit(from: [1])\n        XCTAssertNil(actual)\n    }\n\n    static let allTests = [\n        (\"testPriceGoesUpThenDown\", testPriceGoesUpThenDown),\n        (\"testPriceGoesDownThenUp\", testPriceGoesDownThenUp),\n        (\"testPriceGoesUpAllDay\", testPriceGoesUpAllDay),\n        (\"testPriceGoesDownAllDay\", testPriceGoesDownAllDay),\n        (\"testPriceStaysTheSameAllDay\", testPriceStaysTheSameAllDay),\n        (\"testReturnNilWithEmptyPrices\", testReturnNilWithEmptyPrices),\n        (\"testReturnNillWithOnePrice\", testReturnNillWithOnePrice)\n    ]\n}\n\nXCTMain([testCase(Tests.allTests)])", "php": "function getMaxProfit($stockPrices)\n{\n    // calculate the max profit\n\n\n    return 0;\n}\n\n\n// tests\n\n$desc = 'price goes up then down';\n$actual = getMaxProfit([1, 5, 3, 2]);\n$expected = 4;\nassertEqual($actual, $expected, $desc);\n\n$desc = 'price goes down then up';\n$actual = getMaxProfit([7, 2, 8, 9]);\n$expected = 7;\nassertEqual($actual, $expected, $desc);\n\n$desc = 'price goes up all day';\n$actual = getMaxProfit([1, 6, 7, 9]);\n$expected = 8;\nassertEqual($actual, $expected, $desc);\n\n$desc = 'price goes down all day';\n$actual = getMaxProfit([9, 7, 4, 1]);\n$expected = -2;\nassertEqual($actual, $expected, $desc);\n\n$desc = 'price stays the same all day';\n$actual = getMaxProfit([1, 1, 1, 1]);\n$expected = 0;\nassertEqual($actual, $expected, $desc);\n\n$desc = 'exception with empty prices';\n$emptyArray = function() {\n    getMaxProfit([]);\n};\nassertThrowsException($emptyArray, $desc);\n\n$desc = 'exception with one price';\n$onePrice = function() {\n    getMaxProfit([1]);\n};\nassertThrowsException($onePrice, $desc);\n\nfunction assertEqual($a, $b, $desc)\n{\n    if ($a === $b) {\n        echo \"$desc ... PASS\\n\";\n    } else {\n        echo \"$desc ... FAIL: $a != $b\\n\";\n    }\n}\n\nfunction assertThrowsException($func, $desc)\n{\n    try {\n        $func();\n        echo \"$desc ... FAIL\\n\";\n    } catch (Exception $e) {\n        echo \"$desc ... PASS\\n\";\n    }\n}", "objectivec": "// Code run in our editor is compiled with GNUStep\n\n#import <Foundation/Foundation.h>\n\n#undef NSCAssert\nvoid NSCAssert(BOOL expr, NSString *message, ...);\n\nNSNumber *ICKGetMaxProfit(NSArray<NSNumber *> *stockPrices) {\n\n    // calculate the max profit\n\n\n    return @0;\n}\n\n\n// tests\n\nvoid assertEquals(NSNumber *actual, NSNumber *expected, SEL test);\nvoid assertAssertionFails(void(^block)(void), SEL test);\n\n@interface Tests : NSObject\n@end\n\n@implementation Tests\n\n-(void)testPriceGoesUpThenDown {\n    NSNumber *actual = ICKGetMaxProfit(@[@1, @5, @3, @2]);\n    NSNumber *expected = @4;\n    assertEquals(actual, expected, _cmd);\n}\n\n-(void)testPriceGoesDownThenUp {\n    NSNumber *actual = ICKGetMaxProfit(@[@7, @2, @8, @9]);\n    NSNumber *expected = @7;\n    assertEquals(actual, expected, _cmd);\n}\n\n-(void)testPriceGoesUpAllDay {\n    NSNumber *actual = ICKGetMaxProfit(@[@1, @6, @7, @9]);\n    NSNumber *expected = @8;\n    assertEquals(actual, expected, _cmd);\n}\n\n-(void)testPriceGoesDownAllDay {\n    NSNumber *actual = ICKGetMaxProfit(@[@9, @7, @4, @1]);\n    NSNumber *expected = @-2;\n    assertEquals(actual, expected, _cmd);\n}\n\n-(void)testPriceStaysTheSameAllDay {\n    NSNumber *actual = ICKGetMaxProfit(@[@1, @1, @1, @1]);\n    NSNumber *expected = @0;\n    assertEquals(actual, expected, _cmd);\n}\n\n-(void)testAssertionFailsWithEmptyPrices {\n    assertAssertionFails(^{ ICKGetMaxProfit(@[]); }, _cmd);\n}\n\n-(void)testAssertionFailsWithOnePrice {\n    assertAssertionFails(^{ ICKGetMaxProfit(@[@1]); }, _cmd);\n}\n\n@end\n\nint main(int argc, const char * argv[]) {\n    Tests *tests = [Tests new];\n    [tests testPriceGoesUpThenDown];\n    [tests testPriceGoesDownThenUp];\n    [tests testPriceGoesUpAllDay];\n    [tests testPriceGoesDownAllDay];\n    [tests testPriceStaysTheSameAllDay];\n    [tests testAssertionFailsWithEmptyPrices];\n    [tests testAssertionFailsWithOnePrice];\n\n    return 0;\n}\n\nvoid assertEquals(NSNumber *actual, NSNumber *expected, SEL test) {\n    NSString *testName = NSStringFromSelector(test);\n    if ([expected isEqualToNumber:actual]) {\n        NSLog(@\"%-33@ ... PASS\", testName);\n    }\n    else {\n        NSLog(@\"%-33@ ... FAIL: expected <%@> but was <%@>\", testName, expected, actual);\n    }\n}\n\nvoid assertAssertionFails(void(^block)(void), SEL test) {\n    NSString *testName = NSStringFromSelector(test);\n    @try {\n        block();\n        NSLog(@\"%-33@ ... FAIL: assertion failure expected\", testName);\n    }\n    @catch (NSException *exception) {\n        NSLog(@\"%-33@ ... PASS\", testName);\n    }\n}\n\nvoid NSCAssert(BOOL expr, NSString *message, ...) {\n    if (!expr) {\n        va_list args;\n        va_start(args, message);\n        NSString *formattedMessage = [NSString stringWithFormat:(message), args];\n        va_end(args);\n\n        @throw [NSException exceptionWithName:NSInternalInconsistencyException\n                                       reason:formattedMessage\n                                     userInfo:nil];\n    }\n}", "csharp": "using System;\n\npublic class Solution\n{\n    public static int GetMaxProfit(int[] stockPrices)\n    {\n        // Calculate the max profit\n\n\n        return 0;\n    }\n\n\n    // Tests\n\n    [Fact]\n    public void PriceGoesUpThenDownTest()\n    {\n        var actual = GetMaxProfit(new int[] { 1, 5, 3, 2 });\n        var expected = 4;\n        Assert.Equal(expected, actual);\n    }\n\n    [Fact]\n    public void PriceGoesDownThenUpTest()\n    {\n        var actual = GetMaxProfit(new int[] { 7, 2, 8, 9 });\n        var expected = 7;\n        Assert.Equal(expected, actual);\n    }\n\n    [Fact]\n    public void PriceGoesUpAllDayTest()\n    {\n        var actual = GetMaxProfit(new int[] { 1, 6, 7, 9 });\n        var expected = 8;\n        Assert.Equal(expected, actual);\n    }\n\n    [Fact]\n    public void PriceGoesDownAllDayTest()\n    {\n        var actual = GetMaxProfit(new int[] { 9, 7, 4, 1 });\n        var expected = -2;\n        Assert.Equal(expected, actual);\n    }\n\n    [Fact]\n    public void PriceStaysTheSameAllDayTest()\n    {\n        var actual = GetMaxProfit(new int[] { 1, 1, 1, 1 });\n        var expected = 0;\n        Assert.Equal(expected, actual);\n    }\n\n    [Fact]\n    public void ExceptionWithOnePriceTest()\n    {\n        Assert.Throws<ArgumentException>(() => GetMaxProfit(new int[] { 5 }));\n    }\n\n    [Fact]\n    public void ExceptionWithEmptyPricesTest()\n    {\n        Assert.Throws<ArgumentException>(() => GetMaxProfit(new int[] { }));\n    }\n\n    public static void Main(string[] args)\n    {\n        TestRunner.RunTests(typeof(Solution));\n    }\n}", "python": "def get_max_profit(stock_prices):\n\n    # Calculate the max profit\n\n\n    return 0\n\n\n# Tests\n\nimport unittest\n\nclass Test(unittest.TestCase):\n\n    def test_price_goes_up_then_down(self):\n        actual = get_max_profit([1, 5, 3, 2])\n        expected = 4\n        self.assertEqual(actual, expected)\n\n    def test_price_goes_down_then_up(self):\n        actual = get_max_profit([7, 2, 8, 9])\n        expected = 7\n        self.assertEqual(actual, expected)\n\n    def test_price_goes_up_all_day(self):\n        actual = get_max_profit([1, 6, 7, 9])\n        expected = 8\n        self.assertEqual(actual, expected)\n\n    def test_price_goes_down_all_day(self):\n        actual = get_max_profit([9, 7, 4, 1])\n        expected = -2\n        self.assertEqual(actual, expected)\n\n    def test_price_stays_the_same_all_day(self):\n        actual = get_max_profit([1, 1, 1, 1])\n        expected = 0\n        self.assertEqual(actual, expected)\n\n    def test_error_with_empty_prices(self):\n        with self.assertRaises(Exception):\n            get_max_profit([])\n\n    def test_error_with_one_price(self):\n        with self.assertRaises(Exception):\n            get_max_profit([1])\n\n\nunittest.main(verbosity=2)", "ruby": "def get_max_profit(stock_prices)\n\n  # Calculate the max profit.\n\n\n  return 0\nend\n\n\n# tests\n\ndef run_tests\n  desc = 'price goes up then down'\n  actual = get_max_profit([1, 5, 3, 2])\n  expected = 4\n  assert_equal(actual, expected, desc)\n\n  desc = 'price goes down then up'\n  actual = get_max_profit([7, 2, 8, 9])\n  expected = 7\n  assert_equal(actual, expected, desc)\n\n  desc = 'price goes up all day'\n  actual = get_max_profit([1, 6, 7, 9])\n  expected = 8\n  assert_equal(actual, expected, desc)\n\n  desc = 'price goes down all day'\n  actual = get_max_profit([9, 7, 4, 1])\n  expected = -2\n  assert_equal(actual, expected, desc)\n\n  desc = 'price stays the same all day'\n  actual = get_max_profit([1, 1, 1, 1])\n  expected = 0\n  assert_equal(actual, expected, desc)\n\n  desc = 'error with empty prices'\n  assert_raises(desc) {\n    get_max_profit([])\n  }\n\n  desc = 'error with one price'\n  assert_raises(desc) {\n    get_max_profit([1])\n  }\nend\n\ndef assert_equal(a, b, desc)\n  if a == b\n    puts \"#{desc} ... PASS\"\n  else\n    puts \"#{desc} ... FAIL: #{a} != #{b}\"\n  end\nend\n\ndef assert_raises(desc)\n  begin\n    yield\n    puts \"#{desc} ... FAIL\"\n  rescue\n    puts \"#{desc} ... PASS\"\n  end\nend\n\nrun_tests()", "cpp": "#include <iostream>\n#include <vector>\n\n// C++11 lest unit testing framework\n#include \"lest.hpp\"\n\nusing namespace std;\n\nint getMaxProfit(const vector<int>& stockPrices)\n{\n    // calculate the max profit\n\n\n    return 0;\n}\n\n\n// tests\n\nconst lest::test tests[] = {\n    CASE(\"price goes up then down\") {\n        const int actual = getMaxProfit({1, 5, 3, 2});\n        const int expected = 4;\n        EXPECT(actual == expected);\n    },\n\n    CASE(\"price goes down then up\") {\n        const int actual = getMaxProfit({7, 2, 8, 9});\n        const int expected = 7;\n        EXPECT(actual == expected);\n    },\n\n    CASE(\"price goes up all day\") {\n        const int actual = getMaxProfit({1, 6, 7, 9});\n        const int expected = 8;\n        EXPECT(actual == expected);\n    },\n\n    CASE(\"price goes down all day\") {\n        const int actual = getMaxProfit({9, 7, 4, 1});\n        const int expected = -2;\n        EXPECT(actual == expected);\n    },\n\n    CASE(\"price stays the same all day\") {\n        const int actual = getMaxProfit({1, 1, 1, 1});\n        const int expected = 0;\n        EXPECT(actual == expected);\n    },\n\n    CASE(\"exception with empty prices\") {\n        EXPECT_THROWS(getMaxProfit({}));\n    },\n\n    CASE(\"exception with one price\") {\n        EXPECT_THROWS(getMaxProfit({1}));\n    },\n};\n\nint main(int argc, char** argv)\n{\n    return lest::run(tests, argc, argv);\n}", "javascript": "function getMaxProfit(stockPrices) {\n\n  // Calculate the max profit\n\n\n  return 0;\n}\n\n\n// Tests\n\nlet desc = 'price goes up then down';\nlet actual = getMaxProfit([1, 5, 3, 2]);\nlet expected = 4;\nassertEqual(actual, expected, desc);\n\ndesc = 'price goes down then up';\nactual = getMaxProfit([7, 2, 8, 9]);\nexpected = 7;\nassertEqual(actual, expected, desc);\n\ndesc = 'price goes up all day';\nactual = getMaxProfit([1, 6, 7, 9]);\nexpected = 8;\nassertEqual(actual, expected, desc);\n\ndesc = 'price goes down all day';\nactual = getMaxProfit([9, 7, 4, 1]);\nexpected = -2;\nassertEqual(actual, expected, desc);\n\ndesc = 'price stays the same all day';\nactual = getMaxProfit([1, 1, 1, 1]);\nexpected = 0;\nassertEqual(actual, expected, desc);\n\ndesc = 'error with empty prices';\nconst emptyArray = () => (getMaxProfit([]));\nassertThrowsError(emptyArray, desc);\n\ndesc = 'error with one price';\nconst onePrice = () => (getMaxProfit([1]));\nassertThrowsError(onePrice, desc);\n\nfunction assertEqual(a, b, desc) {\n  if (a === b) {\n    console.log(`${desc} ... PASS`);\n  } else {\n    console.log(`${desc} ... FAIL: ${a} != ${b}`);\n  }\n}\n\nfunction assertThrowsError(func, desc) {\n  try {\n    func();\n    console.log(`${desc} ... FAIL`);\n  } catch (e) {\n    console.log(`${desc} ... PASS`);\n  }\n}", "java": "import org.junit.Test;\nimport org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\nimport static org.junit.Assert.*;\n\npublic class Solution {\n\n    public static int getMaxProfit(int[] stockPrices) {\n\n        // calculate the max profit\n\n\n        return 0;\n    }\n\n\n    // tests\n\n    @Test\n    public void priceGoesUpThenDownTest() {\n        final int actual = getMaxProfit(new int[] {1, 5, 3, 2});\n        final int expected = 4;\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void priceGoesDownThenUpTest() {\n        final int actual = getMaxProfit(new int[] {7, 2, 8, 9});\n        final int expected = 7;\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void priceGoesUpAllDayTest() {\n        final int actual = getMaxProfit(new int[] {1, 6, 7, 9});\n        final int expected = 8;\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void priceGoesDownAllDayTest() {\n        final int actual = getMaxProfit(new int[] {9, 7, 4, 1});\n        final int expected = -2;\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void priceStaysTheSameAllDayTest() {\n        final int actual = getMaxProfit(new int[] {1, 1, 1, 1});\n        final int expected = 0;\n        assertEquals(expected, actual);\n    }\n\n    @Test(expected = Exception.class)\n    public void exceptionWithOnePriceTest() {\n        getMaxProfit(new int[] {5});\n    }\n\n    @Test(expected = Exception.class)\n    public void exceptionWithEmptyPricesTest() {\n        getMaxProfit(new int[] {});\n    }\n\n    public static void main(String[] args) {\n        Result result = JUnitCore.runClasses(Solution.class);\n        for (Failure failure : result.getFailures()) {\n            System.out.println(failure.toString());\n        }\n        if (result.wasSuccessful()) {\n            System.out.println(\"All tests passed.\");\n        }\n    }\n}", "c": "#include <assert.h>\n#include <stdio.h>\n\n// Interview Cake C Unit Test Framework, based on CuTest\n#include \"Cake/UnitTest.h\"\n\nint getMaxProfit(const int *stockPrices, size_t length)\n{\n    // calculate the max profit\n\n\n    return 0;\n}\n\n\n// tests\n\n#define countof(a) (sizeof(a)/sizeof((a)[0]))\n\nvoid priceGoesUpThenDownTest(Test *tc)\n{\n    const int stockPrices[] = {1, 5, 3, 2};\n    const int actual = getMaxProfit(stockPrices, countof(stockPrices));\n    const int expected = 4;\n    AssertIntEquals(tc, expected, actual);\n}\n\nvoid priceGoesDownThenUpTest(Test *tc)\n{\n    const int stockPrices[] = {7, 2, 8, 9};\n    const int actual = getMaxProfit(stockPrices, countof(stockPrices));\n    const int expected = 7;\n    AssertIntEquals(tc, expected, actual);\n}\n\nvoid priceGoesUpAllDayTest(Test *tc)\n{\n    const int stockPrices[] = {1, 6, 7, 9};\n    const int actual = getMaxProfit(stockPrices, countof(stockPrices));\n    const int expected = 8;\n    AssertIntEquals(tc, expected, actual);\n}\n\nvoid priceGoesDownAllDayTest(Test *tc)\n{\n    const int stockPrices[] = {9, 7, 4, 1};\n    const int actual = getMaxProfit(stockPrices, countof(stockPrices));\n    const int expected = -2;\n    AssertIntEquals(tc, expected, actual);\n}\n\nvoid priceStaysTheSameAllDayTest(Test *tc)\n{\n    const int stockPrices[] = {1, 1, 1, 1};\n    const int actual = getMaxProfit(stockPrices, countof(stockPrices));\n    const int expected = 0;\n    AssertIntEquals(tc, expected, actual);\n}\n\nvoid callWithEmptyPrices(void)\n{\n    getMaxProfit(NULL, 0);\n}\n\nvoid assertionFailsWithEmptyPricesTest(Test *tc)\n{\n    AssertRaises(tc, callWithEmptyPrices);\n}\n\nvoid callWithOnePrice(void)\n{\n    const int stockPrices[] = {1};\n    getMaxProfit(stockPrices, countof(stockPrices));\n}\n\nvoid assertionFailsWithOnePriceTest(Test *tc)\n{\n    AssertRaises(tc, callWithOnePrice);\n}\n\nint main()\n{\n    TestSuite *tests = TestSuiteNew();\n\n    SUITE_ADD_TEST(tests, priceGoesUpThenDownTest);\n    SUITE_ADD_TEST(tests, priceGoesDownThenUpTest);\n    SUITE_ADD_TEST(tests, priceGoesUpAllDayTest);\n    SUITE_ADD_TEST(tests, priceGoesDownAllDayTest);\n    SUITE_ADD_TEST(tests, priceStaysTheSameAllDayTest);\n    SUITE_ADD_TEST(tests, assertionFailsWithEmptyPricesTest);\n    SUITE_ADD_TEST(tests, assertionFailsWithOnePriceTest);\n\n    TestSuiteRun(tests);\n    TestSuiteDelete(tests);\n\n    return 0;\n}"};</script>
</div>


        <div class="share-btns share-btns-quiz-end" ng-show="getBtnSet()=='after-option'" ng-cloak>
            




    
        <a class="custom-share facebook-share" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/stock-price

" target="_blank" tracklink the-event="FB share click" the-properties='{"which" : "post-question option"}'><i class="fa fa-facebook"> </i> Share</a>
    
    
        <a class="custom-share twitter-share" href="https://twitter.com/intent/tweet?text=Solved%20this%20coding%20interview%20question%21&via=interviewcake&related=interviewcake&url=https%3A//www.interviewcake.com/question/python/stock-price
" target="_blank" tracklink the-event="Twitter share click" the-properties='{"which" : "post-question option"}'><i class="fa fa-twitter"> </i> Tweet</a>
    
    
        <a class="custom-share linkedin-share" href="https://www.linkedin.com/shareArticle?mini=true&url=https%3A//www.interviewcake.com/question/python/stock-price&title=&summary=Solved%20this%20coding%20interview%20question%21&source=Interview%20Cake
" target="_blank" tracklink the-event="LinkedIn share click" the-properties='{"which" : "post-question option"}'><i class="fa fa-linkedin"> </i> Share</a>
    


        </div>
        <div class="share-btns share-btns-quiz-end" ng-show="getBtnSet()=='after-must-review'" ng-cloak>
            




    
        <a class="custom-share facebook-share" href="https://www.facebook.com/sharer/sharer.php?u=https%3A//www.interviewcake.com/question/python/stock-price

" target="_blank" tracklink the-event="FB share click" the-properties='{"which" : "post-question must review"}'><i class="fa fa-facebook"> </i> Share</a>
    
    
        <a class="custom-share twitter-share" href="https://twitter.com/intent/tweet?text=Tough%20coding%20interview%20question%21&via=interviewcake&related=interviewcake&url=https%3A//www.interviewcake.com/question/python/stock-price
" target="_blank" tracklink the-event="Twitter share click" the-properties='{"which" : "post-question must review"}'><i class="fa fa-twitter"> </i> Tweet</a>
    
    
        <a class="custom-share linkedin-share" href="https://www.linkedin.com/shareArticle?mini=true&url=https%3A//www.interviewcake.com/question/python/stock-price&title=&summary=Tough%20coding%20interview%20question%21&source=Interview%20Cake
" target="_blank" tracklink the-event="LinkedIn share click" the-properties='{"which" : "post-question must review"}'><i class="fa fa-linkedin"> </i> Share</a>
    


        </div>
    </div>


    <div class="btn-sets" ng-cloak>


        <p class="prompt" ng-bind="getPromptStr()" ng-hide="endedQuestion"></p>

        <div class="btn-set btn-set-during" ng-show="isSingleTrack && getBtnSet()=='during'">
                <a ng-click="showPress()" id="btn-show" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-chevron-down"></span><span class="text" ng-bind="getShowBtnText()"></span></a>
        </div>

        <div class="btn-set btn-set-during" ng-show="!isSingleTrack && getBtnSet()=='during'">
			<a ng-click="haveAnswerPress()" id="btn-got-it" class="btn btn-default btn-large" style=""><span class="glyphicon glyphicon-ok"></span><span class="text" ng-bind="getHaveAnswerBtnText()"></span></a>
			<a ng-click="dontHaveAnswerPress()" id="btn-hint" class="btn btn-default btn-large" style=""><span class="fa fa-question"></span><span class="text" ng-bind="getDontHaveAnswerBtnText()"></span></a>
        </div>

        

    </div>

    <div class="next" ng-show="endedQuestion" ng-cloak>
		
        
			<div class="question-end-outside-course-bottom-cta">
				<h3>
					Ready for more?
				</h3>
				<a href="/table-of-contents" class="btn btn-branded btn-rarr btn-lg"><span class="text">Check out our full course</span></a>
			</div>
        
    </div>

</div>
</div>


</div>


        
        
        

        

            <div id="print-footer">
                <p>
                    Want more coding interview help?
                </p>

                <p>
                    Check out <span class="url">interviewcake.com</span> for more advice, guides, and practice questions.
                </p>
            </div>

            <div ng-cloak id="footer">

                
                <a class="newsletter-link" href="/free-weekly-coding-interview-problem-newsletter">
                    
                    Subscribe to our weekly question email list &raquo;
                </a>
                

                
                <div class="links">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="by-company">
                                    <h5>
                                        Programming interview questions by company:
                                    </h5>
                                    <ul>
                                        <li>
                                            <a href="/google-interview-questions">Google interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/facebook-interview-questions">Facebook interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/amazon-interview-questions">Amazon interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/uber-interview-questions">Uber interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/microsoft-interview-questions">Microsoft interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/apple-interview-questions">Apple interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/netflix-interview-questions">Netflix interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/dropbox-interview-questions">Dropbox interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/ebay-interview-questions">eBay interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/linkedin-interview-questions">LinkedIn interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/oracle-interview-questions">Oracle interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/paypal-interview-questions">PayPal interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/yahoo-interview-questions">Yahoo interview questions</a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="by-language">
                                    <h5>
                                        Programming interview questions by language:
                                    </h5>
                                    <ul>
                                        <li>
                                            <a href="/sql-interview-questions">SQL interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/testing-and-qa-interview-questions">Testing and QA interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/java-interview-questions">Java interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/python-interview-questions">Python interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/ruby-interview-questions">Ruby interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/javascript-interview-questions">JavaScript interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/cpp-interview-questions">C++ interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/c-interview-questions">C interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/swift-interview-questions">Swift interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/objective-c-interview-questions">Objective-C interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/php-interview-questions">PHP interview questions</a>
                                        </li>
                                        <li>
                                            <a href="/c-sharp-interview-questions">C# interview questions</a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                

                
                <div class="social-media">
                    <a class="facebook" href="https://www.facebook.com/interviewcake" target="_blank" tracklink the-event="FB footer click"><i class="fa fa-facebook"></i></a>
                    <a class="twitter" href="https://www.twitter.com/interviewcake" target="_blank" tracklink the-event="Twitter footer click"><i class="fa fa-twitter"></i></a>
                </div>
                

                
                    <div itemscope="" itemtype="http://schema.org/Corporation">
                        <span class="schemaorghide" itemprop="description">Programming interview practice and tips for software engineers looking for jobs.</span>
                        Copyright &copy; 2018
                        <span itemprop="name">Cake Labs, Inc.</span> All rights reserved.
                        <span class="schemaorghide" itemprop="image">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                        <span class="schemaorghide" itemprop="logo">https://www.interviewcake.com/static//images/cake_white_on_blue_600.png</span>
                        <span class="schemaorghide" itemprop="url">https://www.interviewcake.com</span>
                        <span class="schemaorghide" itemprop="telephone">(804) 876-2253</span>

                        <address itemprop="address" itemscope="" itemtype="http://schema.org/PostalAddress">
                            <span itemprop="streetAddress">228 Park Ave S #82632</span>,
                            <span itemprop="addressLocality">New York</span>,
                            <span itemprop="addressRegion">NY</span>
                            <span itemprop="addressCountry">US</span>
                            <span itemprop="postalCode">10003</span>
                            <span itemprop="telephone">(804) 876-2253</span>
                        </address>

                        <address class="schemaorghide" itemprop="location" itemscope="" itemtype="http://schema.org/PostalAddress">
                            <span itemprop="addressCountry">US</span>
                            <span itemprop="addressLocality">New York</span>
                            <span itemprop="addressRegion">NY</span>
                            <span itemprop="streetAddress">228 Park Ave S #82632</span>
                            <span itemprop="postalCode">10003</span>
                            <span itemprop="telephone">(804) 876-2253</span>
                        </address>

                        <div itemprop="location" itemscope="" itemtype="http://schema.org/Place">
                            <div itemprop="geo" itemscope="" itemtype="http://schema.org/GeoCoordinates">
                                <meta itemprop="latitude" content="37.76480">
                                <meta itemprop="longitude" content="-122.41872">
                            </div>
                        </div>
                    </div>
                

                <div>
                    <a href="/about">About</a>
                    |
                    <a rel="nofollow" href="/privacy-policy">Privacy</a>
                    |
                    <a rel="nofollow" href="/terms-and-conditions">Terms</a>
                </div>

				

            </div>

        

    </div>



</div> <!-- .left-panel -->

<div class="right-panel">
    <div ng-controller="EditorCtrl"
     class="editor-container"
     ng-class="{ 'editor-open-or-opening': editorOpenOrOpening }"
     ng-cloak>

    <button class="show-editor"
            ng-class="{ 'hide-editor': editorOpenOrPartlyOpen }"
            ng-click="editorOpenOrOpening ? closeEditor() : openEditor()">
        Editor
    </button>

    <div class="ace-container" ng-class="{ 'results-open': resultsOpenOrOpening }">
        <div ui-ace="{
                onLoad : aceLoaded,
                advanced: {
                    enableBasicAutocompletion: true,
                }}"
             ng-model="userCode">
        </div>

        <p class="reset-editor"
           ng-class="{'code-matches-editor': userCode === currentLanguageTemplate}"
           ng-click="resetEditor()">
            Reset editor
        </p>

        <select id="select-language-editor-width-hack" style="display: none">
            <option></option>
        </select>

        <div class="select-language-editor">
            <select ng-model="selectedLanguage"
                    ng-options="language.display_name_without_beta for language in aceLanguages |
                        orderBy: ['-dropdown_bottom', 'display_name']"
                    ng-change="selectedFromLanguageDropdown()">
            </select>
        </div>

        <i class="fa fa-chevron-up"
           ng-click="openResults()"
           ng-hide="hasCodeNeverBeenRun || resultsOpenOrOpening">
        </i>

        <button class="run-code"
                ng-click="runCode(); openResults(); hasCodeNeverBeenRun = false"
                ng-disabled="runningCode"
                ng-show="selectedLanguage.codewars">
            Run
        </button>
    </div>

    <div class="results-container" ng-class="{ 'running-code': runningCode }">
        <i class="fa fa-chevron-down" ng-click="closeResults()"></i>

        <div class="results">
            <p class="output help"  ng-show="outputHelp"  ng-bind="outputHelp"></p>
            <p class="output"       ng-show="output"      ng-bind="output"></p>
            <p class="output error" ng-show="outputError" ng-bind="outputError"></p>
        </div>

        <p class="qualified-io">
            Powered by
            <a href="https://qualified.io?utm_source=referral&utm_campaign=interviewcake" target="_blank">
                qualified.io
            </a>
        </p>
    </div>
</div>

</div>

</div> <!-- .panel-wrapper -->



    
        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
        <script src="//netdna.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>
        <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js"></script>
        <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular-route.min.js"></script>
        <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular-cookies.min.js"></script>
        <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular-animate.min.js"></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.2.0/katex.min.js"></script>
    

    
        <script src="/static/js/underscore-min.js"></script>
        <script src="/static/js/angular-django-rest-resource.js"></script>
        <script src="/static/js/angular-seo.js"></script>
        <script src="/static/js/sticky.js"></script>
    

    <script type="text/javascript">
        (function(){
  var FLAGS = {
    'learnings': true,'only_3_free_questions': true,'allow_anonymous_purchase': true,'data_structures_deployed': false,'tell_me_more': true,'tips_dropdown': true,'toc': true,'course_survey': true,'logo_testimonials': true,'student_pricing': true,'home_video': true
    },
    SWITCHES = {
    
    },
    SAMPLES = {
    
    };
  window.waffle = {
    "flag_is_active": function waffle_flag(flag_name) {
      
      return !!FLAGS[flag_name];
    },
    "switch_is_active": function waffle_switch(switch_name) {
      
      return !!SWITCHES[switch_name];
    },
    "sample_is_active": function waffle_sample(sample_name) {
      
      return !!SAMPLES[sample_name];
    },
    "FLAGS": FLAGS,
    "SWITCHES": SWITCHES,
    "SAMPLES": SAMPLES
  };
})();

    </script>

    
        <script>
            // in base.html we use editor_enabled to conditionally load ui-ace.js
            // so in base.js we need editor_enabled to conditionally load the ui.ace module
            window.IC.editor_enabled = true;
        </script>
    

    <script src="/static/js/base.js?bust=187"></script>

    
        <script src="/static/js/prism.min.js"></script>
        <script src="/static/js/jquery.payment.js"></script>
        <script src="/static/js/edgeUtils.js"></script>

        
            <script src="/static/js/ace/ace.js" type="text/javascript" charset="utf-8"></script>
            <script src="/static/js/ace/ui-ace.js" type="text/javascript"></script>
            <script src="/static/js/ace/ext-language_tools.js" type="text/javascript"></script>
        

    

    

    <script type="text/javascript">
        window.CACHEBUST_QUERY_STR = '?bust=187';
        // TODO: move above into the below
        window.JS_CONSTANTS = {"next_step_type_enum": {"done": "_NEXT_STEP_TYPE_DONE_", "login": "_NEXT_STEP_TYPE_LOGIN_", "course_section_item": "_NEXT_STEP_TYPE_COURSE_SECTION_ITEM_", "purchase": "_NEXT_STEP_TYPE_PURCHASE_"}, "DEFAULT_C18N_LANGUAGE": {"short_name": "python", "editor_template": "def my_function(arg):\n\n    # Write the body of your function here\n    \n\n    return 'running with %s' % arg\n\n# Run your function through some test cases here\n# Remember: debugging is half the battle!\nprint my_function('test input')\n", "codewars": "python", "display_name": "Python", "case_convention": "snake", "ace": "python", "prism": "python", "closest_languages": ["ruby", "java", "cpp", "javascript", "php", "csharp", "objectivec", "c", "swift"], "display_name_without_beta": "Python"}, "COURSE_SURVEY": [{"answers": ["As long as it takes", "Less than a month", "Less than a week", "It's basically tomorrow!"], "q_id": "time", "question": "How much time do you have to prepare for your interview?"}, {"answers": ["University", "Bootcamp", "Self-taught"], "q_id": "background", "question": "How'd you learn to code?"}, {"answers": ["I'm not good enough at some of the advanced topics", "I don't even know the basics", "I don't have enough time to prepare", "I won't get as high an offer as I can earn"], "q_id": "worry", "question": "What's your biggest worry for interviews?"}], "CACHEBUST_QUERY_STR": "?bust=187", "INTEGRATIONS_SETTING_ONLY_INTEGRATIONS_THAT_SUPPORT_FRONT_END_ONLY": {"Twitter Ads": true, "Google Analytics": true, "Optimizely": true, "All": false, "Adwords": true, "Facebook Pixel": true}, "ACE_LANGUAGES": [{"short_name": "haskell", "display_name_without_beta": "Haskell", "codewars": "haskell", "display_name": "Haskell", "ace": "haskell", "editor_template": "myFunction :: String -> String\n-- write the body of your function here\n\n\nmyFunction arg = \"running with \" ++ arg\n\nmain = do\n\n  -- run your function through some test cases here\n  -- remember: debugging is half the battle!\n  let result = myFunction \"test input\"\n  putStrLn result\n"}, {"short_name": "go", "display_name_without_beta": "Go", "codewars": "go", "display_name": "Go", "ace": "golang", "editor_template": "package main\n\nimport \"fmt\"\n\nfunc myFunction(arg string) string {\n\n    // Write the body of your function here\n    \n\n    return \"running with \" + arg\n}\n\nfunc main() {\n\n    // Run your function through some test cases here.\n    // Remember: debuggin is half the battle!\n    fmt.Println(myFunction(\"test input\"))\n}\n"}, {"short_name": "nolanguage", "display_name_without_beta": "Plain text", "display_name": "Plain text", "ace": "plain_text", "prism": "none", "dropdown_bottom": true}, {"short_name": "python", "editor_template": "def my_function(arg):\n\n    # Write the body of your function here\n    \n\n    return 'running with %s' % arg\n\n# Run your function through some test cases here\n# Remember: debugging is half the battle!\nprint my_function('test input')\n", "codewars": "python", "display_name": "Python", "case_convention": "snake", "ace": "python", "prism": "python", "closest_languages": ["ruby", "java", "cpp", "javascript", "php", "csharp", "objectivec", "c", "swift"], "display_name_without_beta": "Python"}, {"short_name": "ruby", "editor_template": "def my_function(arg)\n  # write the body of your function here\n  \n\n  return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "codewars": "ruby", "display_name": "Ruby", "case_convention": "snake", "ace": "ruby", "prism": "ruby", "closest_languages": ["python", "java", "cpp", "javascript", "php", "csharp", "objectivec", "c", "swift"], "display_name_without_beta": "Ruby"}, {"short_name": "java", "editor_template": "public class Solution {\n\n    public static String myFunction(String arg) {\n\n        // write the body of your function here\n        \n\n        return \"running with \" + arg;\n    }\n\n    public static void main(String[] args) {\n\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "codewars": "java", "display_name": "Java", "case_convention": "camel", "ace": "java", "prism": "java", "closest_languages": ["csharp", "javascript", "cpp", "c", "swift", "objectivec", "php", "ruby", "python"], "display_name_without_beta": "Java"}, {"short_name": "javascript", "editor_template": "function myFunction(arg) {\n\n  // write the body of your function here\n  \n\n  return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "codewars": "javascript", "display_name": "JavaScript", "case_convention": "camel", "ace": "javascript", "prism": "javascript", "closest_languages": ["java", "csharp", "swift", "php", "cpp", "c", "objectivec", "ruby", "python"], "display_name_without_beta": "JavaScript"}, {"short_name": "c", "editor_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint myFunction(char *arg)\n{\n    // write the body of your function here\n    \n\n    printf(\"running with %s\\n\", arg);\n    return 0;\n}\n\nint main()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    myFunction(\"test input\");\n    return 0;\n}", "codewars": "c", "display_name": "C", "case_convention": "camel", "ace": "c_cpp", "prism": "c", "closest_languages": ["cpp", "csharp", "java", "objectivec", "python", "php", "javascript", "ruby", "swift"], "display_name_without_beta": "C"}, {"short_name": "cpp", "editor_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    \n\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "codewars": "cpp", "display_name": "C++", "case_convention": "camel", "ace": "c_cpp", "prism": "cpp", "closest_languages": ["c", "csharp", "java", "objectivec", "python", "php", "javascript", "ruby", "swift"], "display_name_without_beta": "C++"}, {"short_name": "csharp", "editor_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            \n\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "codewars": "csharp", "display_name": "C#", "case_convention": "camel", "ace": "csharp", "prism": "csharp", "closest_languages": ["java", "javascript", "cpp", "c", "php", "swift", "objectivec", "ruby", "python"], "display_name_without_beta": "C#"}, {"short_name": "php", "editor_template": "function myFunction($arg) {\n\n    // write the body of your function here\n    \n\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n", "codewars": "php", "display_name": "PHP", "case_convention": "camel", "ace": "php", "prism": "php", "closest_languages": ["javascript", "java", "csharp", "c", "cpp", "objectivec", "swift", "ruby", "python"], "display_name_without_beta": "PHP"}, {"short_name": "swift", "codewars_version": "4.0", "codewars": "swift", "display_name": "Swift", "case_convention": "camel", "display_name_without_beta": "Swift", "ace": "swift", "prism": "swift", "closest_languages": ["java", "javascript", "csharp", "cpp", "php", "objectivec", "python", "c", "ruby"], "editor_template": "func myFunction(_ arg: String) -> String {\n\n    // write the body of your function here\n    \n\n    return \"running with \\(arg)\"\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nlet testInput = \"test input\"\nprint(myFunction(testInput))\n"}, {"short_name": "objectivec", "codewars_version": "objc-arc", "codewars": "objc", "display_name": "Objective-C", "case_convention": "camel", "display_name_without_beta": "Objective-C", "ace": "objectivec", "prism": "objectivec", "closest_languages": ["c", "cpp", "java", "javascript", "csharp", "swift", "python", "ruby", "php"], "editor_template": "// Code run in our editor is compiled with GNUStep\n\n#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n- (NSString *)myMethod:(NSString *)arg;\n@end\n\n@implementation Solution\n\n- (NSString *)myMethod:(NSString *)arg {\n    // write the body of your function here\n    \n\n    return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        Solution * solution = [Solution new];\n        NSString * result = [solution myMethod:@\"test input\"];\n        printf(\"%s\", [result UTF8String]);\n    }\n}"}], "C18N_LANGUAGES": [{"short_name": "python", "editor_template": "def my_function(arg):\n\n    # Write the body of your function here\n    \n\n    return 'running with %s' % arg\n\n# Run your function through some test cases here\n# Remember: debugging is half the battle!\nprint my_function('test input')\n", "codewars": "python", "display_name": "Python", "case_convention": "snake", "ace": "python", "prism": "python", "closest_languages": ["ruby", "java", "cpp", "javascript", "php", "csharp", "objectivec", "c", "swift"], "display_name_without_beta": "Python"}, {"short_name": "ruby", "editor_template": "def my_function(arg)\n  # write the body of your function here\n  \n\n  return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "codewars": "ruby", "display_name": "Ruby", "case_convention": "snake", "ace": "ruby", "prism": "ruby", "closest_languages": ["python", "java", "cpp", "javascript", "php", "csharp", "objectivec", "c", "swift"], "display_name_without_beta": "Ruby"}, {"short_name": "java", "editor_template": "public class Solution {\n\n    public static String myFunction(String arg) {\n\n        // write the body of your function here\n        \n\n        return \"running with \" + arg;\n    }\n\n    public static void main(String[] args) {\n\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "codewars": "java", "display_name": "Java", "case_convention": "camel", "ace": "java", "prism": "java", "closest_languages": ["csharp", "javascript", "cpp", "c", "swift", "objectivec", "php", "ruby", "python"], "display_name_without_beta": "Java"}, {"short_name": "javascript", "editor_template": "function myFunction(arg) {\n\n  // write the body of your function here\n  \n\n  return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "codewars": "javascript", "display_name": "JavaScript", "case_convention": "camel", "ace": "javascript", "prism": "javascript", "closest_languages": ["java", "csharp", "swift", "php", "cpp", "c", "objectivec", "ruby", "python"], "display_name_without_beta": "JavaScript"}, {"short_name": "c", "editor_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint myFunction(char *arg)\n{\n    // write the body of your function here\n    \n\n    printf(\"running with %s\\n\", arg);\n    return 0;\n}\n\nint main()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    myFunction(\"test input\");\n    return 0;\n}", "codewars": "c", "display_name": "C", "case_convention": "camel", "ace": "c_cpp", "prism": "c", "closest_languages": ["cpp", "csharp", "java", "objectivec", "python", "php", "javascript", "ruby", "swift"], "display_name_without_beta": "C"}, {"short_name": "cpp", "editor_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    \n\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "codewars": "cpp", "display_name": "C++", "case_convention": "camel", "ace": "c_cpp", "prism": "cpp", "closest_languages": ["c", "csharp", "java", "objectivec", "python", "php", "javascript", "ruby", "swift"], "display_name_without_beta": "C++"}, {"short_name": "csharp", "editor_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            \n\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "codewars": "csharp", "display_name": "C#", "case_convention": "camel", "ace": "csharp", "prism": "csharp", "closest_languages": ["java", "javascript", "cpp", "c", "php", "swift", "objectivec", "ruby", "python"], "display_name_without_beta": "C#"}, {"short_name": "php", "editor_template": "function myFunction($arg) {\n\n    // write the body of your function here\n    \n\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n", "codewars": "php", "display_name": "PHP", "case_convention": "camel", "ace": "php", "prism": "php", "closest_languages": ["javascript", "java", "csharp", "c", "cpp", "objectivec", "swift", "ruby", "python"], "display_name_without_beta": "PHP"}, {"short_name": "swift", "codewars_version": "4.0", "codewars": "swift", "display_name": "Swift", "case_convention": "camel", "display_name_without_beta": "Swift", "ace": "swift", "prism": "swift", "closest_languages": ["java", "javascript", "csharp", "cpp", "php", "objectivec", "python", "c", "ruby"], "editor_template": "func myFunction(_ arg: String) -> String {\n\n    // write the body of your function here\n    \n\n    return \"running with \\(arg)\"\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nlet testInput = \"test input\"\nprint(myFunction(testInput))\n"}, {"short_name": "objectivec", "codewars_version": "objc-arc", "codewars": "objc", "display_name": "Objective-C", "case_convention": "camel", "display_name_without_beta": "Objective-C", "ace": "objectivec", "prism": "objectivec", "closest_languages": ["c", "cpp", "java", "javascript", "csharp", "swift", "python", "ruby", "php"], "editor_template": "// Code run in our editor is compiled with GNUStep\n\n#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n- (NSString *)myMethod:(NSString *)arg;\n@end\n\n@implementation Solution\n\n- (NSString *)myMethod:(NSString *)arg {\n    // write the body of your function here\n    \n\n    return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        Solution * solution = [Solution new];\n        NSString * result = [solution myMethod:@\"test input\"];\n        printf(\"%s\", [result UTF8String]);\n    }\n}"}], "PRISM_LANGUAGES": [{"short_name": "nolanguage", "display_name_without_beta": "Plain text", "display_name": "Plain text", "ace": "plain_text", "prism": "none", "dropdown_bottom": true}, {"short_name": "html", "display_name": "HTML", "prism": "markup", "display_name_without_beta": "HTML"}, {"short_name": "sql", "display_name": "SQL", "prism": "sql", "display_name_without_beta": "SQL"}, {"short_name": "python", "editor_template": "def my_function(arg):\n\n    # Write the body of your function here\n    \n\n    return 'running with %s' % arg\n\n# Run your function through some test cases here\n# Remember: debugging is half the battle!\nprint my_function('test input')\n", "codewars": "python", "display_name": "Python", "case_convention": "snake", "ace": "python", "prism": "python", "closest_languages": ["ruby", "java", "cpp", "javascript", "php", "csharp", "objectivec", "c", "swift"], "display_name_without_beta": "Python"}, {"short_name": "ruby", "editor_template": "def my_function(arg)\n  # write the body of your function here\n  \n\n  return \"running with #{arg}\"\nend\n\n# run your function through some test cases here\n# remember: debugging is half the battle!\nputs my_function('test input')\n", "codewars": "ruby", "display_name": "Ruby", "case_convention": "snake", "ace": "ruby", "prism": "ruby", "closest_languages": ["python", "java", "cpp", "javascript", "php", "csharp", "objectivec", "c", "swift"], "display_name_without_beta": "Ruby"}, {"short_name": "java", "editor_template": "public class Solution {\n\n    public static String myFunction(String arg) {\n\n        // write the body of your function here\n        \n\n        return \"running with \" + arg;\n    }\n\n    public static void main(String[] args) {\n\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        String testInput = \"test input\";\n        System.out.println(myFunction(testInput));\n    }\n}", "codewars": "java", "display_name": "Java", "case_convention": "camel", "ace": "java", "prism": "java", "closest_languages": ["csharp", "javascript", "cpp", "c", "swift", "objectivec", "php", "ruby", "python"], "display_name_without_beta": "Java"}, {"short_name": "javascript", "editor_template": "function myFunction(arg) {\n\n  // write the body of your function here\n  \n\n  return 'running with ' + arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nconsole.log(myFunction('test input'));\n", "codewars": "javascript", "display_name": "JavaScript", "case_convention": "camel", "ace": "javascript", "prism": "javascript", "closest_languages": ["java", "csharp", "swift", "php", "cpp", "c", "objectivec", "ruby", "python"], "display_name_without_beta": "JavaScript"}, {"short_name": "c", "editor_template": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint myFunction(char *arg)\n{\n    // write the body of your function here\n    \n\n    printf(\"running with %s\\n\", arg);\n    return 0;\n}\n\nint main()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    myFunction(\"test input\");\n    return 0;\n}", "codewars": "c", "display_name": "C", "case_convention": "camel", "ace": "c_cpp", "prism": "c", "closest_languages": ["cpp", "csharp", "java", "objectivec", "python", "php", "javascript", "ruby", "swift"], "display_name_without_beta": "C"}, {"short_name": "cpp", "editor_template": "#include <iostream>\nusing namespace std;\n\nstring myFunction (const string& arg)\n{\n    // write the body of your function here\n    \n\n    return \"running with \" + arg;\n}\n\nint main ()\n{\n    // run your function through some test cases here\n    // remember: debugging is half the battle!\n    cout << myFunction (\"test input\");\n    return 0;\n}", "codewars": "cpp", "display_name": "C++", "case_convention": "camel", "ace": "c_cpp", "prism": "cpp", "closest_languages": ["c", "csharp", "java", "objectivec", "python", "php", "javascript", "ruby", "swift"], "display_name_without_beta": "C++"}, {"short_name": "csharp", "editor_template": "using System;\n\nnamespace Solution\n{\n    class Solution\n    {\n        public static string MyFunction(string arg)\n        {\n            // Write the body of your function here\n            \n\n            return $\"Running with {arg}\";\n        }\n\n        public static void Main(string[] args)\n        {\n            // Run your function through some test cases here.\n            // Remember: debugging is half the battle!\n            string testInput = \"test input\";\n            Console.WriteLine(MyFunction(testInput));\n        }\n    }\n}\n", "codewars": "csharp", "display_name": "C#", "case_convention": "camel", "ace": "csharp", "prism": "csharp", "closest_languages": ["java", "javascript", "cpp", "c", "php", "swift", "objectivec", "ruby", "python"], "display_name_without_beta": "C#"}, {"short_name": "php", "editor_template": "function myFunction($arg) {\n\n    // write the body of your function here\n    \n\n    return \"running with \" . $arg;\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\necho myFunction(\"test input\");\n", "codewars": "php", "display_name": "PHP", "case_convention": "camel", "ace": "php", "prism": "php", "closest_languages": ["javascript", "java", "csharp", "c", "cpp", "objectivec", "swift", "ruby", "python"], "display_name_without_beta": "PHP"}, {"short_name": "swift", "codewars_version": "4.0", "codewars": "swift", "display_name": "Swift", "case_convention": "camel", "display_name_without_beta": "Swift", "ace": "swift", "prism": "swift", "closest_languages": ["java", "javascript", "csharp", "cpp", "php", "objectivec", "python", "c", "ruby"], "editor_template": "func myFunction(_ arg: String) -> String {\n\n    // write the body of your function here\n    \n\n    return \"running with \\(arg)\"\n}\n\n// run your function through some test cases here\n// remember: debugging is half the battle!\nlet testInput = \"test input\"\nprint(myFunction(testInput))\n"}, {"short_name": "objectivec", "codewars_version": "objc-arc", "codewars": "objc", "display_name": "Objective-C", "case_convention": "camel", "display_name_without_beta": "Objective-C", "ace": "objectivec", "prism": "objectivec", "closest_languages": ["c", "cpp", "java", "javascript", "csharp", "swift", "python", "ruby", "php"], "editor_template": "// Code run in our editor is compiled with GNUStep\n\n#import <Foundation/Foundation.h>\n#import <stdio.h>\n\n@interface Solution : NSObject\n- (NSString *)myMethod:(NSString *)arg;\n@end\n\n@implementation Solution\n\n- (NSString *)myMethod:(NSString *)arg {\n    // write the body of your function here\n    \n\n    return [@\"running with \" stringByAppendingString:arg];\n}\n\n@end\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        // run your function through some test cases here\n        // remember: debugging is half the battle!\n        Solution * solution = [Solution new];\n        NSString * result = [solution myMethod:@\"test input\"];\n        printf(\"%s\", [result UTF8String]);\n    }\n}"}]};

        
        window.JS_VARS = {"questions_fully_attempted": [], "url_content_type": "question", "question_slug": "stock-price", "ace_slug": "stock-price"};
        

        
    </script>

    

    
        <script type="text/javascript" src="https://js.stripe.com/v2/"></script>
        <script type="text/javascript">
            Stripe.setPublishableKey('pk_live_4wtgGTkgBtk4YIB9JDjYdOD0');
        </script>
    

    

    
        <div id="fb-root"></div>
        <script>(function(d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=149278655279066";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));</script>
        <script id="twitter-wjs" src="https://platform.twitter.com/widgets.js"></script>
    

    
    
        
            <script type="text/ng-template" id="/partials/animation.html"><div class="animation-wrapper">
    <div class="animation" id="Stage-[--[getCompId()]--]" ng-class="getCompId()">
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/animation_iframe.html"><div class="animation-iframe-wrapper">
    <iframe class="animation-iframe" ng-class="'animation-iframe-'+getCompId()"></iframe>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/code-inline.html"><span class="ic-code-inline" ng-transclude></span></script>
        
    
        
            <script type="text/ng-template" id="/partials/code-block.html"><pre class="language-[--[language]--]">
  <code class="language-[--[language]--]" ng-transclude></code>
</pre>
<span class="warning-message" ng-show="warningMessage" ng-bind="warningMessage"></span>
<div class="select-language-content" ng-hide="staticLanguage" ng-cloak>
<select ng-model="contentLanguage"
        ng-options="language.display_name for language in contentLanguages | orderBy: 'display_name'"
        ng-change="updateLanguage(contentLanguage)">
</select>
</div>
<span class="only-content-language" ng-show="staticLanguage" ng-bind="onlyLanguage"></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/complexity.html"><span class="complexity"><span math>O([--[getComplexityMarkup()]--])</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/concept.html"><span class="concept-wrapper" ng-init="showConcept=false">

    <span ng-click="showConcept=!showConcept" class="concept">
        <span class="concept-name" ng-transclude></span>
        <span class="show-concept-icon">&#8628;</span>
    </span>

    <div ng-show="showConcept" class="slide concept-body embedded" ng-include="conceptPartialUrl">
        Loading...
    </div>

</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/function.html"><span class="ic-function"><span class="name" ng-transclude></span><span ng-hide="noParens">()</span></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/heading.html"><h3 class="heading slide" ng-show="shouldShow()" ng-cloak ng-bind="::getHeadingText()"></h3>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/inline-footnote.html"><span class="footnote-wrapper" ng-init="show = false">
    <span class="show-footnote-icon" ng-click="show = !show">&#8628;</span>
    <p class="footnote" ng-transclude ng-show="show">Loading...</p>
</span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/loading.html"><div class="Loading">
    Loading...
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/math.html"><span class="ic-math" ng-class="{'block': isBlock()}" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/note.html"><div class="note slide" ng-show="shouldShow()">
    <div class="note-content" ng-transclude>
    </div>
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/section.html"><div class="section-wrapper" ng-class="getSectionClass()" ng-init="ready=false" ng-show="shouldShow()">
    <span heading="[--[section]--]" hide-heading="[--[hideHeading]--]"></span>

    <div class="section" ng-class="getSectionClass()" ng-transclude>
    </div>

    
</div>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/variable.html"><span class="ic-variable" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/words.html"><span class="ic-words" ng-transclude></span>
</script>
        
    
        
            <script type="text/ng-template" id="/partials/sidebar-sticker.html"><div class="sidebar-sticker-container-container">
    <div class="sidebar-sticker-container" ng-hide="hide">
        <div class="sidebar-sticker" ng-style="{visibility: visibility}" sticky offset="100" hide-when-partially-offscreen ng-cloak blocks-news-drawer-when-visible id="left-side-sticker">
            <div class="sidebar-sticker-content">
	            <div ng-transclude>
	            </div>
	        </div>
	        <span class='close-button' ng-click="hide=true">&#215;</span>
        </div>
    </div>
</div></script>
        
    

    <!-- load current-user json with initial http request -->
    <div class="hidden" data-preload-resource="/api/v1/current-user/" data-thejson="{&quot;id&quot;:9997231,&quot;username&quot;:&quot;2018-10-21_23:46:15_i40e6r&quot;,&quot;email&quot;:null,&quot;date_joined&quot;:&quot;2018-10-21T23:46:15.637150+00:00&quot;,&quot;first_name&quot;:&quot;&quot;,&quot;last_name&quot;:&quot;&quot;,&quot;full_name&quot;:&quot;&quot;,&quot;short_name&quot;:&quot;friend&quot;,&quot;is_anonymous&quot;:true,&quot;is_on_last_question&quot;:false,&quot;percent_done&quot;:0,&quot;num_questions_done&quot;:0,&quot;num_questions_remaining&quot;:46,&quot;recruiting_is_interested_in_intros&quot;:null,&quot;is_full_access&quot;:false,&quot;is_student&quot;:false,&quot;first_payment_date&quot;:null,&quot;last_payment_date&quot;:null,&quot;num_free_questions_left&quot;:2,&quot;terms_has_agreed_to_latest&quot;:false,&quot;preferred_content_language&quot;:&quot;&quot;,&quot;preferred_editor_language&quot;:&quot;&quot;,&quot;is_staff&quot;:false,&quot;auth_providers_human_readable_list&quot;:&quot;&quot;,&quot;num_auth_providers&quot;:0,&quot;auth_email&quot;:&quot;&quot;,&quot;profile_public_id&quot;:null}">
        {"id":9997231,"username":"2018-10-21_23:46:15_i40e6r","email":null,"date_joined":"2018-10-21T23:46:15.637150+00:00","first_name":"","last_name":"","full_name":"","short_name":"friend","is_anonymous":true,"is_on_last_question":false,"percent_done":0,"num_questions_done":0,"num_questions_remaining":46,"recruiting_is_interested_in_intros":null,"is_full_access":false,"is_student":false,"first_payment_date":null,"last_payment_date":null,"num_free_questions_left":2,"terms_has_agreed_to_latest":false,"preferred_content_language":"","preferred_editor_language":"","is_staff":false,"auth_providers_human_readable_list":"","num_auth_providers":0,"auth_email":"","profile_public_id":null}
    </div>

    

    
        
    

    
    <div ng-controller="LoginModalCtrl" class="modal fade login-modal" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="Log In" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <button type="button" ng-show="closeable" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <div class="container-fluid">
                    <div class="row">
                        <div class="col-sm-6 login-buttons-wrapper">
                            <h3 ng-bind='note'>Log in/sign up</h3>
                            <p class="subheading">With just a couple clicks.</p>
                            <div class="login-btns">
    <a ng-href="/auth/login/github/?next=[--[next | urlescape]--]" class="btn btn-soc-github"><i class="fa fa-github"></i> <span class="bar">|</span> <span class="company">GitHub Auth</span></a>
    <a ng-href="/auth/login/google-oauth2/?next=[--[next | urlescape]--]" class="btn btn-soc-google-plus"><i class="fa my-fa-google-plus"></i> <span class="bar">|</span> <span class="company">Google Auth</span></a>
    <a ng-href="/auth/login/facebook/?next=[--[next | urlescape]--]" class="btn btn-soc-facebook"><i class="fa my-fa-facebook"></i> <span class="bar">|</span> <span class="company">Facebook Auth</span></a>
</div>
<p class="login-reassurance">
    <small>
        We'll never post on your wall or message your friends.
    </small>
</p>

                        </div>
                        <div class="col-sm-6 testimonial-wrapper">
                            <div class="inline-testimonial wider">
    
    <div class="image-wrapper">
        <img class="image-top" alt="David, happy user" src="/static//images/testimonials/david.jpg">
    </div>
    
    <span class="text text-with-image">
        <span class="quotation-mark">&ldquo;</span>I'm a veteran programmer who came across your website. After working through your problems I scheduled an interview. The company hired me and paid me 30% more than I asked for! I still use your site daily to help me keep my edge.
        <span class="author">
            &mdash; 
            
                David
            
        </span>
    </span>
</div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    

    <input type='hidden' name='csrfmiddlewaretoken' value='1yRIyFWeL9Ow3dSpfn6g7VuqXx43LtYQJDsEfEB9rPpTMWfYEOzqNwBepvgkw07T' />
    <div id="loading">
    . . .
    </div>
</body>

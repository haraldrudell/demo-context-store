'use strict';

exports.__esModule = true;
exports.validateArguments = exports.validateEnvironment = undefined;

var _isNumber = require('./../utils/isNumber');

var _isNumber2 = _interopRequireDefault(_isNumber);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Ensures, that function has been called in the browser
 *
 * @throws {Error} if called in non-browser environment
 */
function validateEnvironment() {
  var canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);

  /* istanbul ignore if */
  if (!canUseDOM) {
    throw new Error('Expected to be called in browser environment only.');
  }
}

/**
 * Validates input arguments
 *
 * @param {*} textarea
 * @param {*} options
 */
function validateArguments(textarea, options) {
  validateTextareaElement(textarea);
  validateOptions(options);
}

/**
 * Checks whether textarea is a valid DOM Element
 *
 * @param {Element} textarea
 * @throws {TypeError} if valid textarea DOM Element is not provided
 */
function validateTextareaElement(textarea) {
  var NODE_TYPE_ELEMENT = 1;

  if (!textarea || textarea.nodeType !== NODE_TYPE_ELEMENT) {
    throw new TypeError('You must provide a valid textarea DOM Element.');
  }
}

/**
 * Validates rows limits
 *
 * @param {*} options
 * @throws {TypeError} if `options` is not an object
 * @throws {TypeError} if either `maxRows` or `minRows` was provided, but is not a number
 * @throws {RangeError} if either `maxRows` or `minRows` was provided, but is not a positive number
 */
function validateOptions(options) {
  if (typeof options === 'undefined' || options === null) {
    return;
  }

  var isOptionsObject = Object.prototype.toString.call(options) === '[object Object]';

  if (!isOptionsObject) {
    throw new TypeError('Expected plain object for "options", instead got ' + typeof options + ':');
  }

  var rowLimits = ['minRows', 'maxRows'];

  for (var i = 0, length = rowLimits.length; i < length; i++) {
    var rowLimit = rowLimits[i];
    var value = options[rowLimit];

    if (typeof value === 'undefined') {
      continue;
    }

    if (!(0, _isNumber2.default)(value) || value < 0) {
      throw new TypeError('Expected value of "' + rowLimit + '" to be positive integer.');
    }

    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      var isInteger = value % 1 === 0;

      if (!isInteger) {
        /* eslint-disable no-console */
        console.warn('Expected value of "' + rowLimit + '" to be positive integer, instead got:', value, 'Will run "Math.floor" on it.');
        /* eslint-enable no-console */
      }
    }
  }
}

exports.validateEnvironment = validateEnvironment;
exports.validateArguments = validateArguments;


//////////////////
// WEBPACK FOOTER
// ./node_modules/textarea-autoresize/lib/modules/validation.js
// module id = ./node_modules/textarea-autoresize/lib/modules/validation.js
// module chunks = commons
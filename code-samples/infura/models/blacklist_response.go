// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlacklistResponse blacklist response
// swagger:model BlacklistResponse
type BlacklistResponse struct {

	// Blacklist
	// Required: true
	Blacklist []string `json:"blacklist"`

	// Fuzzylist
	// Required: true
	Fuzzylist []string `json:"fuzzylist"`

	// Tolerance
	// Required: true
	Tolerance *int64 `json:"tolerance"`

	// Version
	// Required: true
	Version *int64 `json:"version"`

	// Whitelist
	// Required: true
	Whitelist []string `json:"whitelist"`
}

// Validate validates this blacklist response
func (m *BlacklistResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlacklist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFuzzylist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTolerance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlacklistResponse) validateBlacklist(formats strfmt.Registry) error {

	if err := validate.Required("blacklist", "body", m.Blacklist); err != nil {
		return err
	}

	return nil
}

func (m *BlacklistResponse) validateFuzzylist(formats strfmt.Registry) error {

	if err := validate.Required("fuzzylist", "body", m.Fuzzylist); err != nil {
		return err
	}

	return nil
}

func (m *BlacklistResponse) validateTolerance(formats strfmt.Registry) error {

	if err := validate.Required("tolerance", "body", m.Tolerance); err != nil {
		return err
	}

	return nil
}

func (m *BlacklistResponse) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *BlacklistResponse) validateWhitelist(formats strfmt.Registry) error {

	if err := validate.Required("whitelist", "body", m.Whitelist); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlacklistResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlacklistResponse) UnmarshalBinary(b []byte) error {
	var res BlacklistResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

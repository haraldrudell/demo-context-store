// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JSONRPCResponse JSON RPC response
// swagger:model JSONRPCResponse
type JSONRPCResponse struct {

	// JSON-RPC request ID
	// Required: true
	ID *int64 `json:"id"`

	// JSON-RPC version
	// Required: true
	// Enum: [2.0]
	Jsonrpc *string `json:"jsonrpc"`

	// JSON-RPC result (can also be an object)
	Result string `json:"result,omitempty"`
}

// Validate validates this JSON RPC response
func (m *JSONRPCResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJsonrpc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JSONRPCResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var jsonRpcResponseTypeJsonrpcPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.0"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jsonRpcResponseTypeJsonrpcPropEnum = append(jsonRpcResponseTypeJsonrpcPropEnum, v)
	}
}

const (

	// JSONRPCResponseJsonrpcNr20 captures enum value "2.0"
	JSONRPCResponseJsonrpcNr20 string = "2.0"
)

// prop value enum
func (m *JSONRPCResponse) validateJsonrpcEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jsonRpcResponseTypeJsonrpcPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JSONRPCResponse) validateJsonrpc(formats strfmt.Registry) error {

	if err := validate.Required("jsonrpc", "body", m.Jsonrpc); err != nil {
		return err
	}

	// value enum
	if err := m.validateJsonrpcEnum("jsonrpc", "body", *m.Jsonrpc); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JSONRPCResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JSONRPCResponse) UnmarshalBinary(b []byte) error {
	var res JSONRPCResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

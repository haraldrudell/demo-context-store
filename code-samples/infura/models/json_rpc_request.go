// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JSONRPCRequest JSON RPC request
// swagger:discriminator JSONRPCRequest method
type JSONRPCRequest interface {
	runtime.Validatable

	// JSON-RPC request ID
	// Required: true
	ID() *int64
	SetID(*int64)

	// JSON-RPC version
	// Required: true
	// Enum: [2.0]
	Jsonrpc() *string
	SetJsonrpc(*string)

	// Ethereum JSON-RPC method
	// Required: true
	// Enum: [eth_sendRawTransaction eth_estimateGas eth_submitWork eth_submitHashrate]
	Method() string
	SetMethod(string)

	// x suppress
	XSuppress() struct {
		EthSendRawTransaction

		EthEstimateGas

		EthSubmitWork

		EthSubmitHashrate
	}
	SetXSuppress(struct {
		EthSendRawTransaction

		EthEstimateGas

		EthSubmitWork

		EthSubmitHashrate
	})
}

type jsonRpcRequest struct {
	idField *int64

	jsonrpcField *string

	methodField string

	xSuppressField struct {
		EthSendRawTransaction

		EthEstimateGas

		EthSubmitWork

		EthSubmitHashrate
	}
}

// ID gets the id of this polymorphic type
func (m *jsonRpcRequest) ID() *int64 {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *jsonRpcRequest) SetID(val *int64) {
	m.idField = val
}

// Jsonrpc gets the jsonrpc of this polymorphic type
func (m *jsonRpcRequest) Jsonrpc() *string {
	return m.jsonrpcField
}

// SetJsonrpc sets the jsonrpc of this polymorphic type
func (m *jsonRpcRequest) SetJsonrpc(val *string) {
	m.jsonrpcField = val
}

// Method gets the method of this polymorphic type
func (m *jsonRpcRequest) Method() string {
	return "JSONRPCRequest"
}

// SetMethod sets the method of this polymorphic type
func (m *jsonRpcRequest) SetMethod(val string) {

}

// XSuppress gets the x suppress of this polymorphic type
func (m *jsonRpcRequest) XSuppress() struct {
	EthSendRawTransaction

	EthEstimateGas

	EthSubmitWork

	EthSubmitHashrate
} {
	return m.xSuppressField
}

// SetXSuppress sets the x suppress of this polymorphic type
func (m *jsonRpcRequest) SetXSuppress(val struct {
	EthSendRawTransaction

	EthEstimateGas

	EthSubmitWork

	EthSubmitHashrate
}) {
	m.xSuppressField = val
}

// UnmarshalJSONRPCRequestSlice unmarshals polymorphic slices of JSONRPCRequest
func UnmarshalJSONRPCRequestSlice(reader io.Reader, consumer runtime.Consumer) ([]JSONRPCRequest, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []JSONRPCRequest
	for _, element := range elements {
		obj, err := unmarshalJSONRPCRequest(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalJSONRPCRequest unmarshals polymorphic JSONRPCRequest
func UnmarshalJSONRPCRequest(reader io.Reader, consumer runtime.Consumer) (JSONRPCRequest, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalJSONRPCRequest(data, consumer)
}

func unmarshalJSONRPCRequest(data []byte, consumer runtime.Consumer) (JSONRPCRequest, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the method property.
	var getType struct {
		Method string `json:"method"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("method", "body", getType.Method); err != nil {
		return nil, err
	}

	// The value of method is used to determine which type to create and unmarshal the data into
	switch getType.Method {
	case "JSONRPCRequest":
		var result jsonRpcRequest
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "eth_estimateGas":
		var result EthEstimateGas
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "eth_sendRawTransaction":
		var result EthSendRawTransaction
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "eth_submitHashrate":
		var result EthSubmitHashrate
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "eth_submitWork":
		var result EthSubmitWork
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid method value: %q", getType.Method)

}

// Validate validates this JSON RPC request
func (m *jsonRpcRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJsonrpc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXSuppress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *jsonRpcRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID()); err != nil {
		return err
	}

	return nil
}

var jsonRpcRequestTypeJsonrpcPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.0"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jsonRpcRequestTypeJsonrpcPropEnum = append(jsonRpcRequestTypeJsonrpcPropEnum, v)
	}
}

const (

	// JSONRPCRequestJsonrpcNr20 captures enum value "2.0"
	JSONRPCRequestJsonrpcNr20 string = "2.0"
)

// prop value enum
func (m *jsonRpcRequest) validateJsonrpcEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jsonRpcRequestTypeJsonrpcPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *jsonRpcRequest) validateJsonrpc(formats strfmt.Registry) error {

	if err := validate.Required("jsonrpc", "body", m.Jsonrpc()); err != nil {
		return err
	}

	// value enum
	if err := m.validateJsonrpcEnum("jsonrpc", "body", *m.Jsonrpc()); err != nil {
		return err
	}

	return nil
}

var jsonRpcRequestTypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["eth_sendRawTransaction","eth_estimateGas","eth_submitWork","eth_submitHashrate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jsonRpcRequestTypeMethodPropEnum = append(jsonRpcRequestTypeMethodPropEnum, v)
	}
}

const (

	// JSONRPCRequestMethodEthSendRawTransaction captures enum value "eth_sendRawTransaction"
	JSONRPCRequestMethodEthSendRawTransaction string = "eth_sendRawTransaction"

	// JSONRPCRequestMethodEthEstimateGas captures enum value "eth_estimateGas"
	JSONRPCRequestMethodEthEstimateGas string = "eth_estimateGas"

	// JSONRPCRequestMethodEthSubmitWork captures enum value "eth_submitWork"
	JSONRPCRequestMethodEthSubmitWork string = "eth_submitWork"

	// JSONRPCRequestMethodEthSubmitHashrate captures enum value "eth_submitHashrate"
	JSONRPCRequestMethodEthSubmitHashrate string = "eth_submitHashrate"
)

// prop value enum
func (m *jsonRpcRequest) validateMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jsonRpcRequestTypeMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *jsonRpcRequest) validateXSuppress(formats strfmt.Registry) error {

	if swag.IsZero(m.XSuppress()) { // not required
		return nil
	}

	return nil
}

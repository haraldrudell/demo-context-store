// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JSONRPCRequest JSON RPC request
// swagger:model JSONRPCRequest
type JSONRPCRequest struct {

	// JSON-RPC request ID
	// Required: true
	ID *int64 `json:"id"`

	// JSON-RPC version
	// Required: true
	// Enum: [2.0]
	Jsonrpc *string `json:"jsonrpc"`

	// Ethereum JSON-RPC method
	// Required: true
	// Enum: [eth_getBlockByNumber]
	Method *string `json:"method"`

	// params
	// Required: true
	Params []string `json:"params"`
}

// Validate validates this JSON RPC request
func (m *JSONRPCRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJsonrpc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JSONRPCRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var jsonRpcRequestTypeJsonrpcPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.0"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jsonRpcRequestTypeJsonrpcPropEnum = append(jsonRpcRequestTypeJsonrpcPropEnum, v)
	}
}

const (

	// JSONRPCRequestJsonrpcNr20 captures enum value "2.0"
	JSONRPCRequestJsonrpcNr20 string = "2.0"
)

// prop value enum
func (m *JSONRPCRequest) validateJsonrpcEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jsonRpcRequestTypeJsonrpcPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JSONRPCRequest) validateJsonrpc(formats strfmt.Registry) error {

	if err := validate.Required("jsonrpc", "body", m.Jsonrpc); err != nil {
		return err
	}

	// value enum
	if err := m.validateJsonrpcEnum("jsonrpc", "body", *m.Jsonrpc); err != nil {
		return err
	}

	return nil
}

var jsonRpcRequestTypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["eth_getBlockByNumber"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jsonRpcRequestTypeMethodPropEnum = append(jsonRpcRequestTypeMethodPropEnum, v)
	}
}

const (

	// JSONRPCRequestMethodEthGetBlockByNumber captures enum value "eth_getBlockByNumber"
	JSONRPCRequestMethodEthGetBlockByNumber string = "eth_getBlockByNumber"
)

// prop value enum
func (m *JSONRPCRequest) validateMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jsonRpcRequestTypeMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JSONRPCRequest) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	// value enum
	if err := m.validateMethodEnum("method", "body", *m.Method); err != nil {
		return err
	}

	return nil
}

func (m *JSONRPCRequest) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("params", "body", m.Params); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JSONRPCRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JSONRPCRequest) UnmarshalBinary(b []byte) error {
	var res JSONRPCRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

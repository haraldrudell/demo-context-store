// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/INFURA/project-harald-rudell/models"
)

// NewPostV3ProjectidParams creates a new PostV3ProjectidParams object
// with the default values initialized.
func NewPostV3ProjectidParams() *PostV3ProjectidParams {
	var ()
	return &PostV3ProjectidParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostV3ProjectidParamsWithTimeout creates a new PostV3ProjectidParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostV3ProjectidParamsWithTimeout(timeout time.Duration) *PostV3ProjectidParams {
	var ()
	return &PostV3ProjectidParams{

		timeout: timeout,
	}
}

// NewPostV3ProjectidParamsWithContext creates a new PostV3ProjectidParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostV3ProjectidParamsWithContext(ctx context.Context) *PostV3ProjectidParams {
	var ()
	return &PostV3ProjectidParams{

		Context: ctx,
	}
}

// NewPostV3ProjectidParamsWithHTTPClient creates a new PostV3ProjectidParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostV3ProjectidParamsWithHTTPClient(client *http.Client) *PostV3ProjectidParams {
	var ()
	return &PostV3ProjectidParams{
		HTTPClient: client,
	}
}

/*PostV3ProjectidParams contains all the parameters to send to the API endpoint
for the post v3 projectid operation typically these are written to a http.Request
*/
type PostV3ProjectidParams struct {

	/*Payload
	  Regular JSON-RPC payload (POST body)

	*/
	Payload *models.JSONRPCRequest
	/*Projectid*/
	Projectid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post v3 projectid params
func (o *PostV3ProjectidParams) WithTimeout(timeout time.Duration) *PostV3ProjectidParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post v3 projectid params
func (o *PostV3ProjectidParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post v3 projectid params
func (o *PostV3ProjectidParams) WithContext(ctx context.Context) *PostV3ProjectidParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post v3 projectid params
func (o *PostV3ProjectidParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post v3 projectid params
func (o *PostV3ProjectidParams) WithHTTPClient(client *http.Client) *PostV3ProjectidParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post v3 projectid params
func (o *PostV3ProjectidParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPayload adds the payload to the post v3 projectid params
func (o *PostV3ProjectidParams) WithPayload(payload *models.JSONRPCRequest) *PostV3ProjectidParams {
	o.SetPayload(payload)
	return o
}

// SetPayload adds the payload to the post v3 projectid params
func (o *PostV3ProjectidParams) SetPayload(payload *models.JSONRPCRequest) {
	o.Payload = payload
}

// WithProjectid adds the projectid to the post v3 projectid params
func (o *PostV3ProjectidParams) WithProjectid(projectid string) *PostV3ProjectidParams {
	o.SetProjectid(projectid)
	return o
}

// SetProjectid adds the projectid to the post v3 projectid params
func (o *PostV3ProjectidParams) SetProjectid(projectid string) {
	o.Projectid = projectid
}

// WriteToRequest writes these params to a swagger request
func (o *PostV3ProjectidParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Payload != nil {
		if err := r.SetBodyParam(o.Payload); err != nil {
			return err
		}
	}

	// path param projectid
	if err := r.SetPathParam("projectid", o.Projectid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

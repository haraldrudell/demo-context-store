"use strict";

exports.__esModule = true;
exports.checkColumns = checkColumns;
exports.checkFormula = checkFormula;

var _formula = require("./formula");

var _Query = require("./Query");

var _Query2 = _interopRequireDefault(_Query);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lookupRef(q, colId, inputId, lookupColumn) {
  if (!inputId) return lookupColumn(colId);

  var input = void 0;
  if (q.input.id === inputId) {
    input = q.input;
  } else {
    var relationship = q.relationships.find(function (rel) {
      return rel.target.id === inputId;
    });
    if (!relationship) return "Missing";
    input = relationship.target;
  }

  var columns = input.type === "external" ? input.table.columns : input.columns;
  var col = columns.find(function (c) {
    return c.name === colId;
  });
  if (!col) return "Missing";
  // Flow makes you validate the literal types again
  switch (col.ty) {
    case "boolean":
      return { ty: "boolean" };
    case "datetime":
      return { ty: "datetime" };
    case "number":
      return { ty: "number" };
    case "text":
      return { ty: "text" };
    case "variant":
      return { ty: "variant" };
    default:
      return {
        ty: "error",
        err: {
          type: "Ref Error",
          id: colId,
          parent: inputId
        }
      };
  }
}

function checkColumns(q) {
  var visiting = new Set();
  var done = new Map();

  function lookup(colId, inputId) {
    return lookupRef(q, colId, inputId, checkColumn);
  }

  function checkColumn(colId) {
    var res = done.get(colId);
    if (!res) {
      var col = q.columns[colId];
      if (!col) return "Missing";

      if (visiting.has(colId)) return "Cycle";
      visiting.add(colId);

      res = (0, _formula.validateFormula)(col.def.def, lookup);
      done.set(colId, res);

      visiting.delete(colId);
    }

    return res;
  }

  Object.keys(q.columns).forEach(function (colId) {
    checkColumn(colId);
    if (!done.has(colId)) throw new Error("dep calculation failed for " + colId);
  });

  return done;
}

function checkFormula(def, query, queryDeps) {
  function lookup(colId, inputId) {
    return lookupRef(query, colId, inputId, lookupCol);
  }

  function lookupCol(colId) {
    var res = queryDeps.get(colId);
    return res || "Missing";
  }

  return (0, _formula.validateFormula)(def, lookup);
}


//////////////////
// WEBPACK FOOTER
// ./node_modules/@sigmacomputing/sling/dist/check.js
// module id = 1322
// module chunks = 1
"use strict";

exports.__esModule = true;
exports.default = asText;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function escape() {
  var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

  var r = "";
  for (var i = 0; i < s.length; i++) {
    var ch = s[i];
    switch (ch) {
      case "\n":
        r += "\\n";
        break;
      case "\\":
        r += "\\\\";
        break;
      case "\0":
        r += "\\0";
        break;
      case "\t":
        r += "\\t";
        break;
      case "\r":
        r += "\\r";
        break;
      case '"':
        r += '\\"';
        break;
      default:
        r += ch;
        break;
    }
  }
  return r;
}

// Wrap a key name in quotes, as necessary
function quoteIdent() {
  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

  return Array.isArray(path) ? "[" + path.join("/") + "]" : "[" + path + "]";
}

var AsText = function () {
  function AsText(formula, lookupId) {
    _classCallCheck(this, AsText);

    this.text = "";
    this.formula = formula;
    this.lookupId = lookupId;
  }

  AsText.prototype.nullVal = function nullVal() {
    this.text += "Null";
  };

  AsText.prototype.boolVal = function boolVal(b) {
    this.text += b ? "True" : "False";
  };

  AsText.prototype.numVal = function numVal(v) {
    // XXX: doesn't consider locale
    this.text += v.toString();
  };

  AsText.prototype.strVal = function strVal(s) {
    this.text += "\"" + escape(s) + "\"";
  };

  AsText.prototype.const = function _const(v) {
    switch (v.type) {
      case "null":
        this.nullVal();
        break;
      case "bool":
        this.boolVal(v.val);
        break;
      case "number":
        this.numVal(v.val);
        break;
      case "string":
        this.strVal(v.val);
        break;
      default:
        throw new Error("Unknown ConstVal type: " + v.type);
    }
  };

  AsText.prototype.unOp = function unOp(op, x) {
    if (op === "not") this.text += "Not ";else this.text += op;
    this.node(x);
  };

  AsText.prototype.binOp = function binOp(op, x, y) {
    this.node(x);
    this.text += " " + op + " ";
    this.node(y);
  };

  AsText.prototype.callOp = function callOp(op, args) {
    var _this = this;

    this.text += op + "(";
    args.forEach(function (x, i) {
      if (i > 0) _this.text += ", ";
      _this.node(x);
    });
    this.text += ")";
  };

  AsText.prototype.nameRef = function nameRef(id, parent) {
    var name = this.lookupId(id, parent);
    if (name === null || name === undefined) {
      // This id no longer exists.  For now we just insert 'unknown' and no longer consider it bound
      this.text += "unknown";
      return;
    }
    this.text += quoteIdent(name);
  };

  AsText.prototype.unboundNameRef = function unboundNameRef(name) {
    this.text += quoteIdent(name);
  };

  AsText.prototype.paren = function paren(x) {
    this.text += "(";
    this.node(x);
    this.text += ")";
  };

  AsText.prototype.node = function node(f) {
    switch (f.type) {
      case "const":
        this.const(f.val);
        break;
      case "unOp":
        this.unOp(f.op, f.x);
        break;
      case "binOp":
        this.binOp(f.op, f.x, f.y);
        break;
      case "callOp":
        this.callOp(f.op, f.args);
        break;
      case "nameRef":
        this.nameRef(f.id, f.parent);
        break;
      case "paren":
        this.paren(f.x);
        break;
      case "unboundNameRef":
        this.unboundNameRef(f.name);
        break;
      case "empty":
        break;
      default:
        throw new Error("Unknown Formula AST type: " + f.type);
    }
  };

  AsText.prototype.asText = function asText() {
    this.node(this.formula);
    return this.text;
  };

  return AsText;
}();

function asText(f, lookupId) {
  return new AsText(f, lookupId).asText();
}


//////////////////
// WEBPACK FOOTER
// ./node_modules/@sigmacomputing/sling/dist/text.js
// module id = 1289
// module chunks = 1
"use strict";

exports.__esModule = true;
exports.doEdit = doEdit;

var _formula = require("./formula");

var _Query = require("./Query");

var _Query2 = _interopRequireDefault(_Query);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Mutate q as specified by edit
function doEdit(q, edit) {
  switch (edit.type) {
    // Column Edits
    case "AddColumn":
      q.addFormulaColumn(q.base.id, edit.label, (0, _formula.empty)(), edit.columnId);
      break;
    case "SetColumnLabel":
      q.columnLabelSet(edit.columnId, edit.label);
      break;
    case "SetColumnLevel":
      {
        var current = q.findColumnLevel(edit.columnId);
        q.moveColumns([edit.columnId], current, edit.levelId);
        break;
      }
    case "SetColumnPosition":
      {
        var _current = q.findColumnLevel(edit.columnId);
        q.reorderColumns(_current, [edit.columnId], edit.afterId);
        break;
      }
    case "SetColumnFormat":
      q.columnFormatSet(edit.columnId, edit.format);
      break;
    case "SetColumnHidden":
      {
        var column = q.getColumn(edit.columnId);
        column.isHidden = edit.isHidden;
        break;
      }
    case "SetColumnWidth":
      q.columnUpdateWidth(edit.columnId, edit.width);
      break;
    case "SetColumnFormula":
      q.setColumnFormula(edit.columnId, edit.formula);
      break;
    case "SetColumnFilter":
      if (!edit.filter) {
        q.clearFilter(edit.columnId);
        return;
      }
      switch (edit.filter.type) {
        case "include":
          q.setIncludeFilter(edit.columnId, edit.filter.values);
          break;
        case "exclude":
          q.setExcludeFilter(edit.columnId, edit.filter.values);
          break;
        case "range":
          {
            var includeNulls = void 0;
            if (edit.filter.includeNulls != null) {
              includeNulls = edit.filter.includeNulls;
            }
            q.setRangeFilter(edit.columnId, edit.filter.low, edit.filter.high, includeNulls);
            break;
          }
      }
      break;
    case "DeleteColumn":
      q.deleteColumn(edit.columnId, q.findColumnLevel(edit.columnId));
      break;

    // Level Edits
    case "AddLevel":
      q.createGroup(edit.keys, edit.above, edit.levelId);
      break;
    case "SetLevelKeys":
      q.setGroupKeys(edit.keys, edit.levelId);
      break;
    case "SetLevelSort":
      q.setLevelSort(edit.levelId, edit.sort);
      break;
    case "SetLevelCollapsed":
      {
        var level = q.getLevel(edit.levelId);
        level.isCollapsed = edit.isCollapsed;
        break;
      }
    case "SetLevelHidden":
      q.getLevel(edit.levelId);
      if (!q.view.levelHidden) {
        q.view.levelHidden = {};
      }
      q.view.levelHidden[edit.levelId] = edit.isHidden;
      break;
    case "DeleteLevel":
      q.deleteGroup(edit.levelId);
      break;

    // Relationship Edits
    case "AddRelationship":
      q.addRelationship(edit.relationship);
      break;
    case "SetRelationshipName":
      q.setRelationshipName(edit.inputId, edit.name);
      break;
    case "SetRelationshipKeys":
      {
        var rel = q.getRelationship(edit.inputId);
        q.setRelationshipTarget(edit.inputId, edit.sourceKeys, rel.target, edit.targetKeys);
        break;
      }
    case "SetRelationshipTarget":
      {
        var _rel = q.getRelationship(edit.inputId);
        q.setRelationshipTarget(edit.inputId, _rel.sourceKeys, edit.target, _rel.targetKeys);
        break;
      }
    case "DeleteRelationship":
      q.deleteRelationship(edit.inputId);
      break;

    // Toplevel Query Edits
    case "SetQueryLabel":
      q.queryLabelSet(edit.label);
      break;
    case "SetQueryInput":
      q.setInput(edit.input);
      break;
  }
}


//////////////////
// WEBPACK FOOTER
// ./node_modules/@sigmacomputing/sling/dist/edit.js
// module id = 1320
// module chunks = 1
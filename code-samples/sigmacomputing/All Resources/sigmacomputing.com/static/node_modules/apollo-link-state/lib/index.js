import { ApolloLink, Observable } from 'apollo-link';
import { hasDirectives, getMainDefinition } from 'apollo-utilities';
import graphql from 'graphql-anywhere';
import { removeClientSetsFromDocument } from './utils';
var capitalizeFirstLetter = function (str) { return str.charAt(0).toUpperCase() + str.slice(1); };
export var withClientState = function (resolvers) {
    return new ApolloLink(function (operation, forward) {
        var isClient = hasDirectives(['client'], operation.query);
        if (!isClient)
            return forward(operation);
        var server = removeClientSetsFromDocument(operation.query);
        var query = operation.query;
        var type = capitalizeFirstLetter((getMainDefinition(query) || {}).operation) || 'Query';
        return new Observable(function (observer) {
            if (server)
                operation.query = server;
            var obs = server ? forward(operation) : Observable.of({ data: {} });
            var sub = obs.subscribe({
                next: function (_a) {
                    var data = _a.data, errors = _a.errors;
                    var resolver = function (fieldName, rootValue, args, context, info) {
                        if (rootValue === void 0) { rootValue = {}; }
                        var fieldValue = rootValue[info.resultKey || fieldName];
                        if (fieldValue !== undefined)
                            return fieldValue;
                        var resolve = resolvers[rootValue.__typename || type][info.resultKey || fieldName];
                        if (resolve)
                            return resolve(rootValue, args, context, info);
                    };
                    var mergedData = graphql(resolver, query, data, operation.getContext(), operation.variables);
                    observer.next({ data: mergedData, errors: errors });
                },
                error: observer.error.bind(observer),
                complete: observer.complete.bind(observer),
            });
            return function () {
                if (sub)
                    sub.unsubscribe();
            };
        });
    });
};
//# sourceMappingURL=index.js.map


//////////////////
// WEBPACK FOOTER
// ./node_modules/apollo-link-state/lib/index.js
// module id = 1612
// module chunks = 1
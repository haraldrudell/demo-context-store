/// <reference path="../../typings/tsd.d.ts" />
require('../server_patch');
var fs = require('fs');
var helper_1 = require('../helper');
var render_1 = require('../render');
var ng_scripts_1 = require('../ng_scripts');
// export function ng2engine(filePath: string, options: engineOptions, done: Function) {
//   // defaults
//   options = options || <engineOptions>{};
//   options.providers = options.providers || [];
//   // read file on disk
//   try {
//     fs.readFile(filePath, (err, content) => {
//       if (err) { return done(err); }
//       // convert to string
//       var clientHtml: string = content.toString();
//       // TODO: better build scripts abstraction
//       if (options.server === false && options.client === false) {
//         return done(null, clientHtml);
//       }
//       if (options.server === false && options.client !== false) {
//         return done(null, buildClientScripts(clientHtml, options));
//       }
//       // bootstrap and render component to string
//       renderToString(options.App, options.providers)
//         .then(serializedCmp => {
//           let selector: string = selectorResolver(options.App);
//           // selector replacer explained here
//           // https://gist.github.com/gdi2290/c74afd9898d2279fef9f
//           // replace our component with serialized version
//           let rendered: string = clientHtml.replace(
//             // <selector></selector>
//             selectorRegExpFactory(selector),
//             // <selector>{{ serializedCmp }}</selector>
//             serializedCmp
//             // TODO: serializedData
//           );
//           done(null, buildClientScripts(rendered, options));
//         })
//         .catch(e => {
//           console.log(e.stack);
//           // if server fail then return client html
//           done(null, buildClientScripts(clientHtml, options));
//         });
//     });
//   } catch (e) {
//     done(e);
//   }
// };
function ng2engine(filePath, options, done) {
    // defaults
    options = options || {};
    options.providers = options.providers || [];
    // read file on disk
    try {
        fs.readFile(filePath, function (err, content) {
            if (err) {
                return done(err);
            }
            // convert to string
            var clientHtml = content.toString();
            // TODO: better build scripts abstraction
            if (options.server === false && options.client === false) {
                return done(null, clientHtml);
            }
            if (options.server === false && options.client !== false) {
                return done(null, ng_scripts_1.buildClientScripts(clientHtml, options));
            }
            // bootstrap and render component to string
            render_1.renderToStringWithPreboot(options.App, options.providers, options.preboot)
                .then(function (serializedCmp) {
                var selector = render_1.selectorResolver(options.App);
                // selector replacer explained here
                // https://gist.github.com/gdi2290/c74afd9898d2279fef9f
                // replace our component with serialized version
                var rendered = clientHtml.replace(
                // <selector></selector>
                helper_1.selectorRegExpFactory(selector), 
                // <selector>{{ serializedCmp }}</selector>
                serializedCmp);
                done(null, ng_scripts_1.buildClientScripts(rendered, options));
            })
                .catch(function (e) {
                console.log(e.stack);
                // if server fail then return client html
                done(null, ng_scripts_1.buildClientScripts(clientHtml, options));
            });
        });
    }
    catch (e) {
        done(e);
    }
}
exports.ng2engine = ng2engine;
;
exports.ng2engineWithPreboot = ng2engine;
function simpleReplace(filePath, options, done) {
    // defaults
    options = options || {};
    // read file on disk
    try {
        fs.readFile(filePath, function (err, content) {
            if (err) {
                return done(err);
            }
            // convert to string
            var clientHtml = content.toString();
            // TODO: better build scripts abstraction
            if (options.server === false && options.client === false) {
                return done(null, clientHtml);
            }
            if (options.server === false && options.client !== false) {
                return done(null, ng_scripts_1.buildClientScripts(clientHtml, options));
            }
            var rendered = clientHtml.replace(
            // <selector></selector>
            helper_1.selectorRegExpFactory(options.selector), 
            // <selector>{{ serializedCmp }}</selector>
            options.serializedCmp);
            done(null, ng_scripts_1.buildClientScripts(rendered, options));
        });
    }
    catch (e) {
        done(e);
    }
}
exports.simpleReplace = simpleReplace;
//# sourceMappingURL=engine.js.map
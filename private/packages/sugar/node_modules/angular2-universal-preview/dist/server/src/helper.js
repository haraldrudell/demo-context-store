/// <reference path="../typings/tsd.d.ts" />
function escapeRegExp(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}
exports.escapeRegExp = escapeRegExp;
function stringify(obj, replacer, spaces) {
    if (replacer === void 0) { replacer = null; }
    if (spaces === void 0) { spaces = 2; }
    return JSON.stringify(obj, replacer, spaces);
}
exports.stringify = stringify;
function showDebug(options) {
    if (options === void 0) { options = {}; }
    var info = '\n';
    for (var prop in options) {
        if (prop && options[prop]) {
            info += '' +
                '<pre>' +
                (prop + " = " + stringify(options[prop])) +
                '</pre>';
        }
    }
    return info;
}
exports.showDebug = showDebug;
function stringToBoolean(txt) {
    if (typeof txt !== 'string') {
        return txt;
    }
    switch (txt.toLowerCase()) {
        case 'false':
        case '\'false\'':
        case '"false"':
        case '0':
        case 'no': return false;
        case 'true':
        case '\'true\'':
        case '"true"':
        case '1':
        case 'yes': return true;
        default: return txt;
    }
}
exports.stringToBoolean = stringToBoolean;
function queryParamsToBoolean(query) {
    var obj = {};
    for (var prop in query) {
        if (query.hasOwnProperty(prop)) {
            obj[prop] = stringToBoolean(query[prop]);
        }
    }
    return obj;
}
exports.queryParamsToBoolean = queryParamsToBoolean;
function selectorRegExpFactory(selector) {
    /*
          $1       $2        $3
      <selector> content </selector>
    */
    var regExpSelector = "(<" + escapeRegExp(selector) + ">)((?:.|\\n)*?)(</" + escapeRegExp(selector) + ">)";
    return new RegExp(regExpSelector);
}
exports.selectorRegExpFactory = selectorRegExpFactory;
function arrayFlattenTree(children, arr) {
    for (var _i = 0; _i < children.length; _i++) {
        var child = children[_i];
        arr.push(child.res);
        arrayFlattenTree(child.children, arr);
    }
    return arr;
}
exports.arrayFlattenTree = arrayFlattenTree;
// TODO: use Angular's compiler
function simpleTemplate(html, options) {
    var re = /\{\{([^\}\}]+)?\}\}/g;
    var reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g;
    var code = 'with(cmp) { var r=[];\n';
    var cursor = 0;
    var match;
    var result = '';
    function add(line, js) {
        js ? (code += line.match(reExp) ? line + '\n' : 'r.push(' + line + ');\n') :
            (code += line != '' ? 'r.push("' + line.replace(/"/g, '\\"') + '");\n' : '');
        return add;
    }
    while ((match = re.exec(html), match)) {
        add(html.slice(cursor, match.index))(match[1], true);
        cursor = match.index + match[0].length;
    }
    add(html.substr(cursor, html.length - cursor));
    code = (code + 'return r.join(""); }').replace(/[\r\t\n]/g, '');
    try {
        result = new Function('cmp', code).apply(options, [options]);
    }
    catch (err) {
        console.error("'" + err.message + "'", " in \n\nCode:\n", code, "\n");
    }
    return result;
}
exports.simpleTemplate = simpleTemplate;
//# sourceMappingURL=helper.js.map
/// <reference path="../../../../server/typings/tsd.d.ts" />
import { OpaqueToken, EventEmitter } from 'angular2/angular2';
import { Http, Connection, ConnectionBackend, RequestOptions, ResponseOptions, RequestOptionsArgs, Request, BrowserXhr } from 'angular2/http';
import XMLHttpRequest = require('xhr2');
export declare const BASE_URL: OpaqueToken;
export declare const PRIME_CACHE: OpaqueToken;
export declare class NodeXhr {
    _baseUrl: string;
    constructor(baseUrl?: string);
    build(): XMLHttpRequest;
}
export declare class NodeBackend {
    private _browserXHR;
    private _baseResponseOptions;
    constructor(_browserXHR: BrowserXhr, _baseResponseOptions: ResponseOptions);
    createConnection(request: any): Connection;
}
export declare class NgPreloadCacheHttp extends Http {
    protected _backend: ConnectionBackend;
    protected _defaultOptions: RequestOptions;
    protected prime: boolean;
    _async: number;
    _callId: number;
    _rootNode: any;
    _activeNode: any;
    constructor(_backend: ConnectionBackend, _defaultOptions: RequestOptions, prime?: boolean);
    preload(factory: any): EventEmitter;
    request(url: string | Request, options?: RequestOptionsArgs): EventEmitter;
    get(url: string, options?: RequestOptionsArgs): EventEmitter;
    post(url: string, body: string, options?: RequestOptionsArgs): EventEmitter;
    put(url: string, body: string, options?: RequestOptionsArgs): EventEmitter;
    delete(url: string, options?: RequestOptionsArgs): EventEmitter;
    patch(url: string, body: string, options?: RequestOptionsArgs): EventEmitter;
    head(url: string, options?: RequestOptionsArgs): EventEmitter;
}
export declare var HTTP_PROVIDERS: Array<any>;

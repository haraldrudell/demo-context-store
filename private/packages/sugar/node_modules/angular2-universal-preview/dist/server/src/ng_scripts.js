var helper_1 = require('./helper');
// TODO: hard coded for now
// TODO: build from preboot config
// consider declarative config via directive <preboot minify="true"></preboot>
exports.prebootScript = "\n  <preboot>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/preboot/preboot.css\">\n    <script src=\"/preboot/preboot.js\"></script>\n    <script>preboot.start()</script>\n  </preboot>\n";
// Inject Angular for the developer
exports.angularScript = "\n  <!-- Browser polyfills -->\n  <script src=\"/bower_components/traceur-runtime/traceur-runtime.min.js\"></script>\n  <!-- SystemJS -->\n  <script src=\"/bower_components/system.js/dist/system.js\"></script>\n  <!-- Angular2: Bundle -->\n  <script src=\"/web_modules/js/bundle/angular2.dev.js\"></script>\n  <script src=\"/web_modules/js/bundle/router.dev.js\"></script>\n  <script src=\"/web_modules/js/bundle/http.dev.js\"></script>\n  <script type=\"text/javascript\">\n    System.config({\n      \"baseURL\": \"/\",\n      \"defaultJSExtensions\": true,\n      \"map\": {\n        \"*\": \"*.js\",\n        \"angular2\": \"node_modules/angular2\",\n        \"rx\": \"node_modules/rx/dist/rx.min\"\n      },\n      'meta': {\n        // auto-detection fails to detect properly\n        \"rx\": {\n          \"format\": \"cjs\" //https://github.com/systemjs/builder/issues/123\n        }\n      }\n    });\n  </script>\n";
exports.bootstrapButton = "\n  <div id=\"bootstrapButton\">\n    <style>\n     #bootstrapButton {\n      z-index:999999999;\n      position: absolute;\n      background-color: rgb(255, 255, 255);\n      padding: 0.5em;\n      border-radius: 3px;\n      border: 1px solid rgb(207, 206, 206);\n     }\n    </style>\n    <button onclick=\"bootstrap()\">\n      Bootstrap Angular2 Client\n    </button>\n  </div>\n";
function bootstrapFunction(appUrl) {
    return "\n  <script>\n    function bootstrap() {\n      if (this.bootstraped) return;\n      this.bootstraped = true;\n      System.import(\"" + appUrl + "\")\n        .then(function(module) {\n          return module.main();\n        })\n        .then(function() {\n          preboot.complete();\n          var $bootstrapButton = document.getElementById(\"bootstrapButton\");\n          if ($bootstrapButton) { $bootstrapButton.remove(); }\n        });\n    }\n  </script>\n";
}
exports.bootstrapFunction = bootstrapFunction;
;
exports.bootstrapApp = "\n  <script>\n    setTimeout(function() {\n      bootstrap();\n    });\n  </script>\n";
function buildScripts(scripts, appUrl) {
    // figure out what scripts to inject
    return (scripts === false ? '' : ((scripts.preboot === true ? exports.prebootScript : '') +
        (scripts.angular === true ? exports.angularScript : '') +
        (scripts.bootstrapButton === true ? exports.angularScript : '') +
        (scripts.bootstrapFunction === true ? bootstrapFunction(appUrl || '') : '') +
        (scripts.bootstrapApp === true ? exports.angularScript : '')));
}
exports.buildScripts = buildScripts;
// TODO: find better ways to configure the App initial state
// to pay off this technical debt
// currently checking for explicit values
function buildClientScripts(html, options) {
    return html
        .replace(helper_1.selectorRegExpFactory('preboot'), ((options.preboot === false) ? '' : exports.prebootScript))
        .replace(helper_1.selectorRegExpFactory('angular'), ((options.angular === false) ? '' : '$1' + exports.angularScript + '$3'))
        .replace(helper_1.selectorRegExpFactory('bootstrap'), '$1' +
        ((options.bootstrap === false) ? (exports.bootstrapButton +
            bootstrapFunction(options.componentUrl)) : (((options.client === undefined || options.server === undefined) ?
            '' : (options.client === false) ? '' : exports.bootstrapButton) +
            bootstrapFunction(options.componentUrl) +
            ((options.client === false) ? '' : exports.bootstrapApp))) +
        '$3');
}
exports.buildClientScripts = buildClientScripts;
//# sourceMappingURL=ng_scripts.js.map
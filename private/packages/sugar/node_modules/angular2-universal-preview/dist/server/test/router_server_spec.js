/// <reference path="../typings/tsd.d.ts"/>
require('reflect-metadata');
var server_router_1 = require('../src/router/server_router');
/**
 * These tests are pretty basic, but just have something in
 * place that we can expand in the future
 */
describe('server_router', function () {
    var serverLocationStrategy = null;
    beforeAll(function () {
        serverLocationStrategy = new server_router_1.ServerLocationStrategy('/');
    });
    afterAll(function () {
        serverLocationStrategy = null;
    });
    describe('ServerLocationStrategy', function () {
        it('should be defined', function () {
            expect(serverLocationStrategy).toBeDefined();
        });
        describe('should have all methods defined and functional', function () {
            it('should have method path()', function () {
                spyOn(serverLocationStrategy, 'path');
                serverLocationStrategy.path();
                expect(serverLocationStrategy.path).toHaveBeenCalled();
            });
            it('should have method forward()', function () {
                spyOn(serverLocationStrategy, 'forward');
                serverLocationStrategy.forward();
                expect(serverLocationStrategy.forward).toHaveBeenCalled();
            });
            it('should have method back()', function () {
                spyOn(serverLocationStrategy, 'back');
                serverLocationStrategy.back();
                expect(serverLocationStrategy.back).toHaveBeenCalled();
            });
            it('should have method getBaseHref()', function () {
                spyOn(serverLocationStrategy, 'getBaseHref').and.callThrough();
                var baseHref = serverLocationStrategy.getBaseHref();
                expect(serverLocationStrategy.getBaseHref).toHaveBeenCalled();
                expect(baseHref).toEqual('/');
            });
            it('should have method onPopState()', function () {
                spyOn(serverLocationStrategy, 'onPopState');
                var fn = function () { };
                serverLocationStrategy.onPopState(fn);
                expect(serverLocationStrategy.onPopState).toHaveBeenCalled();
                expect(serverLocationStrategy.onPopState).toHaveBeenCalledWith(fn);
            });
            it('should have method pushState()', function () {
                spyOn(serverLocationStrategy, 'pushState');
                var opts = {
                    state: {},
                    title: 'foo',
                    url: '/bar'
                };
                serverLocationStrategy.pushState(opts.state, opts.title, opts.url);
                expect(serverLocationStrategy.pushState).toHaveBeenCalled();
                expect(serverLocationStrategy.pushState).toHaveBeenCalledWith(opts.state, opts.title, opts.url);
            });
        });
    });
});
//# sourceMappingURL=router_server_spec.js.map